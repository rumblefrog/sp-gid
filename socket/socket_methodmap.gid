{"functions":[],"methodmaps":[{"name":"Socket","docStart":0,"docEnd":0,"docs":null,"parent":"Handle","methods":[{"name":"Socket","docStart":142,"docEnd":467,"docs":{"brief":"Creates a new socket.","tags":[{"tag":"","text":"Creates a new socket."},{"tag":"note","text":"this function may be relatively expensive, reuse sockets if possible"},{"tag":"param:SocketType","text":"protocol The protocol to use, SOCKET_TCP is default"},{"tag":"param:SocketErrorCB","text":"efunc  The error callback"},{"tag":"return","text":"Handle     The socket handle. Returns INVALID_HANDLE on failure"}]},"kind":"stock","returnType":"Socket","arguments":[{"type":"SocketType","name":"protocol","decl":"SocketType protocol","default":"SOCKET_TCP"},{"type":"SocketErrorCB","name":"efunc","decl":"SocketErrorCB efunc","default":null}]},{"name":"Bind","docStart":593,"docEnd":815,"docs":{"brief":"Binds the socket to a local address","tags":[{"tag":"","text":"Binds the socket to a local address"},{"tag":"param:String","text":"hostname The hostname (or IP) to bind the socket to."},{"tag":"param:int","text":"port  The port to bind the socket to."},{"tag":"return","text":"bool     true on success"}]},"kind":"stock","returnType":"bool","arguments":[{"type":"const char[]","name":"hostname","decl":"const char[] hostname","default":null},{"type":"int","name":"port","decl":"int port","default":null}]},{"name":"Connect","docStart":917,"docEnd":1559,"docs":{"brief":"Connects a socket","tags":[{"tag":"","text":"Connects a socket"},{"tag":"note","text":"this native is threaded, it may be still running after it executed, use the connect callback"},{"tag":"note","text":"invokes the SocketError callback with errorType = CONNECT_ERROR or EMPTY_HOST if it fails"},{"tag":"note","text":"invokes the SocketConnect callback if it succeeds"},{"tag":"param:SocketConnectCB","text":"cfunc  The connect callback"},{"tag":"param:SocketReceiveCB","text":"rfunc  The receive callback"},{"tag":"param:SocketDisconnectCB","text":"dfunc  The disconnect callback"},{"tag":"param:String","text":"hostname The hostname (or IP) to connect to."},{"tag":"param:int","text":"port  The port to connect to."}]},"kind":"stock","returnType":"void","arguments":[{"type":"SocketConnectCB","name":"cfunc","decl":"SocketConnectCB cfunc","default":null},{"type":"SocketReceiveCB","name":"rfunc","decl":"SocketReceiveCB rfunc","default":null},{"type":"SocketDisconnectCB","name":"dfunc","decl":"SocketDisconnectCB dfunc","default":null},{"type":"const char[]","name":"hostname","decl":"const char[] hostname","default":null},{"type":"int","name":"port","decl":"int port","default":null}]},{"name":"Disconnect","docStart":1753,"docEnd":2005,"docs":{"brief":"Disconnects a socket","tags":[{"tag":"","text":"Disconnects a socket"},{"tag":"note","text":"this will not close the handle, the socket will be reset to a state similar to after SocketCreate()"},{"tag":"note","text":"this won't trigger any disconnect/error callbacks"},{"tag":"return","text":"bool         true on success"}]},"kind":"stock","returnType":"bool","arguments":[]},{"name":"Listen","docStart":2072,"docEnd":2263,"docs":{"brief":"Makes a socket listen for incoming connections","tags":[{"tag":"","text":"Makes a socket listen for incoming connections"},{"tag":"param:SocketIncomingCB","text":"ifunc   The callback for incoming connections"},{"tag":"return","text":"bool                     true on success"}]},"kind":"stock","returnType":"bool","arguments":[{"type":"SocketIncomingCB","name":"ifunc","decl":"SocketIncomingCB ifunc","default":null}]},{"name":"Send","docStart":2351,"docEnd":2903,"docs":{"brief":"Sends data through the socket.","tags":[{"tag":"","text":"Sends data through the socket."},{"tag":"note","text":"specify size for binary safe operation"},{"tag":"note","text":"if size is not specified the \\0 terminator will not be included"},{"tag":"note","text":"This native is threaded, it may be still running after it executed (not atomic)."},{"tag":"note","text":"Use the SendqueueEmpty callback to determine when all data has been successfully sent."},{"tag":"note","text":"The socket extension will ensure that the data will be send in the correct order and split\nthe data if required."},{"tag":"param:String","text":"data    The data to send."}]},"kind":"stock","returnType":"void","arguments":[{"type":"const char[]","name":"data","decl":"const char[] data","default":null},{"type":"int","name":"size","decl":"int size","default":"-1"}]},{"name":"SendTo","docStart":2995,"docEnd":3705,"docs":{"brief":"Sends UDP data through the socket to a specific destination.","tags":[{"tag":"","text":"Sends UDP data through the socket to a specific destination."},{"tag":"note","text":"specify size for binary safe operation"},{"tag":"note","text":"if size is not specified the \\0 terminator will not be included"},{"tag":"note","text":"This native is threaded, it may be still running after it executed (not atomic)."},{"tag":"note","text":"Use the SendqueueEmpty callback to determine when all data has been successfully sent."},{"tag":"note","text":"The socket extension will ensure that the data will be send in the correct order and split\nthe data if required."},{"tag":"param:String","text":"data        The data to send."},{"tag":"param:String","text":"hostname    The hostname (or IP) to send to."},{"tag":"param:int","text":"port        The port to send to."}]},"kind":"stock","returnType":"void","arguments":[{"type":"const char[]","name":"data","decl":"const char[] data","default":null},{"type":"int","name":"size","decl":"int size","default":"-1"},{"type":"const char[]","name":"hostname","decl":"const char[] hostname","default":null},{"type":"int","name":"port","decl":"int port","default":null}]},{"name":"SetOption","docStart":3850,"docEnd":4082,"docs":{"brief":"Set a socket option.","tags":[{"tag":"","text":"Set a socket option."},{"tag":"param:SocketOption","text":"option  The option to modify (see enum SocketOption for details)."},{"tag":"param:int","text":"value   The value to set the option to."},{"tag":"return","text":"int          1 on success."}]},"kind":"stock","returnType":"int","arguments":[{"type":"SocketOption","name":"option","decl":"SocketOption option","default":null},{"type":"int","name":"value","decl":"int value","default":null}]},{"name":"SetReceiveCallback","docStart":4191,"docEnd":4494,"docs":{"brief":"Defines the callback function for when the socket receives data","tags":[{"tag":"","text":"Defines the callback function for when the socket receives data"},{"tag":"note","text":"this is only useful and required for child-sockets spawned by listen-sockets\n(otherwise you already set it in SocketConnect())"},{"tag":"param:SocketReceiveCB","text":"rfunc   The receive callback"}]},"kind":"stock","returnType":"void","arguments":[{"type":"SocketReceiveCB","name":"rfunc","decl":"SocketReceiveCB rfunc","default":null}]},{"name":"SetSendqueueEmptyCallback","docStart":4598,"docEnd":4960,"docs":{"brief":"Defines the callback function for when the socket sent all items in its send queue","tags":[{"tag":"","text":"Defines the callback function for when the socket sent all items in its send queue"},{"tag":"note","text":"this must be called AFTER sending (queueing) the data"},{"tag":"note","text":"if no send-data is queued this will fire the callback itself"},{"tag":"note","text":"the callback is guaranteed to fire"},{"tag":"param:SocketDisconnectCB","text":"dfunc   The disconnect callback"}]},"kind":"stock","returnType":"void","arguments":[{"type":"SocketSendqueueEmptyCB","name":"sfunc","decl":"SocketSendqueueEmptyCB sfunc","default":null}]},{"name":"SetDisconnectCallback","docStart":5085,"docEnd":5426,"docs":{"brief":"Defines the callback function for when the socket was properly disconnected by the remote side","tags":[{"tag":"","text":"Defines the callback function for when the socket was properly disconnected by the remote side"},{"tag":"note","text":"this is only useful and required for child-sockets spawned by listen-sockets\n(otherwise you already set it in SocketConnect())"},{"tag":"param:SocketDisconnectCB","text":"dfunc   The disconnect callback"}]},"kind":"stock","returnType":"void","arguments":[{"type":"SocketDisconnectCB","name":"dfunc","decl":"SocketDisconnectCB dfunc","default":null}]},{"name":"SetErrorCallback","docStart":5539,"docEnd":5840,"docs":{"brief":"Defines the callback function for when the socket triggered an error","tags":[{"tag":"","text":"Defines the callback function for when the socket triggered an error"},{"tag":"note","text":"this is only useful and required for child-sockets spawned by listen-sockets\n(otherwise you already set it in SocketCreate())"},{"tag":"param:SocketErrorCB","text":"efunc   The error callback"}]},"kind":"stock","returnType":"void","arguments":[{"type":"SocketErrorCB","name":"efunc","decl":"SocketErrorCB efunc","default":null}]},{"name":"SetArg","docStart":5938,"docEnd":6061,"docs":{"brief":"Sets the argument being passed to callbacks","tags":[{"tag":"","text":"Sets the argument being passed to callbacks"},{"tag":"param:any","text":"arg     The argument to set"}]},"kind":"stock","returnType":"void","arguments":[{"type":"any","name":"arg","decl":"any arg","default":null}]},{"name":"GetHostName","docStart":6125,"docEnd":6376,"docs":{"brief":"Retrieve the local system's hostname as the command \"hostname\" does.","tags":[{"tag":"","text":"Retrieve the local system's hostname as the command \"hostname\" does."},{"tag":"param:dest","text":"Destination string buffer to copy to."},{"tag":"param:destLen","text":"Destination buffer length (includes null terminator)."},{"tag":"return","text":"1 on success"}]},"kind":"stock","returnType":"int","arguments":[{"type":"char[]","name":"dest","decl":"char[] dest","default":null},{"type":"int","name":"destLen","decl":"int destLen","default":null}]}],"properties":[{"name":"Connected","docStart":6484,"docEnd":6585,"docs":{"brief":"Returns whether a socket is connected or not.","tags":[{"tag":"","text":"Returns whether a socket is connected or not."},{"tag":"return","text":"bool The connection status"}]},"type":"bool","getter":true,"setter":false}]}],"enumstructs":[],"constants":[],"enums":[],"typesets":[],"typedefs":[]}