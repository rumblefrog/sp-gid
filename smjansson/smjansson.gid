{"functions":[{"name":"json_typeof","docStart":667,"docEnd":823,"docs":{"brief":"Return the type of the JSON value.","tags":[{"tag":"","text":"Return the type of the JSON value."},{"tag":"param:hObj","text":"Handle to the JSON value"},{"tag":"return","text":"json_type of the value."}]},"kind":"native","returnType":"json_type","arguments":[{"type":"Handle","name":"hObj","decl":"Handle hObj","default":null}]},{"name":"Stringify_json_type","docStart":1764,"docEnd":2070,"docs":{"brief":"Saves json_type as a String in output","tags":[{"tag":"","text":"Saves json_type as a String in output"},{"tag":"param:input","text":"json_type value to convert to string"},{"tag":"param:output","text":"Buffer to store the json_type value"},{"tag":"param:maxlength","text":"Maximum length of string buffer."},{"tag":"return","text":"False if the type does not exist."}]},"kind":"stock","returnType":"bool","arguments":[{"type":"json_type","name":"input","decl":"json_type input","default":null},{"type":"char[]","name":"output","decl":"char[] output","default":null},{"type":"int","name":"maxlength","decl":"int maxlength","default":null}]},{"name":"json_equal","docStart":3468,"docEnd":3776,"docs":{"brief":"Test whether two JSON values are equal.","tags":[{"tag":"","text":"Test whether two JSON values are equal."},{"tag":"param:hObj","text":"Handle to the first JSON object"},{"tag":"param:hOther","text":"Handle to the second JSON object"},{"tag":"return","text":"Returns false if they are inequal or one\nor both of the pointers are NULL."}]},"kind":"native","returnType":"bool","arguments":[{"type":"Handle","name":"hObj","decl":"Handle hObj","default":null},{"type":"Handle","name":"hOther","decl":"Handle hOther","default":null}]},{"name":"json_copy","docStart":4266,"docEnd":4507,"docs":{"brief":"Get a shallow copy of the passed object","tags":[{"tag":"","text":"Get a shallow copy of the passed object"},{"tag":"param:hObj","text":"Handle to JSON object to be copied"},{"tag":"return","text":"Returns a shallow copy of the object,\nor INVALID_HANDLE on error."}]},"kind":"native","returnType":"Handle","arguments":[{"type":"Handle","name":"hObj","decl":"Handle hObj","default":null}]},{"name":"json_deep_copy","docStart":4547,"docEnd":4782,"docs":{"brief":"Get a deep copy of the passed object","tags":[{"tag":"","text":"Get a deep copy of the passed object"},{"tag":"param:hObj","text":"Handle to JSON object to be copied"},{"tag":"return","text":"Returns a deep copy of the object,\nor INVALID_HANDLE on error."}]},"kind":"native","returnType":"Handle","arguments":[{"type":"Handle","name":"hObj","decl":"Handle hObj","default":null}]},{"name":"json_object","docStart":4983,"docEnd":5155,"docs":{"brief":"Returns a handle to a new JSON object, or INVALID_HANDLE on error.\nInitially, the object is empty.","tags":[{"tag":"","text":"Returns a handle to a new JSON object, or INVALID_HANDLE on error.\nInitially, the object is empty."},{"tag":"return","text":"Handle to a new JSON object."}]},"kind":"native","returnType":"Handle","arguments":[]},{"name":"json_object_size","docStart":5186,"docEnd":5410,"docs":{"brief":"Returns the number of elements in hObj","tags":[{"tag":"","text":"Returns the number of elements in hObj"},{"tag":"param:hObj","text":"Handle to JSON object"},{"tag":"return","text":"Number of elements in hObj,\nor 0 if hObj is not a JSON object."}]},"kind":"native","returnType":"int","arguments":[{"type":"Handle","name":"hObj","decl":"Handle hObj","default":null}]},{"name":"json_object_get","docStart":5454,"docEnd":5740,"docs":{"brief":"Get a value corresponding to sKey from hObj","tags":[{"tag":"","text":"Get a value corresponding to sKey from hObj"},{"tag":"param:hObj","text":"Handle to JSON object to get a value from"},{"tag":"param:sKey","text":"Key to retrieve"},{"tag":"return","text":"Handle to a the JSON object or\nINVALID_HANDLE on error."}]},"kind":"native","returnType":"Handle","arguments":[{"type":"Handle","name":"hObj","decl":"Handle hObj","default":null},{"type":"const char[]","name":"sKey","decl":"const char[] sKey","default":null}]},{"name":"json_object_set","docStart":5805,"docEnd":6265,"docs":{"brief":"Set the value of sKey to hValue in hObj.\nIf there already is a value for key, it is replaced by the new value.","tags":[{"tag":"","text":"Set the value of sKey to hValue in hObj.\nIf there already is a value for key, it is replaced by the new value."},{"tag":"param:hObj","text":"Handle to JSON object to set a value on"},{"tag":"param:sKey","text":"Key to store in the object\nMust be a valid null terminated UTF-8 encoded\nUnicode string."},{"tag":"param:hValue","text":"Value to store in the object"},{"tag":"return","text":"True on success."}]},"kind":"native","returnType":"bool","arguments":[{"type":"Handle","name":"hObj","decl":"Handle hObj","default":null},{"type":"const char[]","name":"sKey","decl":"const char[] sKey","default":null},{"type":"Handle","name":"hValue","decl":"Handle hValue","default":null}]},{"name":"json_object_set_new","docStart":6343,"docEnd":6873,"docs":{"brief":"Set the value of sKey to hValue in hObj.\nIf there already is a value for key, it is replaced by the new value.\nThis function automatically closes the Handle to the value object.","tags":[{"tag":"","text":"Set the value of sKey to hValue in hObj.\nIf there already is a value for key, it is replaced by the new value.\nThis function automatically closes the Handle to the value object."},{"tag":"param:hObj","text":"Handle to JSON object to set a value on"},{"tag":"param:sKey","text":"Key to store in the object\nMust be a valid null terminated UTF-8 encoded\nUnicode string."},{"tag":"param:hValue","text":"Value to store in the object"},{"tag":"return","text":"True on success."}]},"kind":"native","returnType":"bool","arguments":[{"type":"Handle","name":"hObj","decl":"Handle hObj","default":null},{"type":"const char[]","name":"sKey","decl":"const char[] sKey","default":null},{"type":"Handle","name":"hValue","decl":"Handle hValue","default":null}]},{"name":"json_object_del","docStart":6955,"docEnd":7165,"docs":{"brief":"Delete sKey from hObj if it exists.","tags":[{"tag":"","text":"Delete sKey from hObj if it exists."},{"tag":"param:hObj","text":"Handle to JSON object to delete a key from"},{"tag":"param:sKey","text":"Key to delete"},{"tag":"return","text":"True on success."}]},"kind":"native","returnType":"bool","arguments":[{"type":"Handle","name":"hObj","decl":"Handle hObj","default":null},{"type":"const char[]","name":"sKey","decl":"const char[] sKey","default":null}]},{"name":"json_object_clear","docStart":7228,"docEnd":7427,"docs":{"brief":"Remove all elements from hObj.","tags":[{"tag":"","text":"Remove all elements from hObj."},{"tag":"param:hObj","text":"Handle to JSON object to remove all\nelements from."},{"tag":"return","text":"True on success."}]},"kind":"native","returnType":"bool","arguments":[{"type":"Handle","name":"hObj","decl":"Handle hObj","default":null}]},{"name":"json_object_update","docStart":7473,"docEnd":7784,"docs":{"brief":"Update hObj with the key-value pairs from hOther, overwriting\nexisting keys.","tags":[{"tag":"","text":"Update hObj with the key-value pairs from hOther, overwriting\nexisting keys."},{"tag":"param:hObj","text":"Handle to JSON object to update"},{"tag":"param:hOther","text":"Handle to JSON object to get update\nkeys/values from."},{"tag":"return","text":"True on success."}]},"kind":"native","returnType":"bool","arguments":[{"type":"Handle","name":"hObj","decl":"Handle hObj","default":null},{"type":"Handle","name":"hOther","decl":"Handle hOther","default":null}]},{"name":"json_object_update_existing","docStart":7846,"docEnd":8182,"docs":{"brief":"Like json_object_update(), but only the values of existing keys\nare updated. No new keys are created.","tags":[{"tag":"","text":"Like json_object_update(), but only the values of existing keys\nare updated. No new keys are created."},{"tag":"param:hObj","text":"Handle to JSON object to update"},{"tag":"param:hOther","text":"Handle to JSON object to get update\nkeys/values from."},{"tag":"return","text":"True on success."}]},"kind":"native","returnType":"bool","arguments":[{"type":"Handle","name":"hObj","decl":"Handle hObj","default":null},{"type":"Handle","name":"hOther","decl":"Handle hOther","default":null}]},{"name":"json_object_update_missing","docStart":8253,"docEnd":8591,"docs":{"brief":"Like json_object_update(), but only new keys are created.\nThe value of any existing key is not changed.","tags":[{"tag":"","text":"Like json_object_update(), but only new keys are created.\nThe value of any existing key is not changed."},{"tag":"param:hObj","text":"Handle to JSON object to update"},{"tag":"param:hOther","text":"Handle to JSON object to get update\nkeys/values from."},{"tag":"return","text":"True on success."}]},"kind":"native","returnType":"bool","arguments":[{"type":"Handle","name":"hObj","decl":"Handle hObj","default":null},{"type":"Handle","name":"hOther","decl":"Handle hOther","default":null}]},{"name":"json_object_iter","docStart":9177,"docEnd":9615,"docs":{"brief":"Returns a handle to an iterator which can be used to iterate over\nall key-value pairs in hObj.\nIf you are not iterating to the end of hObj make sure to close the\nhandle to the iterator manually.","tags":[{"tag":"","text":"Returns a handle to an iterator which can be used to iterate over\nall key-value pairs in hObj.\nIf you are not iterating to the end of hObj make sure to close the\nhandle to the iterator manually."},{"tag":"param:hObj","text":"Handle to JSON object to get an iterator\nfor."},{"tag":"return","text":"Handle to JSON object iterator,\nor INVALID_HANDLE on error."}]},"kind":"native","returnType":"Handle","arguments":[{"type":"Handle","name":"hObj","decl":"Handle hObj","default":null}]},{"name":"json_object_iter_at","docStart":9662,"docEnd":10221,"docs":{"brief":"Like json_object_iter(), but returns an iterator to the key-value\npair in object whose key is equal to key.\nIterating forward to the end of object only yields all key-value\npairs of the object if key happens to be the first key in the\nunderlying hash table.","tags":[{"tag":"","text":"Like json_object_iter(), but returns an iterator to the key-value\npair in object whose key is equal to key.\nIterating forward to the end of object only yields all key-value\npairs of the object if key happens to be the first key in the\nunderlying hash table."},{"tag":"param:hObj","text":"Handle to JSON object to get an iterator\nfor."},{"tag":"param:sKey","text":"Start key for the iterator"},{"tag":"return","text":"Handle to JSON object iterator,\nor INVALID_HANDLE on error."}]},"kind":"native","returnType":"Handle","arguments":[{"type":"Handle","name":"hObj","decl":"Handle hObj","default":null},{"type":"const char[]","name":"key","decl":"const char[] key","default":null}]},{"name":"json_object_iter_next","docStart":10289,"docEnd":10740,"docs":{"brief":"Returns an iterator pointing to the next key-value pair in object.\nThis automatically closes the Handle to the iterator hIter.","tags":[{"tag":"","text":"Returns an iterator pointing to the next key-value pair in object.\nThis automatically closes the Handle to the iterator hIter."},{"tag":"param:hObj","text":"Handle to JSON object."},{"tag":"param:hIter","text":"Handle to JSON object iterator."},{"tag":"return","text":"Handle to JSON object iterator,\nor INVALID_HANDLE on error, or if the\nwhole object has been iterated through."}]},"kind":"native","returnType":"Handle","arguments":[{"type":"Handle","name":"hObj","decl":"Handle hObj","default":null},{"type":"Handle","name":"hIter","decl":"Handle hIter","default":null}]},{"name":"json_object_iter_key","docStart":10806,"docEnd":11246,"docs":{"brief":"Extracts the associated key of hIter as a null terminated UTF-8\nencoded string in the passed buffer.","tags":[{"tag":"","text":"Extracts the associated key of hIter as a null terminated UTF-8\nencoded string in the passed buffer."},{"tag":"param:hIter","text":"Handle to the JSON String object"},{"tag":"param:sKeyBuffer","text":"Buffer to store the value of the String."},{"tag":"param:maxlength","text":"Maximum length of string buffer."},{"tag":"error","text":"Invalid JSON Object Iterator."},{"tag":"return","text":"Length of the returned string or -1 on error."}]},"kind":"native","returnType":"int","arguments":[{"type":"Handle","name":"hIter","decl":"Handle hIter","default":null},{"type":"char[]","name":"sKeyBuffer","decl":"char[] sKeyBuffer","default":null},{"type":"int","name":"maxlength","decl":"int maxlength","default":null}]},{"name":"json_object_iter_value","docStart":11329,"docEnd":11529,"docs":{"brief":"Returns a handle to the value hIter is pointing at.","tags":[{"tag":"","text":"Returns a handle to the value hIter is pointing at."},{"tag":"param:hIter","text":"Handle to JSON object iterator."},{"tag":"return","text":"Handle to value or INVALID_HANDLE on error."}]},"kind":"native","returnType":"Handle","arguments":[{"type":"Handle","name":"hIter","decl":"Handle hIter","default":null}]},{"name":"json_object_iter_set","docStart":11583,"docEnd":11893,"docs":{"brief":"Set the value of the key-value pair in hObj, that is pointed to\nby hIter, to hValue.","tags":[{"tag":"","text":"Set the value of the key-value pair in hObj, that is pointed to\nby hIter, to hValue."},{"tag":"param:hObj","text":"Handle to JSON object."},{"tag":"param:hIter","text":"Handle to JSON object iterator."},{"tag":"param:hValue","text":"Handle to JSON value."},{"tag":"return","text":"True on success."}]},"kind":"native","returnType":"bool","arguments":[{"type":"Handle","name":"hObj","decl":"Handle hObj","default":null},{"type":"Handle","name":"hIter","decl":"Handle hIter","default":null},{"type":"Handle","name":"hValue","decl":"Handle hValue","default":null}]},{"name":"json_object_iter_set_new","docStart":11971,"docEnd":12351,"docs":{"brief":"Set the value of the key-value pair in hObj, that is pointed to\nby hIter, to hValue.\nThis function automatically closes the Handle to the value object.","tags":[{"tag":"","text":"Set the value of the key-value pair in hObj, that is pointed to\nby hIter, to hValue.\nThis function automatically closes the Handle to the value object."},{"tag":"param:hObj","text":"Handle to JSON object."},{"tag":"param:hIter","text":"Handle to JSON object iterator."},{"tag":"param:hValue","text":"Handle to JSON value."},{"tag":"return","text":"True on success."}]},"kind":"native","returnType":"bool","arguments":[{"type":"Handle","name":"hObj","decl":"Handle hObj","default":null},{"type":"Handle","name":"hIter","decl":"Handle hIter","default":null},{"type":"Handle","name":"hValue","decl":"Handle hValue","default":null}]},{"name":"json_array","docStart":12524,"docEnd":12660,"docs":{"brief":"Returns a handle to a new JSON array, or INVALID_HANDLE on error.","tags":[{"tag":"","text":"Returns a handle to a new JSON array, or INVALID_HANDLE on error."},{"tag":"return","text":"Handle to the new JSON array"}]},"kind":"native","returnType":"Handle","arguments":[]},{"name":"json_array_size","docStart":12690,"docEnd":12916,"docs":{"brief":"Returns the number of elements in hArray","tags":[{"tag":"","text":"Returns the number of elements in hArray"},{"tag":"param:hObj","text":"Handle to JSON array"},{"tag":"return","text":"Number of elements in hArray,\nor 0 if hObj is not a JSON array."}]},"kind":"native","returnType":"int","arguments":[{"type":"Handle","name":"hArray","decl":"Handle hArray","default":null}]},{"name":"json_array_get","docStart":12961,"docEnd":13257,"docs":{"brief":"Returns the element in hArray at position iIndex.","tags":[{"tag":"","text":"Returns the element in hArray at position iIndex."},{"tag":"param:hArray","text":"Handle to JSON array to get a value from"},{"tag":"param:iIndex","text":"Position to retrieve"},{"tag":"return","text":"Handle to a the JSON object or\nINVALID_HANDLE on error."}]},"kind":"native","returnType":"Handle","arguments":[{"type":"Handle","name":"hArray","decl":"Handle hArray","default":null},{"type":"int","name":"iIndex","decl":"int iIndex","default":null}]},{"name":"json_array_set","docStart":13316,"docEnd":13672,"docs":{"brief":"Replaces the element in array at position iIndex with hValue.\nThe valid range for iIndex is from 0 to the return value of\njson_array_size() minus 1.","tags":[{"tag":"","text":"Replaces the element in array at position iIndex with hValue.\nThe valid range for iIndex is from 0 to the return value of\njson_array_size() minus 1."},{"tag":"param:hArray","text":"Handle to JSON array"},{"tag":"param:iIndex","text":"Position to replace"},{"tag":"param:hValue","text":"Value to store in the array"},{"tag":"return","text":"True on success."}]},"kind":"native","returnType":"bool","arguments":[{"type":"Handle","name":"hArray","decl":"Handle hArray","default":null},{"type":"int","name":"iIndex","decl":"int iIndex","default":null},{"type":"Handle","name":"hValue","decl":"Handle hValue","default":null}]},{"name":"json_array_set_new","docStart":13744,"docEnd":14170,"docs":{"brief":"Replaces the element in array at position iIndex with hValue.\nThe valid range for iIndex is from 0 to the return value of\njson_array_size() minus 1.\nThis function automatically closes the Handle to the value object.","tags":[{"tag":"","text":"Replaces the element in array at position iIndex with hValue.\nThe valid range for iIndex is from 0 to the return value of\njson_array_size() minus 1.\nThis function automatically closes the Handle to the value object."},{"tag":"param:hArray","text":"Handle to JSON array"},{"tag":"param:iIndex","text":"Position to replace"},{"tag":"param:hValue","text":"Value to store in the array"},{"tag":"return","text":"True on success."}]},"kind":"native","returnType":"bool","arguments":[{"type":"Handle","name":"hArray","decl":"Handle hArray","default":null},{"type":"int","name":"iIndex","decl":"int iIndex","default":null},{"type":"Handle","name":"hValue","decl":"Handle hValue","default":null}]},{"name":"json_array_append","docStart":14246,"docEnd":14467,"docs":{"brief":"Appends value to the end of array, growing the size of array by 1.","tags":[{"tag":"","text":"Appends value to the end of array, growing the size of array by 1."},{"tag":"param:hArray","text":"Handle to JSON array"},{"tag":"param:hValue","text":"Value to append to the array"},{"tag":"return","text":"True on success."}]},"kind":"native","returnType":"bool","arguments":[{"type":"Handle","name":"hArray","decl":"Handle hArray","default":null},{"type":"Handle","name":"hValue","decl":"Handle hValue","default":null}]},{"name":"json_array_append_new","docStart":14530,"docEnd":14821,"docs":{"brief":"Appends value to the end of array, growing the size of array by 1.\nThis function automatically closes the Handle to the value object.","tags":[{"tag":"","text":"Appends value to the end of array, growing the size of array by 1.\nThis function automatically closes the Handle to the value object."},{"tag":"param:hArray","text":"Handle to JSON array"},{"tag":"param:hValue","text":"Value to append to the array"},{"tag":"return","text":"True on success."}]},"kind":"native","returnType":"bool","arguments":[{"type":"Handle","name":"hArray","decl":"Handle hArray","default":null},{"type":"Handle","name":"hValue","decl":"Handle hValue","default":null}]},{"name":"json_array_insert","docStart":14888,"docEnd":15226,"docs":{"brief":"Inserts value to hArray at position iIndex, shifting the elements at\niIndex and after it one position towards the end of the array.","tags":[{"tag":"","text":"Inserts value to hArray at position iIndex, shifting the elements at\niIndex and after it one position towards the end of the array."},{"tag":"param:hArray","text":"Handle to JSON array"},{"tag":"param:iIndex","text":"Position to insert at"},{"tag":"param:hValue","text":"Value to store in the array"},{"tag":"return","text":"True on success."}]},"kind":"native","returnType":"bool","arguments":[{"type":"Handle","name":"hArray","decl":"Handle hArray","default":null},{"type":"int","name":"iIndex","decl":"int iIndex","default":null},{"type":"Handle","name":"hValue","decl":"Handle hValue","default":null}]},{"name":"json_array_insert_new","docStart":15301,"docEnd":15709,"docs":{"brief":"Inserts value to hArray at position iIndex, shifting the elements at\niIndex and after it one position towards the end of the array.\nThis function automatically closes the Handle to the value object.","tags":[{"tag":"","text":"Inserts value to hArray at position iIndex, shifting the elements at\niIndex and after it one position towards the end of the array.\nThis function automatically closes the Handle to the value object."},{"tag":"param:hArray","text":"Handle to JSON array"},{"tag":"param:iIndex","text":"Position to insert at"},{"tag":"param:hValue","text":"Value to store in the array"},{"tag":"return","text":"True on success."}]},"kind":"native","returnType":"bool","arguments":[{"type":"Handle","name":"hArray","decl":"Handle hArray","default":null},{"type":"int","name":"iIndex","decl":"int iIndex","default":null},{"type":"Handle","name":"hValue","decl":"Handle hValue","default":null}]},{"name":"json_array_remove","docStart":15788,"docEnd":16068,"docs":{"brief":"Removes the element in hArray at position iIndex, shifting the\nelements after iIndex one position towards the start of the array.","tags":[{"tag":"","text":"Removes the element in hArray at position iIndex, shifting the\nelements after iIndex one position towards the start of the array."},{"tag":"param:hArray","text":"Handle to JSON array"},{"tag":"param:iIndex","text":"Position to insert at"},{"tag":"return","text":"True on success."}]},"kind":"native","returnType":"bool","arguments":[{"type":"Handle","name":"hArray","decl":"Handle hArray","default":null},{"type":"int","name":"iIndex","decl":"int iIndex","default":null}]},{"name":"json_array_clear","docStart":16128,"docEnd":16259,"docs":{"brief":"Removes all elements from hArray.","tags":[{"tag":"","text":"Removes all elements from hArray."},{"tag":"param:hArray","text":"Handle to JSON array"},{"tag":"return","text":"True on success."}]},"kind":"native","returnType":"bool","arguments":[{"type":"Handle","name":"hArray","decl":"Handle hArray","default":null}]},{"name":"json_array_extend","docStart":16306,"docEnd":16541,"docs":{"brief":"Appends all elements in hOther to the end of hArray.","tags":[{"tag":"","text":"Appends all elements in hOther to the end of hArray."},{"tag":"param:hArray","text":"Handle to JSON array to be extended"},{"tag":"param:hOther","text":"Handle to JSON array, source to copy from"},{"tag":"return","text":"True on success."}]},"kind":"native","returnType":"bool","arguments":[{"type":"Handle","name":"hArray","decl":"Handle hArray","default":null},{"type":"Handle","name":"hOther","decl":"Handle hOther","default":null}]},{"name":"json_true","docStart":16638,"docEnd":16799,"docs":{"brief":"Returns a handle to a new JSON Boolean with value true,\nor INVALID_HANDLE on error.","tags":[{"tag":"","text":"Returns a handle to a new JSON Boolean with value true,\nor INVALID_HANDLE on error."},{"tag":"return","text":"Handle to the new Boolean object"}]},"kind":"native","returnType":"Handle","arguments":[]},{"name":"json_false","docStart":16828,"docEnd":16990,"docs":{"brief":"Returns a handle to a new JSON Boolean with value false,\nor INVALID_HANDLE on error.","tags":[{"tag":"","text":"Returns a handle to a new JSON Boolean with value false,\nor INVALID_HANDLE on error."},{"tag":"return","text":"Handle to the new Boolean object"}]},"kind":"native","returnType":"Handle","arguments":[]},{"name":"json_boolean","docStart":17020,"docEnd":17257,"docs":{"brief":"Returns a handle to a new JSON Boolean with the value passed\nin bState or INVALID_HANDLE on error.","tags":[{"tag":"","text":"Returns a handle to a new JSON Boolean with the value passed\nin bState or INVALID_HANDLE on error."},{"tag":"param:bState","text":"Value for the new Boolean object"},{"tag":"return","text":"Handle to the new Boolean object"}]},"kind":"native","returnType":"Handle","arguments":[{"type":"bool","name":"bState","decl":"bool bState","default":null}]},{"name":"json_null","docStart":17300,"docEnd":17435,"docs":{"brief":"Returns a handle to a new JSON NULL or INVALID_HANDLE on error.","tags":[{"tag":"","text":"Returns a handle to a new JSON NULL or INVALID_HANDLE on error."},{"tag":"return","text":"Handle to the new NULL object"}]},"kind":"native","returnType":"Handle","arguments":[]},{"name":"json_string","docStart":17730,"docEnd":17985,"docs":{"brief":"Returns a handle to a new JSON string, or INVALID_HANDLE on error.","tags":[{"tag":"","text":"Returns a handle to a new JSON string, or INVALID_HANDLE on error."},{"tag":"param:sValue","text":"Value for the new String object\nMust be a valid UTF-8 encoded Unicode string."},{"tag":"return","text":"Handle to the new String object"}]},"kind":"native","returnType":"Handle","arguments":[{"type":"const char[]","name":"sValue","decl":"const char[] sValue","default":null}]},{"name":"json_string_value","docStart":18035,"docEnd":18474,"docs":{"brief":"Saves the associated value of hString as a null terminated UTF-8\nencoded string in the passed buffer.","tags":[{"tag":"","text":"Saves the associated value of hString as a null terminated UTF-8\nencoded string in the passed buffer."},{"tag":"param:hString","text":"Handle to the JSON String object"},{"tag":"param:sValueBuffer","text":"Buffer to store the value of the String."},{"tag":"param:maxlength","text":"Maximum length of string buffer."},{"tag":"error","text":"Invalid JSON String Object."},{"tag":"return","text":"Length of the returned string or -1 on error."}]},"kind":"native","returnType":"int","arguments":[{"type":"Handle","name":"hString","decl":"Handle hString","default":null},{"type":"char[]","name":"sValueBuffer","decl":"char[] sValueBuffer","default":null},{"type":"int","name":"maxlength","decl":"int maxlength","default":null}]},{"name":"json_string_set","docStart":18558,"docEnd":18921,"docs":{"brief":"Sets the associated value of JSON String object to value.","tags":[{"tag":"","text":"Sets the associated value of JSON String object to value."},{"tag":"param:hString","text":"Handle to the JSON String object"},{"tag":"param:sValue","text":"Value to set the object to.\nMust be a valid UTF-8 encoded Unicode string."},{"tag":"error","text":"Invalid JSON String Object."},{"tag":"return","text":"True on success."}]},"kind":"native","returnType":"bool","arguments":[{"type":"Handle","name":"hString","decl":"Handle hString","default":null},{"type":"char[]","name":"sValue","decl":"char[] sValue","default":null}]},{"name":"json_integer","docStart":19460,"docEnd":19663,"docs":{"brief":"Returns a handle to a new JSON integer, or INVALID_HANDLE on error.","tags":[{"tag":"","text":"Returns a handle to a new JSON integer, or INVALID_HANDLE on error."},{"tag":"param:iValue","text":"Value for the new Integer object"},{"tag":"return","text":"Handle to the new Integer object"}]},"kind":"native","returnType":"Handle","arguments":[{"type":"int","name":"iValue","decl":"int iValue","default":null}]},{"name":"json_integer_value","docStart":19705,"docEnd":20011,"docs":{"brief":"Returns the associated value of a JSON Integer Object.","tags":[{"tag":"","text":"Returns the associated value of a JSON Integer Object."},{"tag":"param:hInteger","text":"Handle to the JSON Integer object"},{"tag":"error","text":"Invalid JSON Integer Object."},{"tag":"return","text":"Value of the hInteger,\nor 0 if hInteger is not a JSON integer."}]},"kind":"native","returnType":"int","arguments":[{"type":"Handle","name":"hInteger","decl":"Handle hInteger","default":null}]},{"name":"json_integer_set","docStart":20061,"docEnd":20346,"docs":{"brief":"Sets the associated value of JSON Integer to value.","tags":[{"tag":"","text":"Sets the associated value of JSON Integer to value."},{"tag":"param:hInteger","text":"Handle to the JSON Integer object"},{"tag":"param:iValue","text":"Value to set the object to."},{"tag":"error","text":"Invalid JSON Integer Object."},{"tag":"return","text":"True on success."}]},"kind":"native","returnType":"bool","arguments":[{"type":"Handle","name":"hInteger","decl":"Handle hInteger","default":null},{"type":"int","name":"iValue","decl":"int iValue","default":null}]},{"name":"json_real","docStart":20407,"docEnd":20603,"docs":{"brief":"Returns a handle to a new JSON real, or INVALID_HANDLE on error.","tags":[{"tag":"","text":"Returns a handle to a new JSON real, or INVALID_HANDLE on error."},{"tag":"param:fValue","text":"Value for the new Real object"},{"tag":"return","text":"Handle to the new String object"}]},"kind":"native","returnType":"Handle","arguments":[{"type":"float","name":"fValue","decl":"float fValue","default":null}]},{"name":"json_real_value","docStart":20644,"docEnd":20929,"docs":{"brief":"Returns the associated value of a JSON Real.","tags":[{"tag":"","text":"Returns the associated value of a JSON Real."},{"tag":"param:hReal","text":"Handle to the JSON Real object"},{"tag":"error","text":"Invalid JSON Real Object."},{"tag":"return","text":"Float value of hReal,\nor 0.0 if hReal is not a JSON Real."}]},"kind":"native","returnType":"float","arguments":[{"type":"Handle","name":"hReal","decl":"Handle hReal","default":null}]},{"name":"json_real_set","docStart":20975,"docEnd":21255,"docs":{"brief":"Sets the associated value of JSON Real to fValue.","tags":[{"tag":"","text":"Sets the associated value of JSON Real to fValue."},{"tag":"param:hReal","text":"Handle to the JSON Integer object"},{"tag":"param:fValue","text":"Value to set the object to."},{"tag":"error","text":"Invalid JSON Real handle."},{"tag":"return","text":"True on success."}]},"kind":"native","returnType":"bool","arguments":[{"type":"Handle","name":"hReal","decl":"Handle hReal","default":null},{"type":"float","name":"value","decl":"float value","default":null}]},{"name":"json_number_value","docStart":21311,"docEnd":21646,"docs":{"brief":"Returns the associated value of a JSON integer or a\nJSON Real, cast to Float regardless of the actual type.","tags":[{"tag":"","text":"Returns the associated value of a JSON integer or a\nJSON Real, cast to Float regardless of the actual type."},{"tag":"param:hNumber","text":"Handle to the JSON Number"},{"tag":"error","text":"Not a JSON Real or JSON Integer"},{"tag":"return","text":"Float value of hNumber,\nor 0.0 on error."}]},"kind":"native","returnType":"float","arguments":[{"type":"Handle","name":"hNumber","decl":"Handle hNumber","default":null}]},{"name":"json_load","docStart":22119,"docEnd":22447,"docs":{"brief":"Decodes the JSON string sJSON and returns the array or object it contains.\nErrors while decoding can be found in the sourcemod error log.","tags":[{"tag":"","text":"Decodes the JSON string sJSON and returns the array or object it contains.\nErrors while decoding can be found in the sourcemod error log."},{"tag":"param:sJSON","text":"String containing valid JSON"},{"tag":"return","text":"Handle to JSON object or array.\nor INVALID_HANDLE on error."}]},"kind":"native","returnType":"Handle","arguments":[{"type":"const char[]","name":"sJSON","decl":"const char[] sJSON","default":null}]},{"name":"json_load_ex","docStart":22494,"docEnd":23165,"docs":{"brief":"Decodes the JSON string sJSON and returns the array or object it contains.\nThis function provides additional error feedback and does not log errors\nto the sourcemod error log.","tags":[{"tag":"","text":"Decodes the JSON string sJSON and returns the array or object it contains.\nThis function provides additional error feedback and does not log errors\nto the sourcemod error log."},{"tag":"param:sJSON","text":"String containing valid JSON"},{"tag":"param:sErrorText","text":"This buffer will be filled with the error\nmessage."},{"tag":"param:maxlen","text":"Size of the buffer"},{"tag":"param:iLine","text":"This int will contain the line of the error"},{"tag":"param:iColumn","text":"This int will contain the column of the error"},{"tag":"return","text":"Handle to JSON object or array.\nor INVALID_HANDLE on error."}]},"kind":"native","returnType":"Handle","arguments":[{"type":"const char[]","name":"sJSON","decl":"const char[] sJSON","default":null},{"type":"char[]","name":"sErrorText","decl":"char[] sErrorText","default":null},{"type":"int","name":"maxlen","decl":"int maxlen","default":null},{"type":"int&","name":"iLine","decl":"int& iLine","default":null},{"type":"int&","name":"iColumn","decl":"int& iColumn","default":null}]},{"name":"json_load_file","docStart":23272,"docEnd":23622,"docs":{"brief":"Decodes the JSON text in file sFilePath and returns the array or object\nit contains.\nErrors while decoding can be found in the sourcemod error log.","tags":[{"tag":"","text":"Decodes the JSON text in file sFilePath and returns the array or object\nit contains.\nErrors while decoding can be found in the sourcemod error log."},{"tag":"param:sFilePath","text":"Path to a file containing pure JSON"},{"tag":"return","text":"Handle to JSON object or array.\nor INVALID_HANDLE on error."}]},"kind":"native","returnType":"Handle","arguments":[{"type":"const char","name":"sFilePath[]","decl":"const char sFilePath[]","default":null}]},{"name":"json_load_file_ex","docStart":23695,"docEnd":24386,"docs":{"brief":"Decodes the JSON text in file sFilePath and returns the array or object\nit contains.\nThis function provides additional error feedback and does not log errors\nto the sourcemod error log.","tags":[{"tag":"","text":"Decodes the JSON text in file sFilePath and returns the array or object\nit contains.\nThis function provides additional error feedback and does not log errors\nto the sourcemod error log."},{"tag":"param:sFilePath","text":"Path to a file containing pure JSON"},{"tag":"param:sErrorText","text":"This buffer will be filled with the error\nmessage."},{"tag":"param:maxlen","text":"Size of the buffer"},{"tag":"param:iLine","text":"This int will contain the line of the error"},{"tag":"param:iColumn","text":"This int will contain the column of the error"},{"tag":"return","text":"Handle to JSON object or array.\nor INVALID_HANDLE on error."}]},"kind":"native","returnType":"Handle","arguments":[{"type":"const char","name":"sFilePath[]","decl":"const char sFilePath[]","default":null},{"type":"char[]","name":"sErrorText","decl":"char[] sErrorText","default":null},{"type":"int","name":"maxlen","decl":"int maxlen","default":null},{"type":"int&","name":"iLine","decl":"int& iLine","default":null},{"type":"int&","name":"iColumn","decl":"int& iColumn","default":null}]},{"name":"json_dump","docStart":24757,"docEnd":26214,"docs":{"brief":"Saves the JSON representation of hObject in sJSON.","tags":[{"tag":"","text":"Saves the JSON representation of hObject in sJSON."},{"tag":"param:hObject","text":"String containing valid JSON"},{"tag":"param:sJSON","text":"Buffer to store the created JSON string."},{"tag":"param:maxlength","text":"Maximum length of string buffer."},{"tag":"param:iIndentWidth","text":"Indenting with iIndentWidth spaces.\nThe valid range for this is between 0 and 31 (inclusive),\nother values result in an undefined output. If this is set\nto 0, no newlines are inserted between array and object items."},{"tag":"param:bEnsureAscii","text":"If this is set, the output is guaranteed\nto consist only of ASCII characters. This is achieved\nby escaping all Unicode characters outside the ASCII range."},{"tag":"param:bSortKeys","text":"If this flag is used, all the objects in output are sorted\nby key. This is useful e.g. if two JSON texts are diffed\nor visually compared."},{"tag":"param:bPreserveOrder","text":"If this flag is used, object keys in the output are sorted\ninto the same order in which they were first inserted to\nthe object. For example, decoding a JSON text and then\nencoding with this flag preserves the order of object keys."},{"tag":"return","text":"Length of the returned string or -1 on error."}]},"kind":"native","returnType":"int","arguments":[{"type":"Handle","name":"hObject","decl":"Handle hObject","default":null},{"type":"char[]","name":"sJSON","decl":"char[] sJSON","default":null},{"type":"int","name":"maxlength","decl":"int maxlength","default":null},{"type":"int","name":"iIndentWidth","decl":"int iIndentWidth","default":"4"},{"type":"bool","name":"bEnsureAscii","decl":"bool bEnsureAscii","default":"false"},{"type":"bool","name":"bSortKeys","decl":"bool bSortKeys","default":"false"},{"type":"bool","name":"bPreserveOrder","decl":"bool bPreserveOrder","default":"false"}]},{"name":"json_dump_file","docStart":26385,"docEnd":27845,"docs":{"brief":"Write the JSON representation of hObject to the file sFilePath.\nIf sFilePath already exists, it is overwritten.","tags":[{"tag":"","text":"Write the JSON representation of hObject to the file sFilePath.\nIf sFilePath already exists, it is overwritten."},{"tag":"param:hObject","text":"String containing valid JSON"},{"tag":"param:sFilePath","text":"Buffer to store the created JSON string."},{"tag":"param:iIndentWidth","text":"Indenting with iIndentWidth spaces.\nThe valid range for this is between 0 and 31 (inclusive),\nother values result in an undefined output. If this is set\nto 0, no newlines are inserted between array and object items."},{"tag":"param:bEnsureAscii","text":"If this is set, the output is guaranteed\nto consist only of ASCII characters. This is achieved\nby escaping all Unicode characters outside the ASCII range."},{"tag":"param:bSortKeys","text":"If this flag is used, all the objects in output are sorted\nby key. This is useful e.g. if two JSON texts are diffed\nor visually compared."},{"tag":"param:bPreserveOrder","text":"If this flag is used, object keys in the output are sorted\ninto the same order in which they were first inserted to\nthe object. For example, decoding a JSON text and then\nencoding with this flag preserves the order of object keys."},{"tag":"return","text":"Length of the returned string or -1 on error."}]},"kind":"native","returnType":"bool","arguments":[{"type":"Handle","name":"hObject","decl":"Handle hObject","default":null},{"type":"const char[]","name":"sFilePath","decl":"const char[] sFilePath","default":null},{"type":"int","name":"iIndentWidth","decl":"int iIndentWidth","default":"4"},{"type":"bool","name":"bEnsureAscii","decl":"bool bEnsureAscii","default":"false"},{"type":"bool","name":"bSortKeys","decl":"bool bSortKeys","default":"false"},{"type":"bool","name":"bPreserveOrder","decl":"bool bPreserveOrder","default":"false"}]},{"name":"json_string_format","docStart":28140,"docEnd":28507,"docs":{"brief":"Returns a handle to a new JSON string, or INVALID_HANDLE on error.\nFormats the string according to the SourceMod format rules.\nThe result must be a valid UTF-8 encoded Unicode string.","tags":[{"tag":"","text":"Returns a handle to a new JSON string, or INVALID_HANDLE on error.\nFormats the string according to the SourceMod format rules.\nThe result must be a valid UTF-8 encoded Unicode string."},{"tag":"param:sFormat","text":"Formatting rules."},{"tag":"param:...","text":"Variable number of format parameters."},{"tag":"return","text":"Handle to the new String object"}]},"kind":"stock","returnType":"Handle","arguments":[{"type":"const char[]","name":"sFormat","decl":"const char[] sFormat","default":null},{"type":"any...","name":"","decl":"any... ","default":null}]},{"name":"json_string_format_ex","docStart":28664,"docEnd":29249,"docs":{"brief":"Returns a handle to a new JSON string, or INVALID_HANDLE on error.\nThis stock allows to specify the size of the temporary buffer used\nto create the string. Use this if the default of 4096 is not enough\nfor your string.\nFormats the string according to the SourceMod format rules.\nThe result must be a valid UTF-8 encoded Unicode string.","tags":[{"tag":"","text":"Returns a handle to a new JSON string, or INVALID_HANDLE on error.\nThis stock allows to specify the size of the temporary buffer used\nto create the string. Use this if the default of 4096 is not enough\nfor your string.\nFormats the string according to the SourceMod format rules.\nThe result must be a valid UTF-8 encoded Unicode string."},{"tag":"param:tmpBufferLength","text":"Size of the temporary buffer"},{"tag":"param:sFormat","text":"Formatting rules."},{"tag":"param:...","text":"Variable number of format parameters."},{"tag":"return","text":"Handle to the new String object"}]},"kind":"stock","returnType":"Handle","arguments":[{"type":"int","name":"tmpBufferLength","decl":"int tmpBufferLength","default":null},{"type":"const char[]","name":"sFormat","decl":"const char[] sFormat","default":null},{"type":"any...","name":"","decl":"any... ","default":null}]},{"name":"json_array_get_bool","docStart":29442,"docEnd":29753,"docs":{"brief":"Returns the boolean value of the element in hArray at position iIndex.","tags":[{"tag":"","text":"Returns the boolean value of the element in hArray at position iIndex."},{"tag":"param:hArray","text":"Handle to JSON array to get a value from"},{"tag":"param:iIndex","text":"Position to retrieve"},{"tag":"return","text":"True if it's a boolean and TRUE,\nfalse otherwise."}]},"kind":"stock","returnType":"bool","arguments":[{"type":"Handle","name":"hArray","decl":"Handle hArray","default":null},{"type":"int","name":"iIndex","decl":"int iIndex","default":null}]},{"name":"json_array_get_float","docStart":29962,"docEnd":30272,"docs":{"brief":"Returns the float value of the element in hArray at position iIndex.","tags":[{"tag":"","text":"Returns the float value of the element in hArray at position iIndex."},{"tag":"param:hArray","text":"Handle to JSON array to get a value from"},{"tag":"param:iIndex","text":"Position to retrieve"},{"tag":"return","text":"Float value,\nor 0.0 if element is not a JSON Real."}]},"kind":"stock","returnType":"float","arguments":[{"type":"Handle","name":"hArray","decl":"Handle hArray","default":null},{"type":"int","name":"iIndex","decl":"int iIndex","default":null}]},{"name":"json_array_get_int","docStart":30507,"docEnd":30822,"docs":{"brief":"Returns the integer value of the element in hArray at position iIndex.","tags":[{"tag":"","text":"Returns the integer value of the element in hArray at position iIndex."},{"tag":"param:hArray","text":"Handle to JSON array to get a value from"},{"tag":"param:iIndex","text":"Position to retrieve"},{"tag":"return","text":"Integer value,\nor 0 if element is not a JSON Integer."}]},"kind":"stock","returnType":"int","arguments":[{"type":"Handle","name":"hArray","decl":"Handle hArray","default":null},{"type":"int","name":"iIndex","decl":"int iIndex","default":null}]},{"name":"json_array_get_string","docStart":31051,"docEnd":31585,"docs":{"brief":"Saves the associated value of the element in hArray at position iIndex\nas a null terminated UTF-8 encoded string in the passed buffer.","tags":[{"tag":"","text":"Saves the associated value of the element in hArray at position iIndex\nas a null terminated UTF-8 encoded string in the passed buffer."},{"tag":"param:hArray","text":"Handle to JSON array to get a value from"},{"tag":"param:iIndex","text":"Position to retrieve"},{"tag":"param:sBuffer","text":"Buffer to store the value of the String."},{"tag":"param:maxlength","text":"Maximum length of string buffer."},{"tag":"error","text":"Element is not a JSON String."},{"tag":"return","text":"Length of the returned string or -1 on error."}]},"kind":"stock","returnType":"int","arguments":[{"type":"Handle","name":"hArray","decl":"Handle hArray","default":null},{"type":"int","name":"iIndex","decl":"int iIndex","default":null},{"type":"char[]","name":"sBuffer","decl":"char[] sBuffer","default":null},{"type":"int","name":"maxlength","decl":"int maxlength","default":null}]},{"name":"json_object_get_bool","docStart":31884,"docEnd":32186,"docs":{"brief":"Returns the boolean value of the element in hObj at entry sKey.","tags":[{"tag":"","text":"Returns the boolean value of the element in hObj at entry sKey."},{"tag":"param:hObj","text":"Handle to JSON object to get a value from"},{"tag":"param:sKey","text":"Entry to retrieve"},{"tag":"return","text":"True if it's a boolean and TRUE,\nfalse otherwise."}]},"kind":"stock","returnType":"bool","arguments":[{"type":"Handle","name":"hObj","decl":"Handle hObj","default":null},{"type":"const char[]","name":"sKey","decl":"const char[] sKey","default":null}]},{"name":"json_object_get_float","docStart":32381,"docEnd":32685,"docs":{"brief":"Returns the float value of the element in hObj at entry sKey.","tags":[{"tag":"","text":"Returns the float value of the element in hObj at entry sKey."},{"tag":"param:hObj","text":"Handle to JSON object to get a value from"},{"tag":"param:sKey","text":"Position to retrieve"},{"tag":"return","text":"Float value,\nor 0.0 if element is not a JSON Real."}]},"kind":"stock","returnType":"float","arguments":[{"type":"Handle","name":"hObj","decl":"Handle hObj","default":null},{"type":"const char[]","name":"sKey","decl":"const char[] sKey","default":null}]},{"name":"json_object_get_int","docStart":32923,"docEnd":33232,"docs":{"brief":"Returns the integer value of the element in hObj at entry sKey.","tags":[{"tag":"","text":"Returns the integer value of the element in hObj at entry sKey."},{"tag":"param:hObj","text":"Handle to JSON object to get a value from"},{"tag":"param:sKey","text":"Position to retrieve"},{"tag":"return","text":"Integer value,\nor 0 if element is not a JSON Integer."}]},"kind":"stock","returnType":"int","arguments":[{"type":"Handle","name":"hObj","decl":"Handle hObj","default":null},{"type":"const char[]","name":"sKey","decl":"const char[] sKey","default":null}]},{"name":"json_object_get_string","docStart":33464,"docEnd":33989,"docs":{"brief":"Saves the associated value of the element in hObj at entry sKey\nas a null terminated UTF-8 encoded string in the passed buffer.","tags":[{"tag":"","text":"Saves the associated value of the element in hObj at entry sKey\nas a null terminated UTF-8 encoded string in the passed buffer."},{"tag":"param:hObj","text":"Handle to JSON object to get a value from"},{"tag":"param:sKey","text":"Entry to retrieve"},{"tag":"param:sBuffer","text":"Buffer to store the value of the String."},{"tag":"param:maxlength","text":"Maximum length of string buffer."},{"tag":"error","text":"Element is not a JSON String."},{"tag":"return","text":"Length of the returned string or -1 on error."}]},"kind":"stock","returnType":"int","arguments":[{"type":"Handle","name":"hObj","decl":"Handle hObj","default":null},{"type":"const char[]","name":"sKey","decl":"const char[] sKey","default":null},{"type":"char[]","name":"sBuffer","decl":"char[] sBuffer","default":null},{"type":"int","name":"maxlength","decl":"int maxlength","default":null}]},{"name":"json_pack","docStart":35227,"docEnd":35880,"docs":{"brief":"This method can be used to create json objects/arrays directly\nwithout having to create the structure.\nSee 'Pack String Rules' for more details.","tags":[{"tag":"","text":"This method can be used to create json objects/arrays directly\nwithout having to create the structure.\nSee 'Pack String Rules' for more details."},{"tag":"param:sPackString","text":"Pack string similiar to Format()s fmt.\nSee 'Pack String Rules'."},{"tag":"param:hParams","text":"ADT Array containing all keys and values\nin the order they appear in the pack string."},{"tag":"error","text":"Invalid pack string or pack string and\nADT Array don't match up regarding type\nor size."},{"tag":"return","text":"Handle to JSON element."}]},"kind":"stock","returnType":"Handle","arguments":[{"type":"const char[]","name":"sPackString","decl":"const char[] sPackString","default":null},{"type":"ArrayList","name":"hParams","decl":"ArrayList hParams","default":null}]},{"name":"json_pack_array_","docStart":36029,"docEnd":36102,"docs":{"brief":"Internal stocks used by json_pack(). Don't use these directly!","tags":[{"tag":"","text":"Internal stocks used by json_pack(). Don't use these directly!"}]},"kind":"stock","returnType":"Handle","arguments":[{"type":"const char[]","name":"sFormat","decl":"const char[] sFormat","default":null},{"type":"int&","name":"iPos","decl":"int& iPos","default":null},{"type":"ArrayList","name":"hParams","decl":"ArrayList hParams","default":null}]},{"name":"json_pack_object_","docStart":0,"docEnd":0,"docs":null,"kind":"stock","returnType":"Handle","arguments":[{"type":"const char[]","name":"sFormat","decl":"const char[] sFormat","default":null},{"type":"int&","name":"iPos","decl":"int& iPos","default":null},{"type":"ArrayList","name":"hParams","decl":"ArrayList hParams","default":null}]},{"name":"json_pack_element_","docStart":0,"docEnd":0,"docs":null,"kind":"stock","returnType":"Handle","arguments":[{"type":"const char[]","name":"sFormat","decl":"const char[] sFormat","default":null},{"type":"int&","name":"iPos","decl":"int& iPos","default":null},{"type":"ArrayList","name":"hParams","decl":"ArrayList hParams","default":null}]},{"name":"__ext_smjansson_SetNTVOptional","docStart":0,"docEnd":0,"docs":null,"kind":"public","returnType":"void","arguments":[]}],"methodmaps":[],"enumstructs":[],"constants":[],"enums":[{"name":"json_type","docStart":78,"docEnd":542,"docs":{"brief":"--- Type\n\nThe JSON specification (RFC 4627) defines the following data types:\nobject, array, string, number, boolean, and null.\nJSON types are used dynamically; arrays and objects can hold any\nother data type, including themselves. For this reason, Jansson�s\ntype system is also dynamic in nature. There�s one Handle type to\nrepresent all JSON values, and the referenced structure knows the\ntype of the JSON value it holds.","tags":[{"tag":"","text":"--- Type\n\nThe JSON specification (RFC 4627) defines the following data types:\nobject, array, string, number, boolean, and null.\nJSON types are used dynamically; arrays and objects can hold any\nother data type, including themselves. For this reason, Jansson�s\ntype system is also dynamic in nature. There�s one Handle type to\nrepresent all JSON values, and the referenced structure knows the\ntype of the JSON value it holds."}]},"entries":[{"name":"JSON_OBJECT","docStart":0,"docEnd":0,"docs":null,"value":null},{"name":"JSON_ARRAY","docStart":0,"docEnd":0,"docs":null,"value":null},{"name":"JSON_STRING","docStart":0,"docEnd":0,"docs":null,"value":null},{"name":"JSON_INTEGER","docStart":0,"docEnd":0,"docs":null,"value":null},{"name":"JSON_REAL","docStart":0,"docEnd":0,"docs":null,"value":null},{"name":"JSON_TRUE","docStart":0,"docEnd":0,"docs":null,"value":null},{"name":"JSON_FALSE","docStart":0,"docEnd":0,"docs":null,"value":null},{"name":"JSON_NULL","docStart":0,"docEnd":0,"docs":null,"value":null}]}],"typesets":[],"typedefs":[]}