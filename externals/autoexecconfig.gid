{"functions":[{"name":"AutoExecConfig_GetFindResult","docStart":2214,"docEnd":2347,"docs":{"brief":"Returns the last result from the parser.","tags":[{"tag":"","text":"Returns the last result from the parser."},{"tag":"return","text":"Returns one of the AUTOEXEC_FIND values or -1 if not set."}]},"kind":"stock","returnType":"int","arguments":[]},{"name":"AutoExecConfig_GetAppendResult","docStart":2438,"docEnd":2575,"docs":{"brief":"Returns the last result from the appender.","tags":[{"tag":"","text":"Returns the last result from the appender."},{"tag":"return","text":"Returns one of the AUTOEXEC_APPEND values or -1 if not set."}]},"kind":"stock","returnType":"int","arguments":[]},{"name":"AutoExecConfig_SetCreateFile","docStart":2664,"docEnd":2874,"docs":{"brief":"Set if the config file should be created by the autoexecconfig include itself if it doesn't exist.","tags":[{"tag":"","text":"Set if the config file should be created by the autoexecconfig include itself if it doesn't exist."},{"tag":"param:create","text":"True if config file should be created, false otherwise."}]},"kind":"stock","returnType":"void","arguments":[{"type":"bool","name":"create","decl":"bool create"}]},{"name":"AutoExecConfig_SetCreateDirectory","docStart":2969,"docEnd":3365,"docs":{"brief":"Set if the config file's folder should be created by the autoexecconfig include itself if it doesn't exist.\nNote: Must be used before AutoExecConfig_SetFile as the potential creation of it happens there","tags":[{"tag":"","text":"Set if the config file's folder should be created by the autoexecconfig include itself if it doesn't exist.\nNote: Must be used before AutoExecConfig_SetFile as the potential creation of it happens there"},{"tag":"param:create","text":"True if config file should be created, false otherwise."},{"tag":"param:mode","text":"Folder permission mode, default is u=rwx,g=rx,o=rx."}]},"kind":"stock","returnType":"void","arguments":[{"type":"bool","name":"create","decl":"bool create"},{"type":"int","name":"mode","decl":"int mode"}]},{"name":"AutoExecConfig_GetCreateFile","docStart":3608,"docEnd":3787,"docs":{"brief":"Returns if the config file should be created if it doesn't exist.","tags":[{"tag":"","text":"Returns if the config file should be created if it doesn't exist."},{"tag":"return","text":"Returns true, if the config file should be created or false if it should not."}]},"kind":"stock","returnType":"bool","arguments":[]},{"name":"AutoExecConfig_SetPlugin","docStart":3869,"docEnd":4177,"docs":{"brief":"Set the plugin for which the config file should be created.\nSet to null to use the calling plugin.\nUsed to print the correct filename in the top comment when creating the file.","tags":[{"tag":"","text":"Set the plugin for which the config file should be created.\nSet to null to use the calling plugin.\nUsed to print the correct filename in the top comment when creating the file."},{"tag":"param:plugin","text":"The plugin to create convars for or null to use the calling plugin."}]},"kind":"stock","returnType":"void","arguments":[{"type":"Handle","name":"plugin","decl":"Handle plugin"}]},{"name":"AutoExecConfig_GetPlugin","docStart":4272,"docEnd":4391,"docs":{"brief":"Returns the plugin's handle for which the config file is created.","tags":[{"tag":"","text":"Returns the plugin's handle for which the config file is created."},{"tag":"return","text":"The plugin handle"}]},"kind":"stock","returnType":"Handle","arguments":[]},{"name":"AutoExecConfig_SetFile","docStart":4473,"docEnd":4874,"docs":{"brief":"Set the global autoconfigfile used by functions of this file.\nNote: does not support subfolders like folder1/folder2","tags":[{"tag":"","text":"Set the global autoconfigfile used by functions of this file.\nNote: does not support subfolders like folder1/folder2"},{"tag":"param:file","text":"Name of the config file, path and .cfg extension is being added if not given."},{"tag":"param:folder","text":"Folder under cfg/ to use.  By default this is \"sourcemod.\""},{"tag":"return","text":"True if formatter returned success, false otherwise."}]},"kind":"stock","returnType":"bool","arguments":[{"type":"char[]","name":"file","decl":"char[] file"},{"type":"char[]","name":"folder","decl":"char[] folder"}]},{"name":"AutoExecConfig_GetFile","docStart":5355,"docEnd":5594,"docs":{"brief":"Get the formatted autoconfigfile used by functions of this file.","tags":[{"tag":"","text":"Get the formatted autoconfigfile used by functions of this file."},{"tag":"param:buffer","text":"String to format."},{"tag":"param:size","text":"Maximum size of buffer"},{"tag":"return","text":"True if filename was set, false otherwise."}]},"kind":"stock","returnType":"bool","arguments":[{"type":"char[]","name":"buffer","decl":"char[] buffer"},{"type":"int","name":"size","decl":"int size"}]},{"name":"AutoExecConfig_CreateConVar","docStart":5888,"docEnd":6997,"docs":{"brief":"Creates a convar and appends it to the autoconfigfile if not found.\nFCVAR_DONTRECORD will be skipped.","tags":[{"tag":"","text":"Creates a convar and appends it to the autoconfigfile if not found.\nFCVAR_DONTRECORD will be skipped."},{"tag":"param:name","text":"Name of new convar."},{"tag":"param:defaultValue","text":"String containing the default value of new convar."},{"tag":"param:description","text":"Optional description of the convar."},{"tag":"param:flags","text":"Optional bitstring of flags determining how the convar should be handled. See FCVAR_* constants for more details."},{"tag":"param:hasMin","text":"Optional boolean that determines if the convar has a minimum value."},{"tag":"param:min","text":"Minimum floating point value that the convar can have if hasMin is true."},{"tag":"param:hasMax","text":"Optional boolean that determines if the convar has a maximum value."},{"tag":"param:max","text":"Maximum floating point value that the convar can have if hasMax is true."},{"tag":"return","text":"A handle to the newly created convar. If the convar already exists, a handle to it will still be returned."},{"tag":"error","text":"Convar name is blank or is the same as an existing console command."}]},"kind":"stock","returnType":"ConVar","arguments":[{"type":"const char[]","name":"name","decl":"const char[] name"},{"type":"const char[]","name":"defaultValue","decl":"const char[] defaultValue"},{"type":"const char[]","name":"description","decl":"const char[] description"},{"type":"int","name":"flags","decl":"int flags"},{"type":"bool","name":"hasMin","decl":"bool hasMin"},{"type":"float","name":"min","decl":"float min"},{"type":"bool","name":"hasMax","decl":"bool hasMax"},{"type":"float","name":"max","decl":"float max"}]},{"name":"AutoExecConfig_ExecuteFile","docStart":8170,"docEnd":8338,"docs":{"brief":"Executes the autoconfigfile and adds it to the OnConfigsExecuted forward.\nIf we didn't create it ourselves we let SourceMod create it.","tags":[{"tag":"","text":"Executes the autoconfigfile and adds it to the OnConfigsExecuted forward.\nIf we didn't create it ourselves we let SourceMod create it."}]},"kind":"stock","returnType":"void","arguments":[]},{"name":"AutoExecConfig_FormatFileName","docStart":8540,"docEnd":8792,"docs":{"brief":"Formats a autoconfigfile, prefixes path and adds .cfg extension if missing.","tags":[{"tag":"","text":"Formats a autoconfigfile, prefixes path and adds .cfg extension if missing."},{"tag":"param:buffer","text":"String to format."},{"tag":"param:size","text":"Maximum size of buffer."},{"tag":"return","text":"Returns one of the AUTOEXEC_FORMAT values.."}]},"kind":"stock","returnType":"int","arguments":[{"type":"char[]","name":"buffer","decl":"char[] buffer"},{"type":"int","name":"size","decl":"int size"},{"type":"char[]","name":"folder","decl":"char[] folder"}]},{"name":"AutoExecConfig_AppendValue","docStart":10294,"docEnd":11179,"docs":{"brief":"Appends a convar to the global autoconfigfile","tags":[{"tag":"","text":"Appends a convar to the global autoconfigfile"},{"tag":"param:name","text":"Name of new convar."},{"tag":"param:defaultValue","text":"String containing the default value of new convar."},{"tag":"param:description","text":"Optional description of the convar."},{"tag":"param:flags","text":"Optional bitstring of flags determining how the convar should be handled. See FCVAR_* constants for more details."},{"tag":"param:hasMin","text":"Optional boolean that determines if the convar has a minimum value."},{"tag":"param:min","text":"Minimum floating point value that the convar can have if hasMin is true."},{"tag":"param:hasMax","text":"Optional boolean that determines if the convar has a maximum value."},{"tag":"param:max","text":"Maximum floating point value that the convar can have if hasMax is true."},{"tag":"return","text":"Returns one of the AUTOEXEC_APPEND values"}]},"kind":"stock","returnType":"int","arguments":[{"type":"const char[]","name":"name","decl":"const char[] name"},{"type":"const char[]","name":"defaultValue","decl":"const char[] defaultValue"},{"type":"const char[]","name":"description","decl":"const char[] description"},{"type":"int","name":"flags","decl":"int flags"},{"type":"bool","name":"hasMin","decl":"bool hasMin"},{"type":"float","name":"min","decl":"float min"},{"type":"bool","name":"hasMax","decl":"bool hasMax"},{"type":"float","name":"max","decl":"float max"}]},{"name":"AutoExecConfig_FindValue","docStart":14557,"docEnd":14953,"docs":{"brief":"Returns a convar's value from the global autoconfigfile","tags":[{"tag":"","text":"Returns a convar's value from the global autoconfigfile"},{"tag":"param:cvar","text":"Cvar to search for."},{"tag":"param:value","text":"Buffer to store result into."},{"tag":"param:size","text":"Maximum size of buffer."},{"tag":"param:caseSensitive","text":"Whether or not the search should be case sensitive."},{"tag":"return","text":"Returns one of the AUTOEXEC_FIND values"}]},"kind":"stock","returnType":"int","arguments":[{"type":"const char[]","name":"cvar","decl":"const char[] cvar"},{"type":"char[]","name":"value","decl":"char[] value"},{"type":"int","name":"size","decl":"int size"},{"type":"bool","name":"caseSensitive","decl":"bool caseSensitive"}]},{"name":"AutoExecConfig_CleanFile","docStart":18752,"docEnd":18874,"docs":{"brief":"Cleans the global autoconfigfile from too much spaces","tags":[{"tag":"","text":"Cleans the global autoconfigfile from too much spaces"},{"tag":"return","text":"One of the AUTOEXEC_CLEAN values."}]},"kind":"stock","returnType":"int","arguments":[]},{"name":"GetCharCountInStr","docStart":20982,"docEnd":21179,"docs":{"brief":"Returns how many times the given char occures in the given string.","tags":[{"tag":"","text":"Returns how many times the given char occures in the given string."},{"tag":"param:str","text":"String to search for in."},{"tag":"return","text":"Occurences of the given char found in string."}]},"kind":"stock","returnType":"int","arguments":[{"type":"int","name":"character","decl":"int character"},{"type":"const char[]","name":"str","decl":"const char[] str"}]},{"name":"AutoExecConfig_CacheConvars","docStart":0,"docEnd":0,"docs":null,"kind":"stock","returnType":"bool","arguments":[]}],"methodmaps":[],"constants":[],"enums":[],"typesets":[],"typedefs":[]}