{"functions":[{"name":"DHookAddEntityListener","docStart":4804,"docEnd":4940,"docs":{"brief":"Adds an entity listener hook","tags":[{"tag":"","text":"Adds an entity listener hook"},{"tag":"param:type","text":"Type of listener to add"},{"tag":"param:callback","text":"Callback to use"}]},"kind":"native","returnType":"void","arguments":[{"type":"ListenType","name":"type","decl":"ListenType type","default":null},{"type":"ListenCB","name":"callback","decl":"ListenCB callback","default":null}]},{"name":"DHookRemoveEntityListener","docStart":5017,"docEnd":5215,"docs":{"brief":"Removes an entity listener hook","tags":[{"tag":"","text":"Removes an entity listener hook"},{"tag":"param:type","text":"Type of listener to remove"},{"tag":"param:callback","text":"Callback this listener was using"},{"tag":"return","text":"True if one was removed false otherwise."}]},"kind":"native","returnType":"bool","arguments":[{"type":"ListenType","name":"type","decl":"ListenType type","default":null},{"type":"ListenCB","name":"callback","decl":"ListenCB callback","default":null}]},{"name":"DHookCreate","docStart":5295,"docEnd":5756,"docs":{"brief":"Creates a hook","tags":[{"tag":"","text":"Creates a hook"},{"tag":"param:offset","text":"vtable offset for function to hook"},{"tag":"param:hooktype","text":"Type of hook"},{"tag":"param:returntype","text":"Type type of return"},{"tag":"param:thistype","text":"Type of this pointer or ignore (ignore can be used if not needed)"},{"tag":"param:callback","text":"Optional callback function, if not set here must be set when hooking."},{"tag":"return","text":"Returns setup handle for the hook."},{"tag":"error","text":"Failed to create hook setup handle or invalid callback function."}]},"kind":"native","returnType":"Handle","arguments":[{"type":"int","name":"offset","decl":"int offset","default":null},{"type":"HookType","name":"hooktype","decl":"HookType hooktype","default":null},{"type":"ReturnType","name":"returntype","decl":"ReturnType returntype","default":null},{"type":"ThisPointerType","name":"thistype","decl":"ThisPointerType thistype","default":null},{"type":"DHookCallback","name":"callback","decl":"DHookCallback callback","default":"INVALID_FUNCTION"}]},{"name":"DHookCreateDetour","docStart":5909,"docEnd":6393,"docs":{"brief":"Creates a detour","tags":[{"tag":"","text":"Creates a detour"},{"tag":"param:funcaddr","text":"The address of the function to detour.\nCan be Address_Null if you want to load the address from gamedata using DHookSetFromConf."},{"tag":"param:callConv","text":"Calling convention of the function."},{"tag":"param:returnType","text":"Type of the return value."},{"tag":"param:thisType","text":"Type of this pointer or ignore (ignore can be used if not needed)"},{"tag":"return","text":"Setup handle for the detour."},{"tag":"error","text":"Failed to create detour setup handle."}]},"kind":"native","returnType":"Handle","arguments":[{"type":"Address","name":"funcaddr","decl":"Address funcaddr","default":null},{"type":"CallingConvention","name":"callConv","decl":"CallingConvention callConv","default":null},{"type":"ReturnType","name":"returntype","decl":"ReturnType returntype","default":null},{"type":"ThisPointerType","name":"thisType","decl":"ThisPointerType thisType","default":null}]},{"name":"DHookCreateFromConf","docStart":6527,"docEnd":6985,"docs":{"brief":"Setup a detour or hook for a function as described in a \"Functions\" section in gamedata.","tags":[{"tag":"","text":"Setup a detour or hook for a function as described in a \"Functions\" section in gamedata."},{"tag":"param:gameconf","text":"GameConfig handle"},{"tag":"param:name","text":"Name of the function in the gamedata to load."},{"tag":"return","text":"Setup handle for the detour or INVALID_HANDLE if offset/signature/address wasn't found."},{"tag":"error","text":"Failed to create detour setup handle, invalid gamedata handle, invalid callback function or failed to find function in gamedata."}]},"kind":"native","returnType":"Handle","arguments":[{"type":"Handle","name":"gameconf","decl":"Handle gameconf","default":null},{"type":"const char[]","name":"name","decl":"const char[] name","default":null}]},{"name":"DHookSetFromConf","docStart":7061,"docEnd":7464,"docs":{"brief":"Load details for a vhook or detour from a gamedata file.","tags":[{"tag":"","text":"Load details for a vhook or detour from a gamedata file."},{"tag":"param:setup","text":"Hook setup handle to set the offset or address on."},{"tag":"param:gameconf","text":"GameConfig handle"},{"tag":"param:source","text":"Whether to look in Offsets or Signatures."},{"tag":"param:name","text":"Name of the property to find."},{"tag":"return","text":"True on success, false if nothing was found."},{"tag":"error","text":"Invalid setup or gamedata handle."}]},"kind":"native","returnType":"bool","arguments":[{"type":"Handle","name":"setup","decl":"Handle setup","default":null},{"type":"Handle","name":"gameconf","decl":"Handle gameconf","default":null},{"type":"SDKFuncConfSource","name":"source","decl":"SDKFuncConfSource source","default":null},{"type":"const char[]","name":"name","decl":"const char[] name","default":null}]},{"name":"DHookEnableDetour","docStart":7575,"docEnd":8055,"docs":{"brief":"Enable the detour of the function described in the hook setup handle.","tags":[{"tag":"","text":"Enable the detour of the function described in the hook setup handle."},{"tag":"param:setup","text":"Hook setup handle"},{"tag":"param:post","text":"True to make the hook a post hook. (If you need to change the retunr value or need the return value use a post hook! If you need to change params and return use a pre and post hook!)"},{"tag":"param:callback","text":"Callback function"},{"tag":"return","text":"True if detour was enabled, false otherwise."},{"tag":"error","text":"Hook handle is not setup for a detour."}]},"kind":"native","returnType":"bool","arguments":[{"type":"Handle","name":"setup","decl":"Handle setup","default":null},{"type":"bool","name":"post","decl":"bool post","default":null},{"type":"DHookCallback","name":"callback","decl":"DHookCallback callback","default":null}]},{"name":"DHookDisableDetour","docStart":8140,"docEnd":8496,"docs":{"brief":"Disable the detour of the function described in the hook setup handle.","tags":[{"tag":"","text":"Disable the detour of the function described in the hook setup handle."},{"tag":"param:setup","text":"Hook setup handle"},{"tag":"param:post","text":"True to disable a post hook."},{"tag":"param:callback","text":"Callback function"},{"tag":"return","text":"True if detour was disabled, false otherwise."},{"tag":"error","text":"Hook handle is not setup for a detour or function is not detoured."}]},"kind":"native","returnType":"bool","arguments":[{"type":"Handle","name":"setup","decl":"Handle setup","default":null},{"type":"bool","name":"post","decl":"bool post","default":null},{"type":"DHookCallback","name":"callback","decl":"DHookCallback callback","default":null}]},{"name":"DHookAddParam","docStart":8582,"docEnd":9039,"docs":{"brief":"Adds param to a hook setup","tags":[{"tag":"","text":"Adds param to a hook setup"},{"tag":"param:setup","text":"Setup handle to add the param to."},{"tag":"param:type","text":"Param type"},{"tag":"param:size","text":"Used for Objects (not Object ptr) to define the size of the object."},{"tag":"param:flag","text":"Used to change the pass type."},{"tag":"param:custom_register","text":"The register this argument is passed in instead of the stack."},{"tag":"error","text":"Invalid setup handle or too many params added (request upping the max in thread)"}]},"kind":"native","returnType":"void","arguments":[{"type":"Handle","name":"setup","decl":"Handle setup","default":null},{"type":"HookParamType","name":"type","decl":"HookParamType type","default":null},{"type":"int","name":"size","decl":"int size","default":"-1"},{"type":"DHookPassFlag","name":"flag","decl":"DHookPassFlag flag","default":"DHookPass_ByVal"},{"type":"DHookRegister","name":"custom_register","decl":"DHookRegister custom_register","default":"DHookRegister_Default"}]},{"name":"DHookEntity","docStart":9207,"docEnd":9908,"docs":{"brief":"Hook entity","tags":[{"tag":"","text":"Hook entity"},{"tag":"param:setup","text":"Setup handle to use to add the hook."},{"tag":"param:post","text":"True to make the hook a post hook. (If you need to change the return value or need the return value use a post hook! If you need to change params and return use a pre and post hook!)"},{"tag":"param:entity","text":"Entity index to hook on."},{"tag":"param:removalcb","text":"Callback for when the hook is removed (Entity hooks are auto-removed on entity destroyed and will call this callback)"},{"tag":"param:callback","text":"Optional callback function, if not set here must be set when creating the hook."},{"tag":"error","text":"Invalid setup handle, invalid entity, invalid hook type or invalid callback."},{"tag":"return","text":"-1 on fail a hookid on success"}]},"kind":"native","returnType":"int","arguments":[{"type":"Handle","name":"setup","decl":"Handle setup","default":null},{"type":"bool","name":"post","decl":"bool post","default":null},{"type":"int","name":"entity","decl":"int entity","default":null},{"type":"DHookRemovalCB","name":"removalcb","decl":"DHookRemovalCB removalcb","default":"INVALID_FUNCTION"},{"type":"DHookCallback","name":"callback","decl":"DHookCallback callback","default":"INVALID_FUNCTION"}]},{"name":"DHookGamerules","docStart":10058,"docEnd":10731,"docs":{"brief":"Hook gamerules","tags":[{"tag":"","text":"Hook gamerules"},{"tag":"param:setup","text":"Setup handle to use to add the hook."},{"tag":"param:post","text":"True to make the hook a post hook. (If you need to change the return value or need the return value use a post hook! If you need to change params and return use a pre and post hook!)"},{"tag":"param:removalcb","text":"Callback for when the hook is removed (Game rules hooks are auto-removed on map end and will call this callback)"},{"tag":"param:callback","text":"Optional callback function, if not set here must be set when creating the hook."},{"tag":"error","text":"Invalid setup handle, failing to get gamerules pointer, invalid hook type or invalid callback."},{"tag":"return","text":"-1 on fail a hookid on success"}]},"kind":"native","returnType":"int","arguments":[{"type":"Handle","name":"setup","decl":"Handle setup","default":null},{"type":"bool","name":"post","decl":"bool post","default":null},{"type":"DHookRemovalCB","name":"removalcb","decl":"DHookRemovalCB removalcb","default":"INVALID_FUNCTION"},{"type":"DHookCallback","name":"callback","decl":"DHookCallback callback","default":"INVALID_FUNCTION"}]},{"name":"DHookRaw","docStart":10872,"docEnd":11577,"docs":{"brief":"Hook a raw pointer","tags":[{"tag":"","text":"Hook a raw pointer"},{"tag":"param:setup","text":"Setup handle to use to add the hook."},{"tag":"param:post","text":"True to make the hook a post hook. (If you need to change the return value or need the return value use a post hook! If you need to change params and return use a pre and post hook!)"},{"tag":"param:addr","text":"This pointer address."},{"tag":"param:removalcb","text":"Callback for when the hook is removed (Entity hooks are auto-removed on entity destroyed and will call this callback)"},{"tag":"param:callback","text":"Optional callback function, if not set here must be set when creating the hook."},{"tag":"error","text":"Invalid setup handle, invalid address, invalid hook type or invalid callback."},{"tag":"return","text":"-1 on fail a hookid on success"}]},"kind":"native","returnType":"int","arguments":[{"type":"Handle","name":"setup","decl":"Handle setup","default":null},{"type":"bool","name":"post","decl":"bool post","default":null},{"type":"Address","name":"addr","decl":"Address addr","default":null},{"type":"DHookRemovalCB","name":"removalcb","decl":"DHookRemovalCB removalcb","default":"INVALID_FUNCTION"},{"type":"DHookCallback","name":"callback","decl":"DHookCallback callback","default":"INVALID_FUNCTION"}]},{"name":"DHookRemoveHookID","docStart":11726,"docEnd":11897,"docs":{"brief":"Remove hook by hook id","tags":[{"tag":"","text":"Remove hook by hook id"},{"tag":"param:hookid","text":"Hook id to remove"},{"tag":"return","text":"true on success false otherwise"},{"tag":"note","text":"This will not fire the removal callback!"}]},"kind":"native","returnType":"bool","arguments":[{"type":"int","name":"hookid","decl":"int hookid","default":null}]},{"name":"DHookGetParam","docStart":11945,"docEnd":12391,"docs":{"brief":"Get param value (Only use for: int, entity, bool or float param types)","tags":[{"tag":"","text":"Get param value (Only use for: int, entity, bool or float param types)"},{"tag":"param:hParams","text":"Handle to params structure"},{"tag":"param:num","text":"Param number to get. (Example if the function has 2 params and you need the value of the first param num would be 1. 0 Will return the number of params stored)"},{"tag":"error","text":"Invalid handle. Invalid param number. Invalid param type."},{"tag":"return","text":"value if num greater than 0. If 0 returns paramcount."}]},"kind":"native","returnType":"any","arguments":[{"type":"Handle","name":"hParams","decl":"Handle hParams","default":null},{"type":"int","name":"num","decl":"int num","default":null}]},{"name":"DHookGetParamVector","docStart":12447,"docEnd":12799,"docs":{"brief":"Get vector param value","tags":[{"tag":"","text":"Get vector param value"},{"tag":"param:hParams","text":"Handle to params structure"},{"tag":"param:num","text":"Param number to get. (Example if the function has 2 params and you need the value of the first param num would be 1.)"},{"tag":"param:vec","text":"Vector buffer to store result."},{"tag":"error","text":"Invalid handle. Invalid param number. Invalid param type."}]},"kind":"native","returnType":"void","arguments":[{"type":"Handle","name":"hParams","decl":"Handle hParams","default":null},{"type":"int","name":"num","decl":"int num","default":null},{"type":"float[3]","name":"vec","decl":"float vec[3]","default":null}]},{"name":"DHookGetParamString","docStart":12876,"docEnd":13259,"docs":{"brief":"Get string param value","tags":[{"tag":"","text":"Get string param value"},{"tag":"param:hParams","text":"Handle to params structure"},{"tag":"param:num","text":"Param number to get. (Example if the function has 2 params and you need the value of the first param num would be 1.)"},{"tag":"param:buffer","text":"String buffer to store result"},{"tag":"param:size","text":"Buffer size"},{"tag":"error","text":"Invalid handle. Invalid param number. Invalid param type."}]},"kind":"native","returnType":"void","arguments":[{"type":"Handle","name":"hParams","decl":"Handle hParams","default":null},{"type":"int","name":"num","decl":"int num","default":null},{"type":"char[]","name":"buffer","decl":"char[] buffer","default":null},{"type":"int","name":"size","decl":"int size","default":null}]},{"name":"DHookSetParam","docStart":13347,"docEnd":13789,"docs":{"brief":"Set param value (Only use for: int, entity, bool or float param types)","tags":[{"tag":"","text":"Set param value (Only use for: int, entity, bool or float param types)"},{"tag":"param:hParams","text":"Handle to params structure"},{"tag":"params","text":"num   Param number to set (Example if the function has 2 params and you need to set the value of the first param num would be 1.)"},{"tag":"param:value","text":"Value to set it as (only pass int, bool, float or entity index)"},{"tag":"error","text":"Invalid handle. Invalid param number. Invalid param type."}]},"kind":"native","returnType":"void","arguments":[{"type":"Handle","name":"hParams","decl":"Handle hParams","default":null},{"type":"int","name":"num","decl":"int num","default":null},{"type":"any","name":"value","decl":"any value","default":null}]},{"name":"DHookSetParamVector","docStart":13857,"docEnd":14209,"docs":{"brief":"Set vector param value","tags":[{"tag":"","text":"Set vector param value"},{"tag":"param:hParams","text":"Handle to params structure"},{"tag":"params","text":"num   Param number to set (Example if the function has 2 params and you need to set the value of the first param num would be 1.)"},{"tag":"param:vec","text":"Value to set vector as."},{"tag":"error","text":"Invalid handle. Invalid param number. Invalid param type."}]},"kind":"native","returnType":"void","arguments":[{"type":"Handle","name":"hParams","decl":"Handle hParams","default":null},{"type":"int","name":"num","decl":"int num","default":null},{"type":"float[3]","name":"vec","decl":"float vec[3]","default":null}]},{"name":"DHookSetParamString","docStart":14286,"docEnd":14640,"docs":{"brief":"Set string param value","tags":[{"tag":"","text":"Set string param value"},{"tag":"param:hParams","text":"Handle to params structure"},{"tag":"params","text":"num   Param number to set (Example if the function has 2 params and you need to set the value of the first param num would be 1.)"},{"tag":"param:value","text":"Value to set string as."},{"tag":"error","text":"Invalid handle. Invalid param number. Invalid param type."}]},"kind":"native","returnType":"void","arguments":[{"type":"Handle","name":"hParams","decl":"Handle hParams","default":null},{"type":"int","name":"num","decl":"int num","default":null},{"type":"char[]","name":"value","decl":"char[] value","default":null}]},{"name":"DHookGetReturn","docStart":14717,"docEnd":14974,"docs":{"brief":"Get return value (Only use for: int, entity, bool or float return types)","tags":[{"tag":"","text":"Get return value (Only use for: int, entity, bool or float return types)"},{"tag":"param:hReturn","text":"Handle to return structure"},{"tag":"error","text":"Invalid Handle, invalid type."},{"tag":"return","text":"Returns default value if prehook returns actual value if post hook."}]},"kind":"native","returnType":"any","arguments":[{"type":"Handle","name":"hReturn","decl":"Handle hReturn","default":null}]},{"name":"DHookGetReturnVector","docStart":15022,"docEnd":15266,"docs":{"brief":"Get return vector value","tags":[{"tag":"","text":"Get return vector value"},{"tag":"param:hReturn","text":"Handle to return structure"},{"tag":"param:vec","text":"Vector buffer to store result in. (In pre hooks will be default value (0.0,0.0,0.0))"},{"tag":"error","text":"Invalid Handle, invalid type."}]},"kind":"native","returnType":"void","arguments":[{"type":"Handle","name":"hReturn","decl":"Handle hReturn","default":null},{"type":"float[3]","name":"vec","decl":"float vec[3]","default":null}]},{"name":"DHookGetReturnString","docStart":15335,"docEnd":15607,"docs":{"brief":"Get return string value","tags":[{"tag":"","text":"Get return string value"},{"tag":"param:hReturn","text":"Handle to return structure"},{"tag":"param:buffer","text":"String buffer to store result in. (In pre hooks will be default value \"\")"},{"tag":"param:size","text":"String buffer size"},{"tag":"error","text":"Invalid Handle, invalid type."}]},"kind":"native","returnType":"void","arguments":[{"type":"Handle","name":"hReturn","decl":"Handle hReturn","default":null},{"type":"char[]","name":"buffer","decl":"char[] buffer","default":null},{"type":"int","name":"size","decl":"int size","default":null}]},{"name":"DHookSetReturn","docStart":15687,"docEnd":15920,"docs":{"brief":"Set return value (Only use for: int, entity, bool or float return types)","tags":[{"tag":"","text":"Set return value (Only use for: int, entity, bool or float return types)"},{"tag":"param:hReturn","text":"Handle to return structure"},{"tag":"param:value","text":"Value to set return as"},{"tag":"error","text":"Invalid Handle, invalid type."}]},"kind":"native","returnType":"void","arguments":[{"type":"Handle","name":"hReturn","decl":"Handle hReturn","default":null},{"type":"any","name":"value","decl":"any value","default":null}]},{"name":"DHookSetReturnVector","docStart":15980,"docEnd":16169,"docs":{"brief":"Set return vector value","tags":[{"tag":"","text":"Set return vector value"},{"tag":"param:hReturn","text":"Handle to return structure"},{"tag":"param:vec","text":"Value to set return vector as"},{"tag":"error","text":"Invalid Handle, invalid type."}]},"kind":"native","returnType":"void","arguments":[{"type":"Handle","name":"hReturn","decl":"Handle hReturn","default":null},{"type":"float[3]","name":"vec","decl":"float vec[3]","default":null}]},{"name":"DHookSetReturnString","docStart":16238,"docEnd":16429,"docs":{"brief":"Set return string value","tags":[{"tag":"","text":"Set return string value"},{"tag":"param:hReturn","text":"Handle to return structure"},{"tag":"param:value","text":"Value to set return string as"},{"tag":"error","text":"Invalid Handle, invalid type."}]},"kind":"native","returnType":"void","arguments":[{"type":"Handle","name":"hReturn","decl":"Handle hReturn","default":null},{"type":"char[]","name":"value","decl":"char[] value","default":null}]},{"name":"DHookGetParamObjectPtrVar","docStart":16589,"docEnd":16994,"docs":{"brief":"Gets an objects variable value","tags":[{"tag":"","text":"Gets an objects variable value"},{"tag":"param:hParams","text":"Handle to params structure"},{"tag":"param:num","text":"Param number to get."},{"tag":"param:offset","text":"Offset within the object to the var to get."},{"tag":"param:type","text":"Type of var it is"},{"tag":"error","text":"Invalid handle. Invalid param number. Invalid param type. Invalid Object type."},{"tag":"return","text":"Value of the objects var. If EHANDLE type or entity returns entity index."}]},"kind":"native","returnType":"any","arguments":[{"type":"Handle","name":"hParams","decl":"Handle hParams","default":null},{"type":"int","name":"num","decl":"int num","default":null},{"type":"int","name":"offset","decl":"int offset","default":null},{"type":"ObjectValueType","name":"type","decl":"ObjectValueType type","default":null}]},{"name":"DHookSetParamObjectPtrVar","docStart":17096,"docEnd":17477,"docs":{"brief":"Sets an objects variable value","tags":[{"tag":"","text":"Sets an objects variable value"},{"tag":"param:hParams","text":"Handle to params structure"},{"tag":"param:num","text":"Param number to set."},{"tag":"param:offset","text":"Offset within the object to the var to set."},{"tag":"param:type","text":"Type of var it is"},{"tag":"param:value","text":"The value to set the var to."},{"tag":"error","text":"Invalid handle. Invalid param number. Invalid param type. Invalid Object type."}]},"kind":"native","returnType":"void","arguments":[{"type":"Handle","name":"hParams","decl":"Handle hParams","default":null},{"type":"int","name":"num","decl":"int num","default":null},{"type":"int","name":"offset","decl":"int offset","default":null},{"type":"ObjectValueType","name":"type","decl":"ObjectValueType type","default":null},{"type":"any","name":"value","decl":"any value","default":null}]},{"name":"DHookGetParamObjectPtrVarVector","docStart":17591,"docEnd":17984,"docs":{"brief":"Gets an objects vector variable value","tags":[{"tag":"","text":"Gets an objects vector variable value"},{"tag":"param:hParams","text":"Handle to params structure"},{"tag":"param:num","text":"Param number to get."},{"tag":"param:offset","text":"Offset within the object to the var to get."},{"tag":"param:type","text":"Type of var it is"},{"tag":"param:buffer","text":"Buffer to store the result vector"},{"tag":"error","text":"Invalid handle. Invalid param number. Invalid param type. Invalid Object type."}]},"kind":"native","returnType":"void","arguments":[{"type":"Handle","name":"hParams","decl":"Handle hParams","default":null},{"type":"int","name":"num","decl":"int num","default":null},{"type":"int","name":"offset","decl":"int offset","default":null},{"type":"ObjectValueType","name":"type","decl":"ObjectValueType type","default":null},{"type":"float[3]","name":"buffer","decl":"float buffer[3]","default":null}]},{"name":"DHookSetParamObjectPtrVarVector","docStart":18110,"docEnd":18505,"docs":{"brief":"Sets an objects vector variable value","tags":[{"tag":"","text":"Sets an objects vector variable value"},{"tag":"param:hParams","text":"Handle to params structure"},{"tag":"param:num","text":"Param number to set."},{"tag":"param:offset","text":"Offset within the object to the var to set."},{"tag":"param:type","text":"Type of var it is"},{"tag":"param:value","text":"The value to set the vector var to."},{"tag":"error","text":"Invalid handle. Invalid param number. Invalid param type. Invalid Object type."}]},"kind":"native","returnType":"void","arguments":[{"type":"Handle","name":"hParams","decl":"Handle hParams","default":null},{"type":"int","name":"num","decl":"int num","default":null},{"type":"int","name":"offset","decl":"int offset","default":null},{"type":"ObjectValueType","name":"type","decl":"ObjectValueType type","default":null},{"type":"float[3]","name":"value","decl":"float value[3]","default":null}]},{"name":"DHookGetParamObjectPtrString","docStart":18630,"docEnd":19060,"docs":{"brief":"Gets an objects string variable value","tags":[{"tag":"","text":"Gets an objects string variable value"},{"tag":"param:hParams","text":"Handle to params structure"},{"tag":"param:num","text":"Param number to get."},{"tag":"param:offset","text":"Offset within the object to the var to get."},{"tag":"param:type","text":"Type of var it is"},{"tag":"param:buffer","text":"Buffer to store the result vector"},{"tag":"param:size","text":"Size of the buffer"},{"tag":"error","text":"Invalid handle. Invalid param number. Invalid param type. Invalid Object type."}]},"kind":"native","returnType":"void","arguments":[{"type":"Handle","name":"hParams","decl":"Handle hParams","default":null},{"type":"int","name":"num","decl":"int num","default":null},{"type":"int","name":"offset","decl":"int offset","default":null},{"type":"ObjectValueType","name":"type","decl":"ObjectValueType type","default":null},{"type":"char[]","name":"buffer","decl":"char[] buffer","default":null},{"type":"int","name":"size","decl":"int size","default":null}]},{"name":"DHookIsNullParam","docStart":19191,"docEnd":19397,"docs":{"brief":"Checks if a pointer param is null","tags":[{"tag":"","text":"Checks if a pointer param is null"},{"tag":"param:hParams","text":"Handle to params structure"},{"tag":"param:num","text":"Param number to check."},{"tag":"error","text":"Non pointer param"},{"tag":"return","text":"True if null false otherwise."}]},"kind":"native","returnType":"bool","arguments":[{"type":"Handle","name":"hParams","decl":"Handle hParams","default":null},{"type":"int","name":"num","decl":"int num","default":null}]},{"name":"__ext_dhooks_SetNTVOptional","docStart":0,"docEnd":0,"docs":null,"kind":"public","returnType":"void","arguments":[]}],"methodmaps":[],"enumstructs":[],"constants":[],"enums":[{"name":"ObjectValueType","docStart":0,"docEnd":0,"docs":null,"entries":[{"name":"ObjectValueType_Int","docStart":0,"docEnd":0,"docs":null,"value":"0"},{"name":"ObjectValueType_Bool","docStart":0,"docEnd":0,"docs":null,"value":null},{"name":"ObjectValueType_Ehandle","docStart":0,"docEnd":0,"docs":null,"value":null},{"name":"ObjectValueType_Float","docStart":0,"docEnd":0,"docs":null,"value":null},{"name":"ObjectValueType_CBaseEntityPtr","docStart":0,"docEnd":0,"docs":null,"value":null},{"name":"ObjectValueType_IntPtr","docStart":0,"docEnd":0,"docs":null,"value":null},{"name":"ObjectValueType_BoolPtr","docStart":0,"docEnd":0,"docs":null,"value":null},{"name":"ObjectValueType_EhandlePtr","docStart":0,"docEnd":0,"docs":null,"value":null},{"name":"ObjectValueType_FloatPtr","docStart":0,"docEnd":0,"docs":null,"value":null},{"name":"ObjectValueType_Vector","docStart":0,"docEnd":0,"docs":null,"value":null},{"name":"ObjectValueType_VectorPtr","docStart":0,"docEnd":0,"docs":null,"value":null},{"name":"ObjectValueType_CharPtr","docStart":0,"docEnd":0,"docs":null,"value":null},{"name":"ObjectValueType_String","docStart":0,"docEnd":0,"docs":null,"value":null}]},{"name":"ListenType","docStart":0,"docEnd":0,"docs":null,"entries":[{"name":"ListenType_Created","docStart":0,"docEnd":0,"docs":null,"value":null},{"name":"ListenType_Deleted","docStart":0,"docEnd":0,"docs":null,"value":null}]},{"name":"ReturnType","docStart":0,"docEnd":0,"docs":null,"entries":[{"name":"ReturnType_Unknown","docStart":0,"docEnd":0,"docs":null,"value":null},{"name":"ReturnType_Void","docStart":0,"docEnd":0,"docs":null,"value":null},{"name":"ReturnType_Int","docStart":0,"docEnd":0,"docs":null,"value":null},{"name":"ReturnType_Bool","docStart":0,"docEnd":0,"docs":null,"value":null},{"name":"ReturnType_Float","docStart":0,"docEnd":0,"docs":null,"value":null},{"name":"ReturnType_String","docStart":670,"docEnd":695,"docs":{"brief":"Note this is a string_t","tags":[{"tag":"","text":"Note this is a string_t"}]},"value":null},{"name":"ReturnType_StringPtr","docStart":720,"docEnd":747,"docs":{"brief":"Note this is a string_t *","tags":[{"tag":"","text":"Note this is a string_t *"}]},"value":null},{"name":"ReturnType_CharPtr","docStart":0,"docEnd":0,"docs":null,"value":null},{"name":"ReturnType_Vector","docStart":0,"docEnd":0,"docs":null,"value":null},{"name":"ReturnType_VectorPtr","docStart":0,"docEnd":0,"docs":null,"value":null},{"name":"ReturnType_CBaseEntity","docStart":0,"docEnd":0,"docs":null,"value":null},{"name":"ReturnType_Edict","docStart":0,"docEnd":0,"docs":null,"value":null}]},{"name":"HookParamType","docStart":0,"docEnd":0,"docs":null,"entries":[{"name":"HookParamType_Unknown","docStart":0,"docEnd":0,"docs":null,"value":null},{"name":"HookParamType_Int","docStart":0,"docEnd":0,"docs":null,"value":null},{"name":"HookParamType_Bool","docStart":0,"docEnd":0,"docs":null,"value":null},{"name":"HookParamType_Float","docStart":0,"docEnd":0,"docs":null,"value":null},{"name":"HookParamType_String","docStart":1004,"docEnd":1029,"docs":{"brief":"Note this is a string_t","tags":[{"tag":"","text":"Note this is a string_t"}]},"value":null},{"name":"HookParamType_StringPtr","docStart":1057,"docEnd":1084,"docs":{"brief":"Note this is a string_t *","tags":[{"tag":"","text":"Note this is a string_t *"}]},"value":null},{"name":"HookParamType_CharPtr","docStart":0,"docEnd":0,"docs":null,"value":null},{"name":"HookParamType_VectorPtr","docStart":0,"docEnd":0,"docs":null,"value":null},{"name":"HookParamType_CBaseEntity","docStart":0,"docEnd":0,"docs":null,"value":null},{"name":"HookParamType_ObjectPtr","docStart":0,"docEnd":0,"docs":null,"value":null},{"name":"HookParamType_Edict","docStart":0,"docEnd":0,"docs":null,"value":null},{"name":"HookParamType_Object","docStart":0,"docEnd":0,"docs":null,"value":null}]},{"name":"ThisPointerType","docStart":0,"docEnd":0,"docs":null,"entries":[{"name":"ThisPointer_Ignore","docStart":0,"docEnd":0,"docs":null,"value":null},{"name":"ThisPointer_CBaseEntity","docStart":0,"docEnd":0,"docs":null,"value":null},{"name":"ThisPointer_Address","docStart":0,"docEnd":0,"docs":null,"value":null}]},{"name":"HookType","docStart":0,"docEnd":0,"docs":null,"entries":[{"name":"HookType_Entity","docStart":0,"docEnd":0,"docs":null,"value":null},{"name":"HookType_GameRules","docStart":0,"docEnd":0,"docs":null,"value":null},{"name":"HookType_Raw","docStart":0,"docEnd":0,"docs":null,"value":null}]},{"name":"CallingConvention","docStart":0,"docEnd":0,"docs":null,"entries":[{"name":"CallConv_CDECL","docStart":0,"docEnd":0,"docs":null,"value":null},{"name":"CallConv_THISCALL","docStart":0,"docEnd":0,"docs":null,"value":null},{"name":"CallConv_STDCALL","docStart":0,"docEnd":0,"docs":null,"value":null},{"name":"CallConv_FASTCALL","docStart":0,"docEnd":0,"docs":null,"value":null}]},{"name":"MRESReturn","docStart":0,"docEnd":0,"docs":null,"entries":[{"name":"MRES_ChangedHandled","docStart":1588,"docEnd":1633,"docs":{"brief":"Use changed values and return MRES_Handled","tags":[{"tag":"","text":"Use changed values and return MRES_Handled"}]},"value":"-2"},{"name":"MRES_ChangedOverride","docStart":1659,"docEnd":1705,"docs":{"brief":"Use changed values and return MRES_Override","tags":[{"tag":"","text":"Use changed values and return MRES_Override"}]},"value":null},{"name":"MRES_Ignored","docStart":1725,"docEnd":1757,"docs":{"brief":"plugin didn't take any action","tags":[{"tag":"","text":"plugin didn't take any action"}]},"value":null},{"name":"MRES_Handled","docStart":1777,"docEnd":1842,"docs":{"brief":"plugin did something, but real function should still be called","tags":[{"tag":"","text":"plugin did something, but real function should still be called"}]},"value":null},{"name":"MRES_Override","docStart":1863,"docEnd":1909,"docs":{"brief":"call real function, but use my return value","tags":[{"tag":"","text":"call real function, but use my return value"}]},"value":null},{"name":"MRES_Supercede","docStart":1930,"docEnd":1972,"docs":{"brief":"skip real function; use my return value","tags":[{"tag":"","text":"skip real function; use my return value"}]},"value":null}]},{"name":"DHookPassFlag","docStart":0,"docEnd":0,"docs":null,"entries":[{"name":"DHookPass_ByVal","docStart":2033,"docEnd":2057,"docs":{"brief":"Passing by value","tags":[{"tag":"","text":"Passing by value"}]},"value":"1 << 0"},{"name":"DHookPass_ByRef","docStart":2089,"docEnd":2117,"docs":{"brief":"Passing by reference","tags":[{"tag":"","text":"Passing by reference"}]},"value":"1 << 1"},{"name":"DHookPass_ODTOR","docStart":2148,"docEnd":2179,"docs":{"brief":"Object has a destructor","tags":[{"tag":"","text":"Object has a destructor"}]},"value":"1 << 2"},{"name":"DHookPass_OCTOR","docStart":2210,"docEnd":2242,"docs":{"brief":"Object has a constructor","tags":[{"tag":"","text":"Object has a constructor"}]},"value":"1 << 3"},{"name":"DHookPass_OASSIGNOP","docStart":2276,"docEnd":2317,"docs":{"brief":"Object has an assignment operator","tags":[{"tag":"","text":"Object has an assignment operator"}]},"value":"1 << 4"}]},{"name":"DHookRegister","docStart":0,"docEnd":0,"docs":null,"entries":[{"name":"DHookRegister_Default","docStart":2349,"docEnd":2425,"docs":{"brief":"Don't change the register and use the default for the calling convention.","tags":[{"tag":"","text":"Don't change the register and use the default for the calling convention."}]},"value":null},{"name":"DHookRegister_AL","docStart":2456,"docEnd":2490,"docs":{"brief":"8-bit general purpose registers","tags":[{"tag":"","text":"8-bit general purpose registers"}]},"value":null},{"name":"DHookRegister_CL","docStart":0,"docEnd":0,"docs":null,"value":null},{"name":"DHookRegister_DL","docStart":0,"docEnd":0,"docs":null,"value":null},{"name":"DHookRegister_BL","docStart":0,"docEnd":0,"docs":null,"value":null},{"name":"DHookRegister_AH","docStart":0,"docEnd":0,"docs":null,"value":null},{"name":"DHookRegister_CH","docStart":0,"docEnd":0,"docs":null,"value":null},{"name":"DHookRegister_DH","docStart":0,"docEnd":0,"docs":null,"value":null},{"name":"DHookRegister_BH","docStart":0,"docEnd":0,"docs":null,"value":null},{"name":"DHookRegister_EAX","docStart":2656,"docEnd":2691,"docs":{"brief":"32-bit general purpose registers","tags":[{"tag":"","text":"32-bit general purpose registers"}]},"value":null},{"name":"DHookRegister_ECX","docStart":0,"docEnd":0,"docs":null,"value":null},{"name":"DHookRegister_EDX","docStart":0,"docEnd":0,"docs":null,"value":null},{"name":"DHookRegister_EBX","docStart":0,"docEnd":0,"docs":null,"value":null},{"name":"DHookRegister_ESP","docStart":0,"docEnd":0,"docs":null,"value":null},{"name":"DHookRegister_EBP","docStart":0,"docEnd":0,"docs":null,"value":null},{"name":"DHookRegister_ESI","docStart":0,"docEnd":0,"docs":null,"value":null},{"name":"DHookRegister_EDI","docStart":0,"docEnd":0,"docs":null,"value":null},{"name":"DHookRegister_XMM0","docStart":2865,"docEnd":2889,"docs":{"brief":"128-bit XMM registers","tags":[{"tag":"","text":"128-bit XMM registers"}]},"value":null},{"name":"DHookRegister_XMM1","docStart":0,"docEnd":0,"docs":null,"value":null},{"name":"DHookRegister_XMM2","docStart":0,"docEnd":0,"docs":null,"value":null},{"name":"DHookRegister_XMM3","docStart":0,"docEnd":0,"docs":null,"value":null},{"name":"DHookRegister_XMM4","docStart":0,"docEnd":0,"docs":null,"value":null},{"name":"DHookRegister_XMM5","docStart":0,"docEnd":0,"docs":null,"value":null},{"name":"DHookRegister_XMM6","docStart":0,"docEnd":0,"docs":null,"value":null},{"name":"DHookRegister_XMM7","docStart":0,"docEnd":0,"docs":null,"value":null},{"name":"DHookRegister_ST0","docStart":3071,"docEnd":3094,"docs":{"brief":"80-bit FPU registers","tags":[{"tag":"","text":"80-bit FPU registers"}]},"value":null}]}],"typesets":[{"name":"ListenCB","docStart":0,"docEnd":0,"docs":null,"types":[{"docStart":3144,"docEnd":3153,"docs":{"brief":"Deleted","tags":[{"tag":"","text":"Deleted"}]},"type":"function void(int entity)","parsedSignature":{"returnType":"void","arguments":[]}},{"docStart":3189,"docEnd":3198,"docs":{"brief":"Created","tags":[{"tag":"","text":"Created"}]},"type":"function void(int entity, const char[] classname)","parsedSignature":{"returnType":"void","arguments":[{"type":"int","name":"entity","decl":"int entity","default":null},{"type":"const char[]","name":"classname","decl":"const char[] classname","default":null}]}}]},{"name":"DHookRemovalCB","docStart":0,"docEnd":0,"docs":null,"types":[{"docStart":0,"docEnd":0,"docs":null,"type":"function void(int hookid)","parsedSignature":{"returnType":"void","arguments":[]}}]},{"name":"DHookCallback","docStart":0,"docEnd":0,"docs":null,"types":[{"docStart":3348,"docEnd":3409,"docs":{"brief":"Function Example: void Ham::Test() with this pointer ignore","tags":[{"tag":"","text":"Function Example: void Ham::Test() with this pointer ignore"}]},"type":"function MRESReturn()","parsedSignature":{"returnType":"MRESReturn","arguments":[]}},{"docStart":3441,"docEnd":3502,"docs":{"brief":"Function Example: void Ham::Test() with this pointer passed","tags":[{"tag":"","text":"Function Example: void Ham::Test() with this pointer passed"}]},"type":"function MRESReturn(int pThis)","parsedSignature":{"returnType":"MRESReturn","arguments":[]}},{"docStart":3543,"docEnd":3612,"docs":{"brief":"Function Example: void Ham::Test(int cake) with this pointer ignore","tags":[{"tag":"","text":"Function Example: void Ham::Test(int cake) with this pointer ignore"}]},"type":"function MRESReturn(Handle hParams)","parsedSignature":{"returnType":"MRESReturn","arguments":[]}},{"docStart":3658,"docEnd":3727,"docs":{"brief":"Function Example: void Ham::Test(int cake) with this pointer passed","tags":[{"tag":"","text":"Function Example: void Ham::Test(int cake) with this pointer passed"}]},"type":"function MRESReturn(int pThis, Handle hParams)","parsedSignature":{"returnType":"MRESReturn","arguments":[{"type":"int","name":"pThis","decl":"int pThis","default":null},{"type":"Handle","name":"hParams","decl":"Handle hParams","default":null}]}},{"docStart":3784,"docEnd":3844,"docs":{"brief":"Function Example: int Ham::Test() with this pointer ignore","tags":[{"tag":"","text":"Function Example: int Ham::Test() with this pointer ignore"}]},"type":"function MRESReturn(Handle hReturn)","parsedSignature":{"returnType":"MRESReturn","arguments":[]}},{"docStart":3890,"docEnd":3950,"docs":{"brief":"Function Example: int Ham::Test() with this pointer passed","tags":[{"tag":"","text":"Function Example: int Ham::Test() with this pointer passed"}]},"type":"function MRESReturn(int pThis, Handle hReturn)","parsedSignature":{"returnType":"MRESReturn","arguments":[{"type":"int","name":"pThis","decl":"int pThis","default":null},{"type":"Handle","name":"hReturn","decl":"Handle hReturn","default":null}]}},{"docStart":4007,"docEnd":4075,"docs":{"brief":"Function Example: int Ham::Test(int cake) with this pointer ignore","tags":[{"tag":"","text":"Function Example: int Ham::Test(int cake) with this pointer ignore"}]},"type":"function MRESReturn(Handle hReturn, Handle hParams)","parsedSignature":{"returnType":"MRESReturn","arguments":[{"type":"Handle","name":"hReturn","decl":"Handle hReturn","default":null},{"type":"Handle","name":"hParams","decl":"Handle hParams","default":null}]}},{"docStart":4137,"docEnd":4205,"docs":{"brief":"Function Example: int Ham::Test(int cake) with this pointer passed","tags":[{"tag":"","text":"Function Example: int Ham::Test(int cake) with this pointer passed"}]},"type":"function MRESReturn(int pThis, Handle hReturn, Handle hParams)","parsedSignature":{"returnType":"MRESReturn","arguments":[{"type":"int","name":"pThis","decl":"int pThis","default":null},{"type":"Handle","name":"hReturn","decl":"Handle hReturn","default":null},{"type":"Handle","name":"hParams","decl":"Handle hParams","default":null}]}},{"docStart":4297,"docEnd":4358,"docs":{"brief":"Function Example: void Ham::Test() with this pointer passed","tags":[{"tag":"","text":"Function Example: void Ham::Test() with this pointer passed"}]},"type":"function MRESReturn(Address pThis)","parsedSignature":{"returnType":"MRESReturn","arguments":[]}},{"docStart":4403,"docEnd":4472,"docs":{"brief":"Function Example: void Ham::Test(int cake) with this pointer passed","tags":[{"tag":"","text":"Function Example: void Ham::Test(int cake) with this pointer passed"}]},"type":"function MRESReturn(Address pThis, Handle hParams)","parsedSignature":{"returnType":"MRESReturn","arguments":[{"type":"Address","name":"pThis","decl":"Address pThis","default":null},{"type":"Handle","name":"hParams","decl":"Handle hParams","default":null}]}},{"docStart":4533,"docEnd":4593,"docs":{"brief":"Function Example: int Ham::Test() with this pointer passed","tags":[{"tag":"","text":"Function Example: int Ham::Test() with this pointer passed"}]},"type":"function MRESReturn(Address pThis, Handle hReturn)","parsedSignature":{"returnType":"MRESReturn","arguments":[{"type":"Address","name":"pThis","decl":"Address pThis","default":null},{"type":"Handle","name":"hReturn","decl":"Handle hReturn","default":null}]}},{"docStart":4654,"docEnd":4722,"docs":{"brief":"Function Example: int Ham::Test(int cake) with this pointer passed","tags":[{"tag":"","text":"Function Example: int Ham::Test(int cake) with this pointer passed"}]},"type":"function MRESReturn(Address pThis, Handle hReturn, Handle hParams)","parsedSignature":{"returnType":"MRESReturn","arguments":[{"type":"Address","name":"pThis","decl":"Address pThis","default":null},{"type":"Handle","name":"hReturn","decl":"Handle hReturn","default":null},{"type":"Handle","name":"hParams","decl":"Handle hParams","default":null}]}}]}],"typedefs":[]}