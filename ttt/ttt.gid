{"functions":[{"name":"TTT_OnRoundStart_Pre","docStart":3502,"docEnd":3681,"docs":{"brief":"Called before players roles are picked/assigned.\nReturn Plugin_Handled or higher to prevent round start.\nYou could slay players here to force them to sit out.","tags":[{"tag":"","text":"Called before players roles are picked/assigned.\nReturn Plugin_Handled or higher to prevent round start.\nYou could slay players here to force them to sit out."}]},"kind":"forward","returnType":"Action","arguments":[]},{"name":"TTT_OnRoundStart","docStart":3725,"docEnd":3973,"docs":{"brief":"Called when the actual TTT round starts (after selection time).","tags":[{"tag":"","text":"Called when the actual TTT round starts (after selection time)."},{"tag":"param:innocents","text":"Count of innocent players."},{"tag":"param:traitors","text":"Count of traitor players."},{"tag":"param:detective","text":"Count of detective players."}]},"kind":"forward","returnType":"void","arguments":[{"type":"int","name":"innocents","decl":"int innocents","default":null},{"type":"int","name":"traitors","decl":"int traitors","default":null},{"type":"int","name":"detective","decl":"int detective","default":null}]},{"name":"TTT_OnRoundStartFailed","docStart":4053,"docEnd":4407,"docs":{"brief":"Called when round start is failed or prevented.","tags":[{"tag":"","text":"Called when round start is failed or prevented."},{"tag":"param:players","text":"The amount of players we have.\n-1 if this round was prevented by\nanother plugin."},{"tag":"param:requiredPlayers","text":"The amount of players we need."},{"tag":"param:detective","text":"The amount needed for detective."}]},"kind":"forward","returnType":"void","arguments":[{"type":"int","name":"players","decl":"int players","default":null},{"type":"int","name":"requiredPlayers","decl":"int requiredPlayers","default":null},{"type":"int","name":"detective","decl":"int detective","default":null}]},{"name":"TTT_OnRoundEnd","docStart":4498,"docEnd":4753,"docs":{"brief":"Called when the actual TTT round ended.","tags":[{"tag":"","text":"Called when the actual TTT round ended."},{"tag":"param:winner","text":"The Winning Team."},{"tag":"param:array","text":"Round logs as handle (if you want ArrayList instead of Handle use this: `ArrayList aLogs = view_as<ArrayList>(array);Â´)"}]},"kind":"forward","returnType":"void","arguments":[{"type":"int","name":"winner","decl":"int winner","default":null},{"type":"Handle","name":"array","decl":"Handle array","default":null}]},{"name":"TTT_OnClientGetRole","docStart":4813,"docEnd":4948,"docs":{"brief":"Called when a client's role is assigned.","tags":[{"tag":"","text":"Called when a client's role is assigned."},{"tag":"param:client","text":"Client index."},{"tag":"param:role","text":"Role."}]},"kind":"forward","returnType":"void","arguments":[{"type":"int","name":"client","decl":"int client","default":null},{"type":"int","name":"role","decl":"int role","default":null}]},{"name":"TTT_OnTakeDamage","docStart":5009,"docEnd":5331,"docs":{"brief":"Called when a client take damage","tags":[{"tag":"","text":"Called when a client take damage"},{"tag":"param:victim","text":"Person who take damage."},{"tag":"param:attacker","text":"Attacker."},{"tag":"param:damage","text":"How much damage"},{"tag":"param:weapon","text":"Weapon index"},{"tag":"param:badAction","text":"If damage was a bad action (example: Innocent damaged Detective)"}]},"kind":"forward","returnType":"void","arguments":[{"type":"int","name":"victim","decl":"int victim","default":null},{"type":"int","name":"attacker","decl":"int attacker","default":null},{"type":"float","name":"damage","decl":"float damage","default":null},{"type":"int","name":"weapon","decl":"int weapon","default":null},{"type":"bool","name":"badAction","decl":"bool badAction","default":null}]},{"name":"TTT_OnClientDeath","docStart":5435,"docEnd":5674,"docs":{"brief":"Called when a client dies, after Karma process","tags":[{"tag":"","text":"Called when a client dies, after Karma process"},{"tag":"param:victim","text":"Person who died."},{"tag":"param:attacker","text":"Attacker."},{"tag":"param:badAction","text":"If kill was a bad action (example: Innocent killed Detective)"}]},"kind":"forward","returnType":"void","arguments":[{"type":"int","name":"victim","decl":"int victim","default":null},{"type":"int","name":"attacker","decl":"int attacker","default":null},{"type":"bool","name":"badAction","decl":"bool badAction","default":null}]},{"name":"TTT_OnClientDeathPre","docStart":5753,"docEnd":5902,"docs":{"brief":"Called when a client dies, before Karma process","tags":[{"tag":"","text":"Called when a client dies, before Karma process"},{"tag":"param:victim","text":"Person who died."},{"tag":"param:attacker","text":"Attacker."}]},"kind":"forward","returnType":"Action","arguments":[{"type":"int","name":"victim","decl":"int victim","default":null},{"type":"int","name":"attacker","decl":"int attacker","default":null}]},{"name":"TTT_OnBodyFound","docStart":5970,"docEnd":6336,"docs":{"brief":"Called when a body is found.","tags":[{"tag":"","text":"Called when a body is found."},{"tag":"param:client","text":"The client who identified the body."},{"tag":"param:victim","text":"The client whom the body belongs to. (-1 for invalid index)"},{"tag":"param:ragdoll","text":"The Array with Ragdoll informations (by reference)."},{"tag":"param:silentID","text":"True if body was silenced id and false if normal inspect"}]},"kind":"forward","returnType":"void","arguments":[{"type":"int","name":"client","decl":"int client","default":null},{"type":"int","name":"victim","decl":"int victim","default":null},{"type":"Ragdolls","name":"ragdoll","decl":"Ragdolls ragdoll","default":null},{"type":"bool","name":"silentID","decl":"bool silentID","default":null}]},{"name":"TTT_OnRulesMenu","docStart":6428,"docEnd":6665,"docs":{"brief":"Called before we create rules menu.\nIf want to change it use \"return Plugin_Changed;\"","tags":[{"tag":"","text":"Called before we create rules menu.\nIf want to change it use \"return Plugin_Changed;\""},{"tag":"param:client","text":"The client index."},{"tag":"param:show","text":"True - Menu will be opened, False - Menu will not open"}]},"kind":"forward","returnType":"Action","arguments":[{"type":"int","name":"client","decl":"int client","default":null},{"type":"bool&","name":"show","decl":"bool& show","default":null}]},{"name":"TTT_OnDetectiveMenu","docStart":6726,"docEnd":6968,"docs":{"brief":"Called before we create detectives menu.\nIf want to change it use \"return Plugin_Changed;\"","tags":[{"tag":"","text":"Called before we create detectives menu.\nIf want to change it use \"return Plugin_Changed;\""},{"tag":"param:client","text":"The client index."},{"tag":"param:show","text":"True - Menu will be opened, False - Menu will not open"}]},"kind":"forward","returnType":"Action","arguments":[{"type":"int","name":"client","decl":"int client","default":null},{"type":"bool&","name":"show","decl":"bool& show","default":null}]},{"name":"TTT_OnBodyCheck","docStart":7033,"docEnd":7230,"docs":{"brief":"Called before a body will be scanned.","tags":[{"tag":"","text":"Called before a body will be scanned."},{"tag":"param:client","text":"The client who scanned the body."},{"tag":"param:ragdoll","text":"The Array with Ragdoll informations (by reference)."}]},"kind":"forward","returnType":"Action","arguments":[{"type":"int","name":"client","decl":"int client","default":null},{"type":"Ragdolls","name":"ragdoll","decl":"Ragdolls ragdoll","default":null}]},{"name":"TTT_OnModelUpdate","docStart":7297,"docEnd":7503,"docs":{"brief":"Called on updated player models\n(if ttt_update_client_model is true)","tags":[{"tag":"","text":"Called on updated player models\n(if ttt_update_client_model is true)"},{"tag":"param:client","text":"The client index after updated model"},{"tag":"param:model","text":"Path of current model"}]},"kind":"forward","returnType":"void","arguments":[{"type":"int","name":"client","decl":"int client","default":null},{"type":"const char[]","name":"model","decl":"const char[] model","default":null}]},{"name":"TTT_OnPlayerRespawn","docStart":7572,"docEnd":7673,"docs":{"brief":"Called after TTT_RespawnPlayer execute","tags":[{"tag":"","text":"Called after TTT_RespawnPlayer execute"},{"tag":"param:client","text":"The client index"}]},"kind":"forward","returnType":"void","arguments":[{"type":"int","name":"client","decl":"int client","default":null}]},{"name":"TTT_OnButtonPress","docStart":0,"docEnd":0,"docs":null,"kind":"forward","returnType":"int","arguments":[{"type":"int","name":"client","decl":"int client","default":null},{"type":"int","name":"button","decl":"int button","default":null}]},{"name":"TTT_OnButtonRelease","docStart":0,"docEnd":0,"docs":null,"kind":"forward","returnType":"int","arguments":[{"type":"int","name":"client","decl":"int client","default":null},{"type":"int","name":"button","decl":"int button","default":null}]},{"name":"TTT_OnPlayerDeath","docStart":7840,"docEnd":7976,"docs":{"brief":"Called before RDM will be handled.","tags":[{"tag":"","text":"Called before RDM will be handled."},{"tag":"param:victim","text":"Person who died."},{"tag":"param:attacker","text":"Attacker."}]},"kind":"forward","returnType":"Action","arguments":[{"type":"int","name":"victim","decl":"int victim","default":null},{"type":"int","name":"attacker","decl":"int attacker","default":null}]},{"name":"TTT_OnKarmaUpdate","docStart":8041,"docEnd":8253,"docs":{"brief":"Called once Karma has been updated on a client.","tags":[{"tag":"","text":"Called once Karma has been updated on a client."},{"tag":"param:client","text":"Client index."},{"tag":"param:type","text":"Type of update. (Enum above)"},{"tag":"param:karma","text":"Amount of Karma."}]},"kind":"forward","returnType":"void","arguments":[{"type":"int","name":"client","decl":"int client","default":null},{"type":"KarmaUpdate","name":"type","decl":"KarmaUpdate type","default":null},{"type":"int","name":"karma","decl":"int karma","default":null}]},{"name":"TTT_OnCheckCommandAccess","docStart":8331,"docEnd":8588,"docs":{"brief":"This forward will be called when a client hasn't access to command (TTT_CheckCommandAccess)\nIt's possible to give a client access to an not accessible command\nYou must use 'return Plugin_Changed;' if you want to change the bool 'access'","tags":[{"tag":"","text":"This forward will be called when a client hasn't access to command (TTT_CheckCommandAccess)\nIt's possible to give a client access to an not accessible command\nYou must use 'return Plugin_Changed;' if you want to change the bool 'access'"}]},"kind":"forward","returnType":"bool","arguments":[{"type":"int","name":"client","decl":"int client","default":null},{"type":"const char[]","name":"command","decl":"const char[] command","default":null},{"type":"const char[]","name":"flags","decl":"const char[] flags","default":null},{"type":"bool","name":"access","decl":"bool access","default":null}]},{"name":"TTT_OnLatestVersion","docStart":8699,"docEnd":9002,"docs":{"brief":"With this forward you get the latest version from csgottt.com(/version.php) as string\nNOTE: ttt_version_check must be \"1\" and SteamWorks ( https://forums.alliedmods.net/showthread.php?t=229556 )\nmust be installed!","tags":[{"tag":"","text":"With this forward you get the latest version from csgottt.com(/version.php) as string\nNOTE: ttt_version_check must be \"1\" and SteamWorks ( https://forums.alliedmods.net/showthread.php?t=229556 )\nmust be installed!"},{"tag":"param:version","text":"Latest TTT Version as String"}]},"kind":"forward","returnType":"void","arguments":[{"type":"const char[]","name":"version","decl":"const char[] version","default":null}]},{"name":"TTT_IsRoundActive","docStart":9063,"docEnd":9106,"docs":{"brief":"Checks if the round is active.","tags":[{"tag":"","text":"Checks if the round is active."}]},"kind":"native","returnType":"bool","arguments":[]},{"name":"TTT_GetClientRole","docStart":9144,"docEnd":9229,"docs":{"brief":"Retrieve a client's role.","tags":[{"tag":"","text":"Retrieve a client's role."},{"tag":"param:client","text":"Client index."}]},"kind":"native","returnType":"int","arguments":[{"type":"int","name":"client","decl":"int client","default":null}]},{"name":"TTT_GetClientKarma","docStart":9276,"docEnd":9362,"docs":{"brief":"Retrieve a client's karma.","tags":[{"tag":"","text":"Retrieve a client's karma."},{"tag":"param:client","text":"Client index."}]},"kind":"native","returnType":"int","arguments":[{"type":"int","name":"client","decl":"int client","default":null},{"type":"bool","name":"publicKarma","decl":"bool publicKarma","default":"true"}]},{"name":"TTT_GetClientRagdoll","docStart":9435,"docEnd":9591,"docs":{"brief":"Retrieve the Radgoll Info.","tags":[{"tag":"","text":"Retrieve the Radgoll Info."},{"tag":"param:client","text":"The victims index."},{"tag":"param:radgoll","text":"The array to save the ragoll infos."}]},"kind":"native","returnType":"bool","arguments":[{"type":"int","name":"victim","decl":"int victim","default":null},{"type":"any[]","name":"ragdoll","decl":"any[] ragdoll","default":null}]},{"name":"TTT_GetClientByRagdollID","docStart":9657,"docEnd":9794,"docs":{"brief":"Retrieve the client index.","tags":[{"tag":"","text":"Retrieve the client index."},{"tag":"param:ragdoll","text":"The ragdoll index."},{"tag":"return","text":"The client index"}]},"kind":"native","returnType":"int","arguments":[{"type":"int","name":"ragdoll","decl":"int ragdoll","default":null}]},{"name":"TTT_AddRagdoll","docStart":9849,"docEnd":10070,"docs":{"brief":"Spawn ragdoll at client position and add it to global Ragdoll array (will get cleaned on Round Start).","tags":[{"tag":"","text":"Spawn ragdoll at client position and add it to global Ragdoll array (will get cleaned on Round Start)."},{"tag":"param:client","text":"The client index"},{"tag":"return","text":"True if spawned, false else."}]},"kind":"native","returnType":"void","arguments":[{"type":"any[]","name":"ragdoll","decl":"any[] ragdoll","default":null}]},{"name":"TTT_SetClientRole","docStart":10118,"docEnd":10241,"docs":{"brief":"Set a client's role.","tags":[{"tag":"","text":"Set a client's role."},{"tag":"param:client","text":"Client index."},{"tag":"param:role","text":"The new role."}]},"kind":"native","returnType":"int","arguments":[{"type":"int","name":"client","decl":"int client","default":null},{"type":"int","name":"role","decl":"int role","default":null}]},{"name":"TTT_SetClientKarma","docStart":10298,"docEnd":10436,"docs":{"brief":"Sets the karma of a client.","tags":[{"tag":"","text":"Sets the karma of a client."},{"tag":"param:client","text":"Client index."},{"tag":"param:karma","text":"Karma for the client."}]},"kind":"native","returnType":"int","arguments":[{"type":"int","name":"client","decl":"int client","default":null},{"type":"int","name":"karma","decl":"int karma","default":null},{"type":"bool","name":"force","decl":"bool force","default":null}]},{"name":"TTT_AddClientKarma","docStart":10507,"docEnd":10665,"docs":{"brief":"Add karma to a client (currentKarma+karma).","tags":[{"tag":"","text":"Add karma to a client (currentKarma+karma)."},{"tag":"param:client","text":"Client index."},{"tag":"param:karma","text":"Karma that will be added."}]},"kind":"native","returnType":"int","arguments":[{"type":"int","name":"client","decl":"int client","default":null},{"type":"int","name":"karma","decl":"int karma","default":null},{"type":"bool","name":"force","decl":"bool force","default":null}]},{"name":"TTT_RemoveClientKarma","docStart":10736,"docEnd":10890,"docs":{"brief":"Remove karma from a client (currentKarma-karma).","tags":[{"tag":"","text":"Remove karma from a client (currentKarma-karma)."},{"tag":"param:client","text":"Client index."},{"tag":"param:karma","text":"Karma to remove."}]},"kind":"native","returnType":"int","arguments":[{"type":"int","name":"client","decl":"int client","default":null},{"type":"int","name":"karma","decl":"int karma","default":null},{"type":"bool","name":"force","decl":"bool force","default":null}]},{"name":"TTT_WasBodyFound","docStart":10964,"docEnd":11078,"docs":{"brief":"Determins whether a player's body was found (if dead).","tags":[{"tag":"","text":"Determins whether a player's body was found (if dead)."},{"tag":"param:client","text":"Client index."}]},"kind":"native","returnType":"bool","arguments":[{"type":"int","name":"client","decl":"int client","default":null}]},{"name":"TTT_WasBodyScanned","docStart":11125,"docEnd":11241,"docs":{"brief":"Determins whether a player's body was scanned (if dead).","tags":[{"tag":"","text":"Determins whether a player's body was scanned (if dead)."},{"tag":"param:client","text":"Client index."}]},"kind":"native","returnType":"bool","arguments":[{"type":"int","name":"client","decl":"int client","default":null}]},{"name":"TTT_GetFoundStatus","docStart":11290,"docEnd":11426,"docs":{"brief":"Determines if a player is dead and has had their body found.","tags":[{"tag":"","text":"Determines if a player is dead and has had their body found."},{"tag":"param:client","text":"The client index to lookup."}]},"kind":"native","returnType":"bool","arguments":[{"type":"int","name":"client","decl":"int client","default":null}]},{"name":"TTT_SetFoundStatus","docStart":11475,"docEnd":11662,"docs":{"brief":"Set whether a player appears dead and body found.","tags":[{"tag":"","text":"Set whether a player appears dead and body found."},{"tag":"param:client","text":"The client index to change."},{"tag":"param:found","text":"True if found & dead, false else."}]},"kind":"native","returnType":"void","arguments":[{"type":"int","name":"client","decl":"int client","default":null},{"type":"bool","name":"found","decl":"bool found","default":null}]},{"name":"TTT_LogString","docStart":11723,"docEnd":11836,"docs":{"brief":"Log a String to the ingame Log.","tags":[{"tag":"","text":"Log a String to the ingame Log."},{"tag":"param:string","text":"The message that should get logged."}]},"kind":"native","returnType":"void","arguments":[{"type":"const char[]","name":"format","decl":"const char[] format","default":null},{"type":"any...","name":"","decl":"any... ","default":null}]},{"name":"TTT_ForceTraitor","docStart":11898,"docEnd":12118,"docs":{"brief":"Force a player to be traitor next round. (If there are enough Traitors)","tags":[{"tag":"","text":"Force a player to be traitor next round. (If there are enough Traitors)"},{"tag":"param:client","text":"The client index to change."},{"tag":"return","text":"False if the client's role already forced for the next round."}]},"kind":"native","returnType":"bool","arguments":[{"type":"int","name":"client","decl":"int client","default":null}]},{"name":"TTT_ForceDetective","docStart":12165,"docEnd":12392,"docs":{"brief":"Force a player to be detective next round. (If there are enough Detectives)","tags":[{"tag":"","text":"Force a player to be detective next round. (If there are enough Detectives)"},{"tag":"param:client","text":"The client index to change."},{"tag":"return","text":"False if the client's role is already forced for the next round."}]},"kind":"native","returnType":"bool","arguments":[{"type":"int","name":"client","decl":"int client","default":null}]},{"name":"TTT_AddRoundSlays","docStart":12441,"docEnd":12723,"docs":{"brief":"NO DESCRIPTION","tags":[{"tag":"","text":"NO DESCRIPTION"},{"tag":"param:client","text":"The client index."},{"tag":"param:rounds","text":"The amount of rounds to add."},{"tag":"param:force","text":"Begin directly if client is alive."},{"tag":"return","text":"Returns the amount of rounds, otherwise the client index is invalid"}]},"kind":"native","returnType":"int","arguments":[{"type":"int","name":"client","decl":"int client","default":null},{"type":"int","name":"rounds","decl":"int rounds","default":null},{"type":"bool","name":"force","decl":"bool force","default":null}]},{"name":"TTT_SetRoundSlays","docStart":12794,"docEnd":13172,"docs":{"brief":"NO DESCRIPTION","tags":[{"tag":"","text":"NO DESCRIPTION"},{"tag":"param:client","text":"The client index."},{"tag":"param:rounds","text":"The amount of rounds."},{"tag":"param:force","text":"Begin directly if client is alive (Default: false).\nThis works now in a inactive round, when force is true"},{"tag":"return","text":"Returns the amount of rounds, otherwise the client index is invalid"}]},"kind":"native","returnType":"int","arguments":[{"type":"int","name":"client","decl":"int client","default":null},{"type":"int","name":"rounds","decl":"int rounds","default":null},{"type":"bool","name":"force","decl":"bool force","default":"false"}]},{"name":"TTT_ClientOpenRules","docStart":13251,"docEnd":13345,"docs":{"brief":"Open rules menu for the client","tags":[{"tag":"","text":"Open rules menu for the client"},{"tag":"param:client","text":"The client index."}]},"kind":"native","returnType":"void","arguments":[{"type":"int","name":"client","decl":"int client","default":null}]},{"name":"TTT_GetRoundTime","docStart":13395,"docEnd":13577,"docs":{"brief":"Returns the time of a active rounds (-1 for inactive round/failed to start)","tags":[{"tag":"","text":"Returns the time of a active rounds (-1 for inactive round/failed to start)"},{"tag":"param:type","text":"Which type is needed? (0 - Time, 1 - Minutes, 2 - Seconds)"}]},"kind":"native","returnType":"void","arguments":[{"type":"int","name":"type","decl":"int type","default":null}]},{"name":"TTT_CheckCommandAccess","docStart":13622,"docEnd":14733,"docs":{"brief":"Returns whether a client has access to a given command string.  The string\ncan be any override string, as overrides can be independent of\ncommands.  This feature essentially allows you to create custom\nflags using the override system.","tags":[{"tag":"","text":"Returns whether a client has access to a given command string.  The string\ncan be any override string, as overrides can be independent of\ncommands.  This feature essentially allows you to create custom\nflags using the override system."},{"tag":"param:client","text":"Client index."},{"tag":"param:command","text":"Command name.  If the command is not found, the default\nflags are used."},{"tag":"param:cvar","text":"Flag convar to use as a default, if the command or override\nis not found."},{"tag":"param:override_only","text":"If true, SourceMod will not attempt to find a matching\ncommand, and it will only use the default flags specified.\nOtherwise, SourceMod will ignore the default flags if\nthere is a matching admin command."},{"tag":"return","text":"True if the client has access, false otherwise.\n\nTHIS TEXT WAS COPIED FROM HERE: https://github.com/alliedmodders/sourcemod/blob/6c7e29cbdbe1fe17982a4531d839be65116abca2/plugins/include/console.inc#L479"}]},"kind":"native","returnType":"bool","arguments":[{"type":"int","name":"client","decl":"int client","default":null},{"type":"const char[]","name":"command","decl":"const char[] command","default":null},{"type":"ConVar","name":"cvar","decl":"ConVar cvar","default":null},{"type":"bool","name":"override_only","decl":"bool override_only","default":"false"}]},{"name":"TTT_RespawnPlayer","docStart":14849,"docEnd":14940,"docs":{"brief":"Respawns a player.","tags":[{"tag":"","text":"Respawns a player."},{"tag":"param:client","text":"Client Index\n"}]},"kind":"native","returnType":"void","arguments":[{"type":"int","name":"client","decl":"int client","default":null}]},{"name":"TTT_GetRoundTimestamp","docStart":14988,"docEnd":15149,"docs":{"brief":"Returns the timestamp where \"round_prestart\" was executed.","tags":[{"tag":"","text":"Returns the timestamp where \"round_prestart\" was executed."},{"tag":"return","text":"Returns the timestamp where \"round_prestart\" was executed."}]},"kind":"native","returnType":"int","arguments":[]},{"name":"TTT_TerminateRound","docStart":15190,"docEnd":15457,"docs":{"brief":"Forces round to end\nWhy was this added? To prevent mistakes with blockhook (it doesn't work blockhook = true)","tags":[{"tag":"","text":"Forces round to end\nWhy was this added? To prevent mistakes with blockhook (it doesn't work blockhook = true)"},{"tag":"param:delay","text":"Time (in seconds) to delay before new round starts"},{"tag":"param:reason","text":"Reason for the round ending\n"}]},"kind":"native","returnType":"void","arguments":[{"type":"float","name":"delay","decl":"float delay","default":null},{"type":"CSRoundEndReason","name":"reason","decl":"CSRoundEndReason reason","default":null}]},{"name":"TTT_GetLatestVersion","docStart":15532,"docEnd":15885,"docs":{"brief":"With this naitve you get the latest version from csgottt.com(/version.php) as string\nNOTE: ttt_version_check must be \"1\" and SteamWorks ( https://forums.alliedmods.net/showthread.php?t=229556 )\nmust be installed!","tags":[{"tag":"","text":"With this naitve you get the latest version from csgottt.com(/version.php) as string\nNOTE: ttt_version_check must be \"1\" and SteamWorks ( https://forums.alliedmods.net/showthread.php?t=229556 )\nmust be installed!"},{"tag":"param:version","text":"Latest TTT Version as String"},{"tag":"param:length","text":"Length of the string"}]},"kind":"native","returnType":"bool","arguments":[{"type":"const char[]","name":"version","decl":"const char[] version","default":null},{"type":"int","name":"length","decl":"int length","default":null}]},{"name":"TTT_GetCommitsCount","docStart":15958,"docEnd":16023,"docs":{"brief":"Returns current ttt version. -1 = custom version\n","tags":[{"tag":"","text":"Returns current ttt version. -1 = custom version\n"}]},"kind":"native","returnType":"int","arguments":[]},{"name":"TTT_DisableRounds","docStart":16062,"docEnd":16397,"docs":{"brief":"Disable the next TTT round. It has no effect if it's already set.\nIf you want to close the disabled round:\n- set status to false\n- terminate roundd with TTT_TerminateRound","tags":[{"tag":"","text":"Disable the next TTT round. It has no effect if it's already set.\nIf you want to close the disabled round:\n- set status to false\n- terminate roundd with TTT_TerminateRound"},{"tag":"param:status","text":"If true, next round will be disabled.\nIf false, next round will be normal."}]},"kind":"native","returnType":"bool","arguments":[{"type":"bool","name":"status","decl":"bool status","default":null}]},{"name":"TTT_GetRoundStatus","docStart":16446,"docEnd":16502,"docs":{"brief":"Returns the current status of the round\n","tags":[{"tag":"","text":"Returns the current status of the round\n"}]},"kind":"native","returnType":"RoundStatus","arguments":[]},{"name":"TTT_OnRoundSlay","docStart":16548,"docEnd":16702,"docs":{"brief":"Called after a player was round slayed.","tags":[{"tag":"","text":"Called after a player was round slayed."},{"tag":"param:client","text":"The client index."},{"tag":"param:remaining","text":"Amount of rounds left"}]},"kind":"forward","returnType":"int","arguments":[{"type":"int","name":"client","decl":"int client","default":null},{"type":"int","name":"remaining","decl":"int remaining","default":null}]},{"name":"TTT_GetRoleNameByID","docStart":0,"docEnd":0,"docs":null,"kind":"stock","returnType":"void","arguments":[{"type":"int","name":"role","decl":"int role","default":null},{"type":"char[]","name":"name","decl":"char[] name","default":null},{"type":"int","name":"length","decl":"int length","default":"16"}]},{"name":"TTT_GetRoleNameByShortName","docStart":0,"docEnd":0,"docs":null,"kind":"stock","returnType":"void","arguments":[{"type":"const char[]","name":"shortName","decl":"const char[] shortName","default":null},{"type":"char[]","name":"name","decl":"char[] name","default":null},{"type":"int","name":"length","decl":"int length","default":"16"}]},{"name":"TTT_GetRoleIDByName","docStart":0,"docEnd":0,"docs":null,"kind":"stock","returnType":"int","arguments":[{"type":"const char[]","name":"name","decl":"const char[] name","default":null}]},{"name":"TTT_GetRoleIDByShortName","docStart":0,"docEnd":0,"docs":null,"kind":"stock","returnType":"int","arguments":[{"type":"const char[]","name":"shortName","decl":"const char[] shortName","default":null}]},{"name":"TTT_GetShortRoleNameByID","docStart":0,"docEnd":0,"docs":null,"kind":"stock","returnType":"void","arguments":[{"type":"int","name":"role","decl":"int role","default":null},{"type":"char[]","name":"shortName","decl":"char[] shortName","default":null},{"type":"int","name":"length","decl":"int length","default":"16"}]},{"name":"TTT_GetShortRoleNameByName","docStart":0,"docEnd":0,"docs":null,"kind":"stock","returnType":"void","arguments":[{"type":"const char[]","name":"name","decl":"const char[] name","default":null},{"type":"char[]","name":"shortName","decl":"char[] shortName","default":null},{"type":"int","name":"length","decl":"int length","default":"16"}]},{"name":"TTT_IsPlayerAlive","docStart":19487,"docEnd":19657,"docs":{"brief":"Returns if the client is alive or dead.","tags":[{"tag":"","text":"Returns if the client is alive or dead."},{"tag":"param:client","text":"Player's index."},{"tag":"return","text":"True if the client is alive, false otherwise."}]},"kind":"native","returnType":"bool","arguments":[{"type":"int","name":"client","decl":"int client","default":null}]},{"name":"TTT_IsLoaded","docStart":19705,"docEnd":19760,"docs":{"brief":"Check if TTT plugin is loaded and running.","tags":[{"tag":"","text":"Check if TTT plugin is loaded and running."}]},"kind":"stock","returnType":"bool","arguments":[]},{"name":"TTT_IsClientValid","docStart":19831,"docEnd":19877,"docs":{"brief":"Check if a client index is valid.","tags":[{"tag":"","text":"Check if a client index is valid."}]},"kind":"stock","returnType":"bool","arguments":[{"type":"int","name":"client","decl":"int client","default":null}]},{"name":"TTT_HasCVarFlags","docStart":0,"docEnd":0,"docs":null,"kind":"stock","returnType":"bool","arguments":[{"type":"int","name":"client","decl":"int client","default":null},{"type":"ConVar","name":"cFlags","decl":"ConVar cFlags","default":null}]},{"name":"TTT_HasFlags","docStart":0,"docEnd":0,"docs":null,"kind":"stock","returnType":"bool","arguments":[{"type":"int","name":"client","decl":"int client","default":null},{"type":"const char[]","name":"flags","decl":"const char[] flags","default":null}]},{"name":"tHasFlags","docStart":0,"docEnd":0,"docs":null,"kind":"stock","returnType":"bool","arguments":[{"type":"int","name":"client","decl":"int client","default":null},{"type":"AdminFlag","name":"flags[24]","decl":"AdminFlag flags[24]","default":null}]},{"name":"TTT_RemoveWeaponByClassname","docStart":0,"docEnd":0,"docs":null,"kind":"stock","returnType":"bool","arguments":[{"type":"int","name":"client","decl":"int client","default":null},{"type":"const char[]","name":"classname","decl":"const char[] classname","default":null},{"type":"int","name":"slot","decl":"int slot","default":null}]},{"name":"TTT_RemoveMeleeWeapons","docStart":0,"docEnd":0,"docs":null,"kind":"stock","returnType":"void","arguments":[{"type":"int","name":"client","decl":"int client","default":null}]},{"name":"TTT_SafeRemoveWeapon","docStart":0,"docEnd":0,"docs":null,"kind":"stock","returnType":"bool","arguments":[{"type":"int","name":"client","decl":"int client","default":null},{"type":"int","name":"weapon","decl":"int weapon","default":null},{"type":"int","name":"slot","decl":"int slot","default":null}]},{"name":"TTT_ShowOverlayToClient","docStart":0,"docEnd":0,"docs":null,"kind":"stock","returnType":"void","arguments":[{"type":"int","name":"client","decl":"int client","default":null},{"type":"const char[]","name":"overlaypath","decl":"const char[] overlaypath","default":null}]},{"name":"TTT_ShowOverlayToAll","docStart":0,"docEnd":0,"docs":null,"kind":"stock","returnType":"void","arguments":[{"type":"const char[]","name":"overlaypath","decl":"const char[] overlaypath","default":null}]},{"name":"TTT_GetRandomPlayer","docStart":0,"docEnd":0,"docs":null,"kind":"stock","returnType":"int","arguments":[{"type":"bool","name":"alive","decl":"bool alive","default":"true"},{"type":"int","name":"targetRole","decl":"int targetRole","default":"-1"}]},{"name":"TTT_IsWorldDamage","docStart":0,"docEnd":0,"docs":null,"kind":"stock","returnType":"bool","arguments":[{"type":"int","name":"iAttacker","decl":"int iAttacker","default":null},{"type":"int","name":"damagetype","decl":"int damagetype","default":null}]},{"name":"TTT_ClearTimer","docStart":0,"docEnd":0,"docs":null,"kind":"stock","returnType":"void","arguments":[{"type":"Handle","name":"&timer","decl":"Handle &timer","default":null},{"type":"bool","name":"autoClose","decl":"bool autoClose","default":"false"}]},{"name":"TTT_IsWarmUp","docStart":0,"docEnd":0,"docs":null,"kind":"stock","returnType":"bool","arguments":[]},{"name":"TTT_IsValidRole","docStart":0,"docEnd":0,"docs":null,"kind":"stock","returnType":"int","arguments":[{"type":"int","name":"client","decl":"int client","default":null},{"type":"int","name":"role","decl":"int role","default":null}]},{"name":"TTT_IsPrimaryWeapon","docStart":0,"docEnd":0,"docs":null,"kind":"stock","returnType":"bool","arguments":[{"type":"int","name":"weapon","decl":"int weapon","default":null}]},{"name":"TTT_ShowProgressbar","docStart":0,"docEnd":0,"docs":null,"kind":"stock","returnType":"void","arguments":[{"type":"int","name":"client","decl":"int client","default":null},{"type":"Handle","name":"percentageSync","decl":"Handle percentageSync","default":null},{"type":"Handle","name":"textSync","decl":"Handle textSync","default":null},{"type":"int","name":"startTime","decl":"int startTime","default":null},{"type":"int","name":"endTime","decl":"int endTime","default":null},{"type":"const char[]","name":"sMessage","decl":"const char[] sMessage","default":null}]},{"name":"TTT_GetRoundTimeLeft","docStart":0,"docEnd":0,"docs":null,"kind":"stock","returnType":"int","arguments":[]},{"name":"TTT_GetRoundTimeElapsed","docStart":0,"docEnd":0,"docs":null,"kind":"stock","returnType":"int","arguments":[]},{"name":"TTT_IsClientStuck","docStart":0,"docEnd":0,"docs":null,"kind":"stock","returnType":"bool","arguments":[{"type":"int","name":"client","decl":"int client","default":null}]},{"name":"FilterOnlyPlayers","docStart":0,"docEnd":0,"docs":null,"kind":"public","returnType":"bool","arguments":[{"type":"int","name":"entity","decl":"int entity","default":null},{"type":"int","name":"contentsMask","decl":"int contentsMask","default":null},{"type":"any","name":"data","decl":"any data","default":null}]},{"name":"TTT_HasClientKnife","docStart":0,"docEnd":0,"docs":null,"kind":"stock","returnType":"int","arguments":[{"type":"int","name":"client","decl":"int client","default":null}]},{"name":"TTT_HasClientWeapon","docStart":0,"docEnd":0,"docs":null,"kind":"stock","returnType":"int","arguments":[{"type":"int","name":"client","decl":"int client","default":null},{"type":"const char[]","name":"sWeapon","decl":"const char[] sWeapon","default":null}]},{"name":"TTT_LoadTranslations","docStart":0,"docEnd":0,"docs":null,"kind":"stock","returnType":"bool","arguments":[]},{"name":"TTT_CheckVersion","docStart":0,"docEnd":0,"docs":null,"kind":"stock","returnType":"bool","arguments":[{"type":"const char[]","name":"version","decl":"const char[] version","default":null},{"type":"int","name":"git","decl":"int git","default":null}]},{"name":"IsStringNumeric","docStart":0,"docEnd":0,"docs":null,"kind":"stock","returnType":"bool","arguments":[{"type":"const char[]","name":"str","decl":"const char[] str","default":null}]},{"name":"PrintCenterText2","docStart":0,"docEnd":0,"docs":null,"kind":"stock","returnType":"void","arguments":[{"type":"int","name":"client","decl":"int client","default":null},{"type":"const char[]","name":"title","decl":"const char[] title","default":null},{"type":"const char[]","name":"message","decl":"const char[] message","default":null}]}],"methodmaps":[],"enumstructs":[{"name":"Ragdolls","docStart":0,"docEnd":0,"docs":null,"methods":[],"fields":[{"name":"Ent","docStart":0,"docEnd":0,"docs":null,"type":"int"},{"name":"Victim","docStart":0,"docEnd":0,"docs":null,"type":"int"},{"name":"Attacker","docStart":0,"docEnd":0,"docs":null,"type":"int"},{"name":"VictimTeam","docStart":0,"docEnd":0,"docs":null,"type":"int"},{"name":"AttackerTeam","docStart":0,"docEnd":0,"docs":null,"type":"int"},{"name":"VictimName","docStart":0,"docEnd":0,"docs":null,"type":"char[]"},{"name":"AttackerName","docStart":0,"docEnd":0,"docs":null,"type":"char[]"},{"name":"WeaponUsed","docStart":0,"docEnd":0,"docs":null,"type":"char[32]"},{"name":"Scanned","docStart":0,"docEnd":0,"docs":null,"type":"bool"},{"name":"Found","docStart":0,"docEnd":0,"docs":null,"type":"bool"},{"name":"GameTime","docStart":0,"docEnd":0,"docs":null,"type":"float"}]}],"constants":[],"enums":[{"name":"KarmaUpdate","docStart":0,"docEnd":0,"docs":null,"entries":[{"name":"Karma_Add","docStart":0,"docEnd":0,"docs":null,"value":null},{"name":"Karma_Set","docStart":0,"docEnd":0,"docs":null,"value":null},{"name":"Karma_Subtract","docStart":0,"docEnd":0,"docs":null,"value":null}]},{"name":"RoundStatus","docStart":0,"docEnd":0,"docs":null,"entries":[{"name":"Round_Inactive","docStart":0,"docEnd":0,"docs":null,"value":"-1"},{"name":"Round_Warmup","docStart":0,"docEnd":0,"docs":null,"value":null},{"name":"Round_Active","docStart":0,"docEnd":0,"docs":null,"value":null},{"name":"Round_Ending","docStart":0,"docEnd":0,"docs":null,"value":null}]},{"name":"Collision_Group_t","docStart":0,"docEnd":0,"docs":null,"entries":[{"name":"COLLISION_GROUP_NONE","docStart":0,"docEnd":0,"docs":null,"value":"0"},{"name":"COLLISION_GROUP_DEBRIS","docStart":1073,"docEnd":1124,"docs":{"brief":"Collides with nothing but world and static stuff","tags":[{"tag":"","text":"Collides with nothing but world and static stuff"}]},"value":null},{"name":"COLLISION_GROUP_DEBRIS_TRIGGER","docStart":1162,"docEnd":1198,"docs":{"brief":"Same as debris, but hits triggers","tags":[{"tag":"","text":"Same as debris, but hits triggers"}]},"value":null},{"name":"COLLISION_GROUP_INTERACTIVE_DEBRIS","docStart":1240,"docEnd":1309,"docs":{"brief":"Collides with everything except other interactive debris or debris","tags":[{"tag":"","text":"Collides with everything except other interactive debris or debris"}]},"value":null},{"name":"COLLISION_GROUP_INTERACTIVE","docStart":1344,"docEnd":1407,"docs":{"brief":"Collides with everything except interactive debris or debris","tags":[{"tag":"","text":"Collides with everything except interactive debris or debris"}]},"value":null},{"name":"COLLISION_GROUP_PLAYER","docStart":0,"docEnd":0,"docs":null,"value":null},{"name":"COLLISION_GROUP_BREAKABLE_GLASS","docStart":0,"docEnd":0,"docs":null,"value":null},{"name":"COLLISION_GROUP_VEHICLE","docStart":0,"docEnd":0,"docs":null,"value":null},{"name":"COLLISION_GROUP_PLAYER_MOVEMENT","docStart":1544,"docEnd":1688,"docs":{"brief":"For HL2, same as Collision_Group_Player, for\nTF2, this filters out other players and CBaseObjects","tags":[{"tag":"","text":"For HL2, same as Collision_Group_Player, for\nTF2, this filters out other players and CBaseObjects"}]},"value":null},{"name":"COLLISION_GROUP_NPC","docStart":1717,"docEnd":1737,"docs":{"brief":"Generic NPC group","tags":[{"tag":"","text":"Generic NPC group"}]},"value":null},{"name":"COLLISION_GROUP_IN_VEHICLE","docStart":1772,"docEnd":1806,"docs":{"brief":"for any entity inside a vehicle","tags":[{"tag":"","text":"for any entity inside a vehicle"}]},"value":null},{"name":"COLLISION_GROUP_WEAPON","docStart":1838,"docEnd":1886,"docs":{"brief":"for any weapons that need collision detection","tags":[{"tag":"","text":"for any weapons that need collision detection"}]},"value":null},{"name":"COLLISION_GROUP_VEHICLE_CLIP","docStart":1922,"docEnd":1972,"docs":{"brief":"vehicle clip brush to restrict vehicle movement","tags":[{"tag":"","text":"vehicle clip brush to restrict vehicle movement"}]},"value":null},{"name":"COLLISION_GROUP_PROJECTILE","docStart":2007,"docEnd":2022,"docs":{"brief":"Projectiles!","tags":[{"tag":"","text":"Projectiles!"}]},"value":null},{"name":"COLLISION_GROUP_DOOR_BLOCKER","docStart":2058,"docEnd":2115,"docs":{"brief":"Blocks entities not permitted to get near moving doors","tags":[{"tag":"","text":"Blocks entities not permitted to get near moving doors"}]},"value":null},{"name":"COLLISION_GROUP_PASSABLE_DOOR","docStart":2152,"docEnd":2199,"docs":{"brief":"Doors that the player shouldn't collide with","tags":[{"tag":"","text":"Doors that the player shouldn't collide with"}]},"value":null},{"name":"COLLISION_GROUP_DISSOLVING","docStart":2234,"docEnd":2281,"docs":{"brief":"Things that are dissolving are in this group","tags":[{"tag":"","text":"Things that are dissolving are in this group"}]},"value":null},{"name":"COLLISION_GROUP_PUSHAWAY","docStart":2314,"docEnd":2371,"docs":{"brief":"Nonsolid on client and server, pushaway in player code","tags":[{"tag":"","text":"Nonsolid on client and server, pushaway in player code"}]},"value":null},{"name":"COLLISION_GROUP_NPC_ACTOR","docStart":2407,"docEnd":2452,"docs":{"brief":"Used so NPCs in scripts ignore the player.","tags":[{"tag":"","text":"Used so NPCs in scripts ignore the player."}]},"value":null},{"name":"COLLISION_GROUP_NPC_SCRIPTED","docStart":2488,"docEnd":2555,"docs":{"brief":"USed for NPCs in scripts that should not collide with each other","tags":[{"tag":"","text":"USed for NPCs in scripts that should not collide with each other"}]},"value":null},{"name":"LAST_SHARED_COLLISION_GROUP","docStart":0,"docEnd":0,"docs":null,"value":null}]},{"name":"SolidType_t","docStart":2816,"docEnd":3052,"docs":{"brief":"Solid type basically describes how the bounding volume of the object is represented\nNOTE: SOLID_BBOX MUST BE 2, and SOLID_VPHYSICS MUST BE 6\nNOTE: These numerical values are used in the FGD by the prop code (see prop_dynamic)","tags":[{"tag":"","text":"Solid type basically describes how the bounding volume of the object is represented\nNOTE: SOLID_BBOX MUST BE 2, and SOLID_VPHYSICS MUST BE 6\nNOTE: These numerical values are used in the FGD by the prop code (see prop_dynamic)"}]},"entries":[{"name":"SOLID_NONE","docStart":3097,"docEnd":3114,"docs":{"brief":"no solid model","tags":[{"tag":"","text":"no solid model"}]},"value":"0"},{"name":"SOLID_BSP","docStart":3137,"docEnd":3150,"docs":{"brief":"a BSP tree","tags":[{"tag":"","text":"a BSP tree"}]},"value":"1"},{"name":"SOLID_BBOX","docStart":3174,"docEnd":3184,"docs":{"brief":"an AABB","tags":[{"tag":"","text":"an AABB"}]},"value":"2"},{"name":"SOLID_OBB","docStart":3207,"docEnd":3238,"docs":{"brief":"an OBB (not implemented yet)","tags":[{"tag":"","text":"an OBB (not implemented yet)"}]},"value":"3"},{"name":"SOLID_OBB_YAW","docStart":3264,"docEnd":3310,"docs":{"brief":"an OBB, constrained so that it can only yaw","tags":[{"tag":"","text":"an OBB, constrained so that it can only yaw"}]},"value":"4"},{"name":"SOLID_CUSTOM","docStart":3335,"docEnd":3375,"docs":{"brief":"Always call into the entity for tests","tags":[{"tag":"","text":"Always call into the entity for tests"}]},"value":"5"},{"name":"SOLID_VPHYSICS","docStart":3402,"docEnd":3477,"docs":{"brief":"solid vphysics object, get vcollide from the model and collide with that","tags":[{"tag":"","text":"solid vphysics object, get vcollide from the model and collide with that"}]},"value":"6"},{"name":"SOLID_LAST","docStart":0,"docEnd":0,"docs":null,"value":null}]}],"typesets":[],"typedefs":[]}