{"functions":[{"name":"TTT_OnRoundStart_Pre","docStart":3738,"docEnd":3917,"docs":{"brief":"Called before players roles are picked/assigned.\nReturn Plugin_Handled or higher to prevent round start.\nYou could slay players here to force them to sit out.","tags":[{"tag":"","text":"Called before players roles are picked/assigned.\nReturn Plugin_Handled or higher to prevent round start.\nYou could slay players here to force them to sit out."}]},"kind":"forward","returnType":"Action","arguments":[]},{"name":"TTT_OnRoundStart","docStart":3961,"docEnd":4262,"docs":{"brief":"Called when the actual TTT round starts (after selection time).","tags":[{"tag":"","text":"Called when the actual TTT round starts (after selection time)."},{"tag":"param:roundid","text":"ID of the current round"},{"tag":"param:innocents","text":"Count of innocent players."},{"tag":"param:traitors","text":"Count of traitor players."},{"tag":"param:detective","text":"Count of detective players."}]},"kind":"forward","returnType":"void","arguments":[{"type":"int","name":"roundid","decl":"int roundid","default":null},{"type":"int","name":"innocents","decl":"int innocents","default":null},{"type":"int","name":"traitors","decl":"int traitors","default":null},{"type":"int","name":"detective","decl":"int detective","default":null}]},{"name":"TTT_OnRoundStartFailed","docStart":4355,"docEnd":4709,"docs":{"brief":"Called when round start is failed or prevented.","tags":[{"tag":"","text":"Called when round start is failed or prevented."},{"tag":"param:players","text":"The amount of players we have.\n-1 if this round was prevented by\nanother plugin."},{"tag":"param:requiredPlayers","text":"The amount of players we need."},{"tag":"param:detective","text":"The amount needed for detective."}]},"kind":"forward","returnType":"void","arguments":[{"type":"int","name":"players","decl":"int players","default":null},{"type":"int","name":"requiredPlayers","decl":"int requiredPlayers","default":null},{"type":"int","name":"detective","decl":"int detective","default":null}]},{"name":"TTT_OnRoundEnd","docStart":4800,"docEnd":5055,"docs":{"brief":"Called when the actual TTT round ended.","tags":[{"tag":"","text":"Called when the actual TTT round ended."},{"tag":"param:winner","text":"The Winning Team."},{"tag":"param:array","text":"Round logs as handle (if you want ArrayList instead of Handle use this: `ArrayList aLogs = view_as<ArrayList>(array);Â´)"}]},"kind":"forward","returnType":"void","arguments":[{"type":"int","name":"winner","decl":"int winner","default":null},{"type":"Handle","name":"array","decl":"Handle array","default":null}]},{"name":"TTT_OnClientGetRole","docStart":5115,"docEnd":5250,"docs":{"brief":"Called when a client's role is assigned.","tags":[{"tag":"","text":"Called when a client's role is assigned."},{"tag":"param:client","text":"Client index."},{"tag":"param:role","text":"Role."}]},"kind":"forward","returnType":"void","arguments":[{"type":"int","name":"client","decl":"int client","default":null},{"type":"int","name":"role","decl":"int role","default":null}]},{"name":"TTT_OnTakeDamage","docStart":5311,"docEnd":5633,"docs":{"brief":"Called when a client take damage","tags":[{"tag":"","text":"Called when a client take damage"},{"tag":"param:victim","text":"Person who take damage."},{"tag":"param:attacker","text":"Attacker."},{"tag":"param:damage","text":"How much damage"},{"tag":"param:weapon","text":"Weapon index"},{"tag":"param:badAction","text":"If damage was a bad action (example: Innocent damaged Detective)"}]},"kind":"forward","returnType":"void","arguments":[{"type":"int","name":"victim","decl":"int victim","default":null},{"type":"int","name":"attacker","decl":"int attacker","default":null},{"type":"float","name":"damage","decl":"float damage","default":null},{"type":"int","name":"weapon","decl":"int weapon","default":null},{"type":"bool","name":"badAction","decl":"bool badAction","default":null}]},{"name":"TTT_OnClientDeath","docStart":5737,"docEnd":5976,"docs":{"brief":"Called when a client dies, after Karma process","tags":[{"tag":"","text":"Called when a client dies, after Karma process"},{"tag":"param:victim","text":"Person who died."},{"tag":"param:attacker","text":"Attacker."},{"tag":"param:badAction","text":"If kill was a bad action (example: Innocent killed Detective)"}]},"kind":"forward","returnType":"void","arguments":[{"type":"int","name":"victim","decl":"int victim","default":null},{"type":"int","name":"attacker","decl":"int attacker","default":null},{"type":"bool","name":"badAction","decl":"bool badAction","default":null}]},{"name":"TTT_OnClientDeathPre","docStart":6055,"docEnd":6204,"docs":{"brief":"Called when a client dies, before Karma process","tags":[{"tag":"","text":"Called when a client dies, before Karma process"},{"tag":"param:victim","text":"Person who died."},{"tag":"param:attacker","text":"Attacker."}]},"kind":"forward","returnType":"Action","arguments":[{"type":"int","name":"victim","decl":"int victim","default":null},{"type":"int","name":"attacker","decl":"int attacker","default":null}]},{"name":"TTT_OnBodyFound","docStart":6272,"docEnd":6722,"docs":{"brief":"Called when a body is found.\nUse must use TTT_GetEntityRefRagdoll(client, entityref) to get the enum struct.","tags":[{"tag":"","text":"Called when a body is found.\nUse must use TTT_GetEntityRefRagdoll(client, entityref) to get the enum struct."},{"tag":"param:client","text":"The client who identified the body."},{"tag":"param:victim","text":"The client whom the body belongs to. (-1 for invalid index)"},{"tag":"param:entityref","text":"The entity reference to find the correct ragdoll"},{"tag":"param:silentID","text":"True if body was silenced id and false if normal inspect"}]},"kind":"forward","returnType":"void","arguments":[{"type":"int","name":"client","decl":"int client","default":null},{"type":"int","name":"victim","decl":"int victim","default":null},{"type":"int","name":"entityref","decl":"int entityref","default":null},{"type":"bool","name":"silentID","decl":"bool silentID","default":null}]},{"name":"TTT_OnRulesMenu","docStart":6811,"docEnd":7048,"docs":{"brief":"Called before we create rules menu.\nIf want to change it use \"return Plugin_Changed;\"","tags":[{"tag":"","text":"Called before we create rules menu.\nIf want to change it use \"return Plugin_Changed;\""},{"tag":"param:client","text":"The client index."},{"tag":"param:show","text":"True - Menu will be opened, False - Menu will not open"}]},"kind":"forward","returnType":"Action","arguments":[{"type":"int","name":"client","decl":"int client","default":null},{"type":"bool&","name":"show","decl":"bool& show","default":null}]},{"name":"TTT_OnDetectiveMenu","docStart":7109,"docEnd":7351,"docs":{"brief":"Called before we create detectives menu.\nIf want to change it use \"return Plugin_Changed;\"","tags":[{"tag":"","text":"Called before we create detectives menu.\nIf want to change it use \"return Plugin_Changed;\""},{"tag":"param:client","text":"The client index."},{"tag":"param:show","text":"True - Menu will be opened, False - Menu will not open"}]},"kind":"forward","returnType":"Action","arguments":[{"type":"int","name":"client","decl":"int client","default":null},{"type":"bool&","name":"show","decl":"bool& show","default":null}]},{"name":"TTT_OnBodyCheck","docStart":7416,"docEnd":7697,"docs":{"brief":"Called before a body will be scanned.\nUse must use TTT_GetEntityRefRagdoll(client, entityref) to get the enum struct.","tags":[{"tag":"","text":"Called before a body will be scanned.\nUse must use TTT_GetEntityRefRagdoll(client, entityref) to get the enum struct."},{"tag":"param:client","text":"The client who scanned the body."},{"tag":"param:entityref","text":"The entity reference to find the correct ragdoll"}]},"kind":"forward","returnType":"Action","arguments":[{"type":"int","name":"client","decl":"int client","default":null},{"type":"int","name":"entityref","decl":"int entityref","default":null}]},{"name":"TTT_OnModelUpdate","docStart":7761,"docEnd":7967,"docs":{"brief":"Called on updated player models\n(if ttt_update_client_model is true)","tags":[{"tag":"","text":"Called on updated player models\n(if ttt_update_client_model is true)"},{"tag":"param:client","text":"The client index after updated model"},{"tag":"param:model","text":"Path of current model"}]},"kind":"forward","returnType":"void","arguments":[{"type":"int","name":"client","decl":"int client","default":null},{"type":"const char[]","name":"model","decl":"const char[] model","default":null}]},{"name":"TTT_OnPlayerRespawn","docStart":8036,"docEnd":8137,"docs":{"brief":"Called after TTT_RespawnPlayer execute","tags":[{"tag":"","text":"Called after TTT_RespawnPlayer execute"},{"tag":"param:client","text":"The client index"}]},"kind":"forward","returnType":"void","arguments":[{"type":"int","name":"client","decl":"int client","default":null}]},{"name":"TTT_OnButtonPress","docStart":0,"docEnd":0,"docs":null,"kind":"forward","returnType":"int","arguments":[{"type":"int","name":"client","decl":"int client","default":null},{"type":"int","name":"button","decl":"int button","default":null}]},{"name":"TTT_OnButtonRelease","docStart":0,"docEnd":0,"docs":null,"kind":"forward","returnType":"int","arguments":[{"type":"int","name":"client","decl":"int client","default":null},{"type":"int","name":"button","decl":"int button","default":null}]},{"name":"TTT_OnPlayerDeath","docStart":8304,"docEnd":8440,"docs":{"brief":"Called before RDM will be handled.","tags":[{"tag":"","text":"Called before RDM will be handled."},{"tag":"param:victim","text":"Person who died."},{"tag":"param:attacker","text":"Attacker."}]},"kind":"forward","returnType":"Action","arguments":[{"type":"int","name":"victim","decl":"int victim","default":null},{"type":"int","name":"attacker","decl":"int attacker","default":null}]},{"name":"TTT_OnPreKarmaUpdate","docStart":8505,"docEnd":8714,"docs":{"brief":"Called before Karma has been updated on a client.","tags":[{"tag":"","text":"Called before Karma has been updated on a client."},{"tag":"param:client","text":"Client index."},{"tag":"param:type","text":"Type of update. (Enum above)"},{"tag":"param:karma","text":"Amount of Karma"}]},"kind":"forward","returnType":"Action","arguments":[{"type":"int","name":"client","decl":"int client","default":null},{"type":"KarmaUpdate","name":"type","decl":"KarmaUpdate type","default":null},{"type":"int","name":"karma","decl":"int karma","default":null}]},{"name":"TTT_OnKarmaUpdate","docStart":8798,"docEnd":9010,"docs":{"brief":"Called once Karma has been updated on a client.","tags":[{"tag":"","text":"Called once Karma has been updated on a client."},{"tag":"param:client","text":"Client index."},{"tag":"param:type","text":"Type of update. (Enum above)"},{"tag":"param:karma","text":"Amount of Karma."}]},"kind":"forward","returnType":"void","arguments":[{"type":"int","name":"client","decl":"int client","default":null},{"type":"KarmaUpdate","name":"type","decl":"KarmaUpdate type","default":null},{"type":"int","name":"karma","decl":"int karma","default":null}]},{"name":"TTT_OnCheckCommandAccess","docStart":9088,"docEnd":9345,"docs":{"brief":"This forward will be called when a client hasn't access to command (TTT_CheckCommandAccess)\nIt's possible to give a client access to an not accessible command\nYou must use 'return Plugin_Changed;' if you want to change the bool 'access'","tags":[{"tag":"","text":"This forward will be called when a client hasn't access to command (TTT_CheckCommandAccess)\nIt's possible to give a client access to an not accessible command\nYou must use 'return Plugin_Changed;' if you want to change the bool 'access'"}]},"kind":"forward","returnType":"bool","arguments":[{"type":"int","name":"client","decl":"int client","default":null},{"type":"const char[]","name":"command","decl":"const char[] command","default":null},{"type":"const char[]","name":"flags","decl":"const char[] flags","default":null},{"type":"bool","name":"access","decl":"bool access","default":null}]},{"name":"TTT_OnVersionReceive","docStart":9456,"docEnd":9753,"docs":{"brief":"With this forward you get the latest version from csgottt.com(/version.php) as int\nNOTE: ttt_version_check must be \"1\" and SteamWorks ( https://forums.alliedmods.net/showthread.php?t=229556 )\nmust be installed!","tags":[{"tag":"","text":"With this forward you get the latest version from csgottt.com(/version.php) as int\nNOTE: ttt_version_check must be \"1\" and SteamWorks ( https://forums.alliedmods.net/showthread.php?t=229556 )\nmust be installed!"},{"tag":"param:version","text":"Latest TTT Version as int"}]},"kind":"forward","returnType":"void","arguments":[{"type":"int","name":"version","decl":"int version","default":null}]},{"name":"TTT_OnRoleSelection","docStart":9806,"docEnd":10192,"docs":{"brief":"This forward is called PRIOR to the role selection done from the core TTT.\nThe purpose of this forward is to be able to override the original Role selector\nand write your own for potential custom modes.","tags":[{"tag":"","text":"This forward is called PRIOR to the role selection done from the core TTT.\nThe purpose of this forward is to be able to override the original Role selector\nand write your own for potential custom modes."},{"tag":"param:traitors","text":"Amount of traitors"},{"tag":"param:detectives","text":"Amount of detectives"},{"tag":"param:innocents","text":"Amount of innocents"}]},"kind":"forward","returnType":"Action","arguments":[{"type":"int&","name":"traitors","decl":"int& traitors","default":null},{"type":"int&","name":"detectives","decl":"int& detectives","default":null},{"type":"int&","name":"innocents","decl":"int& innocents","default":null}]},{"name":"TTT_IsRoundActive","docStart":0,"docEnd":0,"docs":null,"kind":"native","returnType":"bool","arguments":[]},{"name":"TTT_GetClientRole","docStart":10450,"docEnd":10535,"docs":{"brief":"Retrieve a client's role.","tags":[{"tag":"","text":"Retrieve a client's role."},{"tag":"param:client","text":"Client index."}]},"kind":"native","returnType":"int","arguments":[{"type":"int","name":"client","decl":"int client","default":null}]},{"name":"TTT_GetClientKarma","docStart":10582,"docEnd":10668,"docs":{"brief":"Retrieve a client's karma.","tags":[{"tag":"","text":"Retrieve a client's karma."},{"tag":"param:client","text":"Client index."}]},"kind":"native","returnType":"int","arguments":[{"type":"int","name":"client","decl":"int client","default":null},{"type":"bool","name":"publicKarma","decl":"bool publicKarma","default":"true"}]},{"name":"TTT_GetClientRagdoll","docStart":10741,"docEnd":10897,"docs":{"brief":"Retrieve the Radgoll Info.","tags":[{"tag":"","text":"Retrieve the Radgoll Info."},{"tag":"param:client","text":"The victims index."},{"tag":"param:radgoll","text":"The array to save the ragoll infos."}]},"kind":"native","returnType":"bool","arguments":[{"type":"int","name":"victim","decl":"int victim","default":null},{"type":"any[]","name":"ragdoll","decl":"any[] ragdoll","default":null}]},{"name":"TTT_GetEntityRefRagdoll","docStart":10963,"docEnd":11122,"docs":{"brief":"Retrieve the Radgoll Info.","tags":[{"tag":"","text":"Retrieve the Radgoll Info."},{"tag":"param:entityref","text":"The entity reference."},{"tag":"param:radgoll","text":"The array to save the ragoll infos."}]},"kind":"native","returnType":"bool","arguments":[{"type":"int","name":"entityref","decl":"int entityref","default":null},{"type":"any[]","name":"ragdoll","decl":"any[] ragdoll","default":null}]},{"name":"TTT_GetClientByRagdollID","docStart":11194,"docEnd":11331,"docs":{"brief":"Retrieve the client index.","tags":[{"tag":"","text":"Retrieve the client index."},{"tag":"param:ragdoll","text":"The ragdoll index."},{"tag":"return","text":"The client index"}]},"kind":"native","returnType":"int","arguments":[{"type":"int","name":"ragdoll","decl":"int ragdoll","default":null}]},{"name":"TTT_PushRagdoll","docStart":11386,"docEnd":11596,"docs":{"brief":"Push a ragdoll to the global Ragdoll array (will get cleaned on Round Start).","tags":[{"tag":"","text":"Push a ragdoll to the global Ragdoll array (will get cleaned on Round Start)."},{"tag":"param:radgoll","text":"The enum struct to save as Ragdoll."},{"tag":"param:size","text":"The enum struct size."}]},"kind":"native","returnType":"int","arguments":[{"type":"any[]","name":"ragdoll","decl":"any[] ragdoll","default":null},{"type":"int","name":"size","decl":"int size","default":null}]},{"name":"TTT_SetRagdoll","docStart":11654,"docEnd":11864,"docs":{"brief":"Sets a ragdoll to the global Ragdoll array (will get cleaned on Round Start).","tags":[{"tag":"","text":"Sets a ragdoll to the global Ragdoll array (will get cleaned on Round Start)."},{"tag":"param:radgoll","text":"The enum struct to save as Ragdoll."},{"tag":"param:size","text":"The enum struct size."}]},"kind":"native","returnType":"bool","arguments":[{"type":"any[]","name":"ragdoll","decl":"any[] ragdoll","default":null},{"type":"int","name":"size","decl":"int size","default":null}]},{"name":"TTT_SetClientRole","docStart":11922,"docEnd":12045,"docs":{"brief":"Set a client's role.","tags":[{"tag":"","text":"Set a client's role."},{"tag":"param:client","text":"Client index."},{"tag":"param:role","text":"The new role."}]},"kind":"native","returnType":"int","arguments":[{"type":"int","name":"client","decl":"int client","default":null},{"type":"int","name":"role","decl":"int role","default":null}]},{"name":"TTT_SetClientKarma","docStart":12102,"docEnd":12240,"docs":{"brief":"Sets the karma of a client.","tags":[{"tag":"","text":"Sets the karma of a client."},{"tag":"param:client","text":"Client index."},{"tag":"param:karma","text":"Karma for the client."}]},"kind":"native","returnType":"int","arguments":[{"type":"int","name":"client","decl":"int client","default":null},{"type":"int","name":"karma","decl":"int karma","default":null},{"type":"bool","name":"force","decl":"bool force","default":null}]},{"name":"TTT_AddClientKarma","docStart":12311,"docEnd":12469,"docs":{"brief":"Add karma to a client (currentKarma+karma).","tags":[{"tag":"","text":"Add karma to a client (currentKarma+karma)."},{"tag":"param:client","text":"Client index."},{"tag":"param:karma","text":"Karma that will be added."}]},"kind":"native","returnType":"int","arguments":[{"type":"int","name":"client","decl":"int client","default":null},{"type":"int","name":"karma","decl":"int karma","default":null},{"type":"bool","name":"force","decl":"bool force","default":null}]},{"name":"TTT_RemoveClientKarma","docStart":12540,"docEnd":12694,"docs":{"brief":"Remove karma from a client (currentKarma-karma).","tags":[{"tag":"","text":"Remove karma from a client (currentKarma-karma)."},{"tag":"param:client","text":"Client index."},{"tag":"param:karma","text":"Karma to remove."}]},"kind":"native","returnType":"int","arguments":[{"type":"int","name":"client","decl":"int client","default":null},{"type":"int","name":"karma","decl":"int karma","default":null},{"type":"bool","name":"force","decl":"bool force","default":null}]},{"name":"TTT_WasBodyFound","docStart":12768,"docEnd":12882,"docs":{"brief":"Determins whether a player's body was found (if dead).","tags":[{"tag":"","text":"Determins whether a player's body was found (if dead)."},{"tag":"param:client","text":"Client index."}]},"kind":"native","returnType":"bool","arguments":[{"type":"int","name":"client","decl":"int client","default":null}]},{"name":"TTT_WasBodyScanned","docStart":12929,"docEnd":13045,"docs":{"brief":"Determins whether a player's body was scanned (if dead).","tags":[{"tag":"","text":"Determins whether a player's body was scanned (if dead)."},{"tag":"param:client","text":"Client index."}]},"kind":"native","returnType":"bool","arguments":[{"type":"int","name":"client","decl":"int client","default":null}]},{"name":"TTT_GetFoundStatus","docStart":13094,"docEnd":13230,"docs":{"brief":"Determines if a player is dead and has had their body found.","tags":[{"tag":"","text":"Determines if a player is dead and has had their body found."},{"tag":"param:client","text":"The client index to lookup."}]},"kind":"native","returnType":"bool","arguments":[{"type":"int","name":"client","decl":"int client","default":null}]},{"name":"TTT_SetFoundStatus","docStart":13279,"docEnd":13466,"docs":{"brief":"Set whether a player appears dead and body found.","tags":[{"tag":"","text":"Set whether a player appears dead and body found."},{"tag":"param:client","text":"The client index to change."},{"tag":"param:found","text":"True if found & dead, false else."}]},"kind":"native","returnType":"void","arguments":[{"type":"int","name":"client","decl":"int client","default":null},{"type":"bool","name":"found","decl":"bool found","default":null}]},{"name":"TTT_LogString","docStart":13527,"docEnd":13640,"docs":{"brief":"Log a String to the ingame Log.","tags":[{"tag":"","text":"Log a String to the ingame Log."},{"tag":"param:string","text":"The message that should get logged."}]},"kind":"native","returnType":"void","arguments":[{"type":"const char[]","name":"format","decl":"const char[] format","default":null},{"type":"any...","name":"...","decl":"any...","default":null}]},{"name":"TTT_ForceTraitor","docStart":13702,"docEnd":13926,"docs":{"brief":"Force a player to be traitor next round. (If there are enough Traitors)","tags":[{"tag":"","text":"Force a player to be traitor next round. (If there are enough Traitors)"},{"tag":"param:client","text":"The client index to change."},{"tag":"return","text":"False if the client's role already forced for the next round."}]},"kind":"native","returnType":"bool","arguments":[{"type":"int","name":"client","decl":"int client","default":null}]},{"name":"TTT_ForceDetective","docStart":13973,"docEnd":14204,"docs":{"brief":"Force a player to be detective next round. (If there are enough Detectives)","tags":[{"tag":"","text":"Force a player to be detective next round. (If there are enough Detectives)"},{"tag":"param:client","text":"The client index to change."},{"tag":"return","text":"False if the client's role is already forced for the next round."}]},"kind":"native","returnType":"bool","arguments":[{"type":"int","name":"client","decl":"int client","default":null}]},{"name":"TTT_AddRoundSlays","docStart":14253,"docEnd":14558,"docs":{"brief":"NO DESCRIPTION","tags":[{"tag":"","text":"NO DESCRIPTION"},{"tag":"param:client","text":"The client index."},{"tag":"param:rounds","text":"The amount of rounds to add."},{"tag":"param:force","text":"Begin directly if client is alive."},{"tag":"return","text":"Returns the amount of rounds, otherwise the client index is invalid"}]},"kind":"native","returnType":"int","arguments":[{"type":"int","name":"client","decl":"int client","default":null},{"type":"int","name":"rounds","decl":"int rounds","default":null},{"type":"bool","name":"force","decl":"bool force","default":null}]},{"name":"TTT_AddRoundSlaysByID","docStart":14629,"docEnd":14931,"docs":{"brief":"NO DESCRIPTION","tags":[{"tag":"","text":"NO DESCRIPTION"},{"tag":"param:id","text":"The player id."},{"tag":"param:rounds","text":"The amount of rounds to add."},{"tag":"param:force","text":"Begin directly if client is alive."},{"tag":"return","text":"Returns the amount of rounds, otherwise the client index is invalid"}]},"kind":"native","returnType":"void","arguments":[{"type":"int","name":"id","decl":"int id","default":null},{"type":"int","name":"rounds","decl":"int rounds","default":null},{"type":"bool","name":"force","decl":"bool force","default":null}]},{"name":"TTT_SetRoundSlays","docStart":15003,"docEnd":15381,"docs":{"brief":"NO DESCRIPTION","tags":[{"tag":"","text":"NO DESCRIPTION"},{"tag":"param:client","text":"The client index."},{"tag":"param:rounds","text":"The amount of rounds."},{"tag":"param:force","text":"Begin directly if client is alive (Default: false).\nThis works now in a inactive round, when force is true"},{"tag":"return","text":"Returns the amount of rounds, otherwise the client index is invalid"}]},"kind":"native","returnType":"int","arguments":[{"type":"int","name":"client","decl":"int client","default":null},{"type":"int","name":"rounds","decl":"int rounds","default":null},{"type":"bool","name":"force","decl":"bool force","default":"false"}]},{"name":"TTT_ClientOpenRules","docStart":15460,"docEnd":15554,"docs":{"brief":"Open rules menu for the client","tags":[{"tag":"","text":"Open rules menu for the client"},{"tag":"param:client","text":"The client index."}]},"kind":"native","returnType":"void","arguments":[{"type":"int","name":"client","decl":"int client","default":null}]},{"name":"TTT_GetRoundTime","docStart":15604,"docEnd":15786,"docs":{"brief":"Returns the time of a active rounds (-1 for inactive round/failed to start)","tags":[{"tag":"","text":"Returns the time of a active rounds (-1 for inactive round/failed to start)"},{"tag":"param:type","text":"Which type is needed? (0 - Time, 1 - Minutes, 2 - Seconds)"}]},"kind":"native","returnType":"void","arguments":[{"type":"int","name":"type","decl":"int type","default":null}]},{"name":"TTT_CheckCommandAccess","docStart":15831,"docEnd":17014,"docs":{"brief":"Returns whether a client has access to a given command string.  The string\ncan be any override string, as overrides can be independent of\ncommands.  This feature essentially allows you to create custom\nflags using the override system.\n\nNote: If cvar is not set/empty, it will always return false","tags":[{"tag":"","text":"Returns whether a client has access to a given command string.  The string\ncan be any override string, as overrides can be independent of\ncommands.  This feature essentially allows you to create custom\nflags using the override system.\n\nNote: If cvar is not set/empty, it will always return false"},{"tag":"param:client","text":"Client index."},{"tag":"param:command","text":"Command name.  If the command is not found, the default\nflags are used."},{"tag":"param:cvar","text":"Flag convar to use as a default, if the command or override\nis not found."},{"tag":"param:override_only","text":"If true, SourceMod will not attempt to find a matching\ncommand, and it will only use the default flags specified.\nOtherwise, SourceMod will ignore the default flags if\nthere is a matching admin command."},{"tag":"return","text":"True if the client has access, false otherwise.\n\nTHIS TEXT WAS COPIED FROM HERE: https://github.com/alliedmodders/sourcemod/blob/6c7e29cbdbe1fe17982a4531d839be65116abca2/plugins/include/console.inc#L479"}]},"kind":"native","returnType":"bool","arguments":[{"type":"int","name":"client","decl":"int client","default":null},{"type":"const char[]","name":"command","decl":"const char[] command","default":null},{"type":"ConVar","name":"cvar","decl":"ConVar cvar","default":null},{"type":"bool","name":"override_only","decl":"bool override_only","default":"false"}]},{"name":"TTT_RespawnPlayer","docStart":17130,"docEnd":17244,"docs":{"brief":"Respawns a player on their body location.","tags":[{"tag":"","text":"Respawns a player on their body location."},{"tag":"param:client","text":"Client Index\n"}]},"kind":"native","returnType":"void","arguments":[{"type":"int","name":"client","decl":"int client","default":null}]},{"name":"TTT_RespawnPlayerRandom","docStart":17292,"docEnd":17417,"docs":{"brief":"Respawns a player randomly as per CS_RespawnPlayer()","tags":[{"tag":"","text":"Respawns a player randomly as per CS_RespawnPlayer()"},{"tag":"param:client","text":"Client index\n"}]},"kind":"native","returnType":"void","arguments":[{"type":"int","name":"client","decl":"int client","default":null}]},{"name":"TTT_GetRoundTimestamp","docStart":17472,"docEnd":17633,"docs":{"brief":"Returns the timestamp where \"round_prestart\" was executed.","tags":[{"tag":"","text":"Returns the timestamp where \"round_prestart\" was executed."},{"tag":"return","text":"Returns the timestamp where \"round_prestart\" was executed."}]},"kind":"native","returnType":"int","arguments":[]},{"name":"TTT_TerminateRound","docStart":17674,"docEnd":17941,"docs":{"brief":"Forces round to end\nWhy was this added? To prevent mistakes with blockhook (it doesn't work blockhook = true)","tags":[{"tag":"","text":"Forces round to end\nWhy was this added? To prevent mistakes with blockhook (it doesn't work blockhook = true)"},{"tag":"param:delay","text":"Time (in seconds) to delay before new round starts"},{"tag":"param:reason","text":"Reason for the round ending\n"}]},"kind":"native","returnType":"void","arguments":[{"type":"float","name":"delay","decl":"float delay","default":null},{"type":"CSRoundEndReason","name":"reason","decl":"CSRoundEndReason reason","default":null}]},{"name":"TTT_DisableRounds","docStart":18016,"docEnd":18351,"docs":{"brief":"Disable the next TTT round. It has no effect if it's already set.\nIf you want to close the disabled round:\n- set status to false\n- terminate roundd with TTT_TerminateRound","tags":[{"tag":"","text":"Disable the next TTT round. It has no effect if it's already set.\nIf you want to close the disabled round:\n- set status to false\n- terminate roundd with TTT_TerminateRound"},{"tag":"param:status","text":"If true, next round will be disabled.\nIf false, next round will be normal."}]},"kind":"native","returnType":"bool","arguments":[{"type":"bool","name":"status","decl":"bool status","default":null}]},{"name":"TTT_GetRoundStatus","docStart":18400,"docEnd":18456,"docs":{"brief":"Returns the current status of the round\n","tags":[{"tag":"","text":"Returns the current status of the round\n"}]},"kind":"native","returnType":"RoundStatus","arguments":[]},{"name":"TTT_IsClientReady","docStart":18502,"docEnd":18555,"docs":{"brief":"Check if the client is ready to play\n","tags":[{"tag":"","text":"Check if the client is ready to play\n"}]},"kind":"native","returnType":"bool","arguments":[{"type":"int","name":"client","decl":"int client","default":null}]},{"name":"TTT_OnRoundSlay","docStart":18603,"docEnd":18757,"docs":{"brief":"Called after a player was round slayed.","tags":[{"tag":"","text":"Called after a player was round slayed."},{"tag":"param:client","text":"The client index."},{"tag":"param:remaining","text":"Amount of rounds left"}]},"kind":"forward","returnType":"int","arguments":[{"type":"int","name":"client","decl":"int client","default":null},{"type":"int","name":"remaining","decl":"int remaining","default":null}]},{"name":"TTT_GetRoundID","docStart":0,"docEnd":0,"docs":null,"kind":"native","returnType":"int","arguments":[]},{"name":"TTT_GetVersion","docStart":18850,"docEnd":19143,"docs":{"brief":"With this native you get the latest version from csgottt.com(/version_new.php) as int\nNOTE: ttt_version_check must be \"1\" and SteamWorks ( https://forums.alliedmods.net/showthread.php?t=229556 )\nmust be installed!","tags":[{"tag":"","text":"With this native you get the latest version from csgottt.com(/version_new.php) as int\nNOTE: ttt_version_check must be \"1\" and SteamWorks ( https://forums.alliedmods.net/showthread.php?t=229556 )\nmust be installed!"},{"tag":"return","text":"Latest TTT Version as Int"}]},"kind":"native","returnType":"int","arguments":[]},{"name":"TTT_GetPluginVersion","docStart":19177,"docEnd":19293,"docs":{"brief":"With this native you get the plugin version as int","tags":[{"tag":"","text":"With this native you get the plugin version as int"},{"tag":"return","text":"Latest TTT Version as Int"}]},"kind":"native","returnType":"int","arguments":[]},{"name":"TTT_GetPlayerID","docStart":19333,"docEnd":19489,"docs":{"brief":"Returns the player id for the specific player","tags":[{"tag":"","text":"Returns the player id for the specific player"},{"tag":"param:client","text":"The client index"},{"tag":"return","text":"The player id"}]},"kind":"native","returnType":"int","arguments":[{"type":"int","name":"client","decl":"int client","default":null}]},{"name":"TTT_GetClientOfPlayerID","docStart":19534,"docEnd":19696,"docs":{"brief":"Returns the client index for the specific player id","tags":[{"tag":"","text":"Returns the client index for the specific player id"},{"tag":"param:id","text":"The player id"},{"tag":"return","text":"The client index"}]},"kind":"native","returnType":"int","arguments":[{"type":"int","name":"id","decl":"int id","default":null}]},{"name":"TTT_GetRoleNameByID","docStart":0,"docEnd":0,"docs":null,"kind":"stock","returnType":"void","arguments":[{"type":"int","name":"role","decl":"int role","default":null},{"type":"char[]","name":"name","decl":"char[] name","default":null},{"type":"int","name":"length","decl":"int length","default":"24"}]},{"name":"TTT_GetRoleNameByShortName","docStart":0,"docEnd":0,"docs":null,"kind":"stock","returnType":"void","arguments":[{"type":"const char[]","name":"shortName","decl":"const char[] shortName","default":null},{"type":"char[]","name":"name","decl":"char[] name","default":null},{"type":"int","name":"length","decl":"int length","default":"24"}]},{"name":"TTT_GetRoleIDByName","docStart":0,"docEnd":0,"docs":null,"kind":"stock","returnType":"int","arguments":[{"type":"const char[]","name":"name","decl":"const char[] name","default":null}]},{"name":"TTT_GetRoleIDByShortName","docStart":0,"docEnd":0,"docs":null,"kind":"stock","returnType":"int","arguments":[{"type":"const char[]","name":"shortName","decl":"const char[] shortName","default":null}]},{"name":"TTT_GetShortRoleNameByID","docStart":0,"docEnd":0,"docs":null,"kind":"stock","returnType":"void","arguments":[{"type":"int","name":"role","decl":"int role","default":null},{"type":"char[]","name":"shortName","decl":"char[] shortName","default":null},{"type":"int","name":"length","decl":"int length","default":"24"}]},{"name":"TTT_GetShortRoleNameByName","docStart":0,"docEnd":0,"docs":null,"kind":"stock","returnType":"void","arguments":[{"type":"const char[]","name":"name","decl":"const char[] name","default":null},{"type":"char[]","name":"shortName","decl":"char[] shortName","default":null},{"type":"int","name":"length","decl":"int length","default":"24"}]},{"name":"TTT_IsPlayerAlive","docStart":22469,"docEnd":22645,"docs":{"brief":"Returns if the client is alive or dead.","tags":[{"tag":"","text":"Returns if the client is alive or dead."},{"tag":"param:client","text":"Player's index."},{"tag":"return","text":"True if the client is alive, false otherwise."}]},"kind":"native","returnType":"bool","arguments":[{"type":"int","name":"client","decl":"int client","default":null}]},{"name":"TTT_IsLoaded","docStart":22693,"docEnd":22748,"docs":{"brief":"Check if TTT plugin is loaded and running.","tags":[{"tag":"","text":"Check if TTT plugin is loaded and running."}]},"kind":"stock","returnType":"bool","arguments":[]},{"name":"TTT_IsClientValid","docStart":22819,"docEnd":22865,"docs":{"brief":"Check if a client index is valid.","tags":[{"tag":"","text":"Check if a client index is valid."}]},"kind":"stock","returnType":"bool","arguments":[{"type":"int","name":"client","decl":"int client","default":null}]},{"name":"TTT_HasCVarFlags","docStart":0,"docEnd":0,"docs":null,"kind":"stock","returnType":"bool","arguments":[{"type":"int","name":"client","decl":"int client","default":null},{"type":"ConVar","name":"cFlags","decl":"ConVar cFlags","default":null}]},{"name":"TTT_HasFlags","docStart":0,"docEnd":0,"docs":null,"kind":"stock","returnType":"bool","arguments":[{"type":"int","name":"client","decl":"int client","default":null},{"type":"const char[]","name":"flags","decl":"const char[] flags","default":null}]},{"name":"tHasFlags","docStart":0,"docEnd":0,"docs":null,"kind":"stock","returnType":"bool","arguments":[{"type":"int","name":"client","decl":"int client","default":null},{"type":"AdminFlag[24]","name":"flags","decl":"AdminFlag flags[24]","default":null}]},{"name":"TTT_RemoveWeaponByClassname","docStart":0,"docEnd":0,"docs":null,"kind":"stock","returnType":"bool","arguments":[{"type":"int","name":"client","decl":"int client","default":null},{"type":"const char[]","name":"classname","decl":"const char[] classname","default":null},{"type":"int","name":"slot","decl":"int slot","default":null}]},{"name":"TTT_SafeRemoveWeapon","docStart":0,"docEnd":0,"docs":null,"kind":"stock","returnType":"bool","arguments":[{"type":"int","name":"client","decl":"int client","default":null},{"type":"int","name":"weapon","decl":"int weapon","default":null},{"type":"int","name":"slot","decl":"int slot","default":null}]},{"name":"TTT_ShowOverlayToClient","docStart":0,"docEnd":0,"docs":null,"kind":"stock","returnType":"void","arguments":[{"type":"int","name":"client","decl":"int client","default":null},{"type":"const char[]","name":"overlaypath","decl":"const char[] overlaypath","default":null}]},{"name":"TTT_ShowOverlayToAll","docStart":0,"docEnd":0,"docs":null,"kind":"stock","returnType":"void","arguments":[{"type":"const char[]","name":"overlaypath","decl":"const char[] overlaypath","default":null}]},{"name":"TTT_GetRandomPlayer","docStart":0,"docEnd":0,"docs":null,"kind":"stock","returnType":"int","arguments":[{"type":"bool","name":"alive","decl":"bool alive","default":"true"},{"type":"int","name":"targetRole","decl":"int targetRole","default":"-1"}]},{"name":"TTT_IsWorldDamage","docStart":0,"docEnd":0,"docs":null,"kind":"stock","returnType":"bool","arguments":[{"type":"int","name":"iAttacker","decl":"int iAttacker","default":null},{"type":"int","name":"damagetype","decl":"int damagetype","default":null}]},{"name":"TTT_ClearTimer","docStart":0,"docEnd":0,"docs":null,"kind":"stock","returnType":"void","arguments":[{"type":"Handle&","name":"timer","decl":"Handle &timer","default":null},{"type":"bool","name":"autoClose","decl":"bool autoClose","default":"false"}]},{"name":"TTT_IsWarmUp","docStart":0,"docEnd":0,"docs":null,"kind":"stock","returnType":"bool","arguments":[]},{"name":"TTT_IsValidRole","docStart":0,"docEnd":0,"docs":null,"kind":"stock","returnType":"int","arguments":[{"type":"int","name":"client","decl":"int client","default":null},{"type":"int","name":"role","decl":"int role","default":null}]},{"name":"TTT_IsPrimaryWeapon","docStart":0,"docEnd":0,"docs":null,"kind":"stock","returnType":"bool","arguments":[{"type":"int","name":"weapon","decl":"int weapon","default":null}]},{"name":"TTT_ShowProgressbar","docStart":0,"docEnd":0,"docs":null,"kind":"stock","returnType":"void","arguments":[{"type":"int","name":"client","decl":"int client","default":null},{"type":"Handle","name":"percentageSync","decl":"Handle percentageSync","default":null},{"type":"Handle","name":"textSync","decl":"Handle textSync","default":null},{"type":"int","name":"startTime","decl":"int startTime","default":null},{"type":"int","name":"endTime","decl":"int endTime","default":null},{"type":"const char[]","name":"sMessage","decl":"const char[] sMessage","default":null}]},{"name":"TTT_GetRoundTimeLeft","docStart":0,"docEnd":0,"docs":null,"kind":"stock","returnType":"int","arguments":[]},{"name":"TTT_GetRoundTimeElapsed","docStart":0,"docEnd":0,"docs":null,"kind":"stock","returnType":"int","arguments":[]},{"name":"TTT_IsClientStuck","docStart":0,"docEnd":0,"docs":null,"kind":"stock","returnType":"bool","arguments":[{"type":"int","name":"client","decl":"int client","default":null}]},{"name":"FilterOnlyPlayers","docStart":0,"docEnd":0,"docs":null,"kind":"public","returnType":"bool","arguments":[{"type":"int","name":"entity","decl":"int entity","default":null},{"type":"int","name":"contentsMask","decl":"int contentsMask","default":null},{"type":"any","name":"data","decl":"any data","default":null}]},{"name":"TTT_HasClientKnife","docStart":0,"docEnd":0,"docs":null,"kind":"stock","returnType":"int","arguments":[{"type":"int","name":"client","decl":"int client","default":null}]},{"name":"TTT_HasClientTaser","docStart":0,"docEnd":0,"docs":null,"kind":"stock","returnType":"int","arguments":[{"type":"int","name":"client","decl":"int client","default":null}]},{"name":"TTT_HasClientMelee","docStart":0,"docEnd":0,"docs":null,"kind":"stock","returnType":"int","arguments":[{"type":"int","name":"client","decl":"int client","default":null}]},{"name":"TTT_HasClientWeapon","docStart":0,"docEnd":0,"docs":null,"kind":"stock","returnType":"int","arguments":[{"type":"int","name":"client","decl":"int client","default":null},{"type":"const char[]","name":"sWeapon","decl":"const char[] sWeapon","default":null}]},{"name":"TTT_RemoveMeleeWeapons","docStart":0,"docEnd":0,"docs":null,"kind":"stock","returnType":"void","arguments":[{"type":"int","name":"client","decl":"int client","default":null}]},{"name":"TTT_LoadTranslations","docStart":0,"docEnd":0,"docs":null,"kind":"stock","returnType":"bool","arguments":[]},{"name":"TTT_IsTargetInSight","docStart":36545,"docEnd":36652,"docs":{"brief":"Based on this snippet:\nhttps://forums.alliedmods.net/showpost.php?p=973411&postcount=4","tags":[{"tag":"","text":"Based on this snippet:\nhttps://forums.alliedmods.net/showpost.php?p=973411&postcount=4"}]},"kind":"stock","returnType":"bool","arguments":[{"type":"int","name":"client","decl":"int client","default":null},{"type":"int","name":"target","decl":"int target","default":null},{"type":"float","name":"fMaxDistance","decl":"float fMaxDistance","default":"0.000000"},{"type":"float","name":"fThreshold","decl":"float fThreshold","default":"0.730000"},{"type":"int","name":"flags","decl":"int flags","default":"PARTITION_NON_STATIC_EDICTS"},{"type":"RayType","name":"type","decl":"RayType type","default":"RayType_Infinite"}]},{"name":"TraceASDF","docStart":0,"docEnd":0,"docs":null,"kind":"public","returnType":"bool","arguments":[{"type":"int","name":"entity","decl":"int entity","default":null},{"type":"int","name":"mask","decl":"int mask","default":null},{"type":"any","name":"data","decl":"any data","default":null}]},{"name":"PrintCenterText2","docStart":0,"docEnd":0,"docs":null,"kind":"stock","returnType":"void","arguments":[{"type":"int","name":"client","decl":"int client","default":null},{"type":"const char[]","name":"title","decl":"const char[] title","default":null},{"type":"const char[]","name":"message","decl":"const char[] message","default":null}]},{"name":"PrintCenterText2All","docStart":0,"docEnd":0,"docs":null,"kind":"stock","returnType":"void","arguments":[{"type":"const char[]","name":"title","decl":"const char[] title","default":null},{"type":"const char[]","name":"message","decl":"const char[] message","default":null},{"type":"any...","name":"...","decl":"any...","default":null}]},{"name":"TTT_ClientValidRole","docStart":0,"docEnd":0,"docs":null,"kind":"stock","returnType":"bool","arguments":[{"type":"int","name":"client","decl":"int client","default":null}]},{"name":"TTT_CheckVersion","docStart":0,"docEnd":0,"docs":null,"kind":"stock","returnType":"bool","arguments":[{"type":"const char[]","name":"git","decl":"const char[] git","default":null},{"type":"int","name":"version","decl":"int version","default":null}]},{"name":"IsStringNumeric","docStart":0,"docEnd":0,"docs":null,"kind":"stock","returnType":"bool","arguments":[{"type":"const char[]","name":"str","decl":"const char[] str","default":null}]}],"methodmaps":[],"enumstructs":[{"name":"Ragdoll","docStart":0,"docEnd":0,"docs":null,"methods":[],"fields":[{"name":"EntityRef","docStart":0,"docEnd":0,"docs":null,"type":"int"},{"name":"Victim","docStart":0,"docEnd":0,"docs":null,"type":"int"},{"name":"Attacker","docStart":0,"docEnd":0,"docs":null,"type":"int"},{"name":"VictimRole","docStart":0,"docEnd":0,"docs":null,"type":"int"},{"name":"AttackerRole","docStart":0,"docEnd":0,"docs":null,"type":"int"},{"name":"Scanned","docStart":0,"docEnd":0,"docs":null,"type":"bool"},{"name":"Found","docStart":0,"docEnd":0,"docs":null,"type":"bool"},{"name":"Explode","docStart":0,"docEnd":0,"docs":null,"type":"bool"},{"name":"GameTime","docStart":0,"docEnd":0,"docs":null,"type":"float"},{"name":"VictimName","docStart":0,"docEnd":0,"docs":null,"type":"char[MAX_NAME_LENGTH]"},{"name":"VictimSteam2","docStart":0,"docEnd":0,"docs":null,"type":"char[24]"},{"name":"VictimSteam3","docStart":0,"docEnd":0,"docs":null,"type":"char[24]"},{"name":"VictimSteamID64","docStart":0,"docEnd":0,"docs":null,"type":"char[24]"},{"name":"AttackerName","docStart":0,"docEnd":0,"docs":null,"type":"char[MAX_NAME_LENGTH]"},{"name":"AttackerSteam2","docStart":0,"docEnd":0,"docs":null,"type":"char[24]"},{"name":"AttackerSteam3","docStart":0,"docEnd":0,"docs":null,"type":"char[24]"},{"name":"AttackerSteamID64","docStart":0,"docEnd":0,"docs":null,"type":"char[24]"},{"name":"Weaponused","docStart":0,"docEnd":0,"docs":null,"type":"char[32]"}]}],"constants":[],"enums":[{"name":"KarmaUpdate","docStart":0,"docEnd":0,"docs":null,"entries":[{"name":"Karma_Add","docStart":0,"docEnd":0,"docs":null,"value":null},{"name":"Karma_Set","docStart":0,"docEnd":0,"docs":null,"value":null},{"name":"Karma_Subtract","docStart":0,"docEnd":0,"docs":null,"value":null}]},{"name":"RoundStatus","docStart":0,"docEnd":0,"docs":null,"entries":[{"name":"Round_Inactive","docStart":0,"docEnd":0,"docs":null,"value":"-1"},{"name":"Round_Warmup","docStart":0,"docEnd":0,"docs":null,"value":null},{"name":"Round_Selection","docStart":0,"docEnd":0,"docs":null,"value":null},{"name":"Round_Active","docStart":0,"docEnd":0,"docs":null,"value":null},{"name":"Round_Ending","docStart":0,"docEnd":0,"docs":null,"value":null},{"name":"Round_Ended","docStart":0,"docEnd":0,"docs":null,"value":null}]},{"name":"Collision_Group_t","docStart":0,"docEnd":0,"docs":null,"entries":[{"name":"COLLISION_GROUP_NONE","docStart":0,"docEnd":0,"docs":null,"value":"0"},{"name":"COLLISION_GROUP_DEBRIS","docStart":1309,"docEnd":1360,"docs":{"brief":"Collides with nothing but world and static stuff","tags":[{"tag":"","text":"Collides with nothing but world and static stuff"}]},"value":null},{"name":"COLLISION_GROUP_DEBRIS_TRIGGER","docStart":1398,"docEnd":1434,"docs":{"brief":"Same as debris, but hits triggers","tags":[{"tag":"","text":"Same as debris, but hits triggers"}]},"value":null},{"name":"COLLISION_GROUP_INTERACTIVE_DEBRIS","docStart":1476,"docEnd":1545,"docs":{"brief":"Collides with everything except other interactive debris or debris","tags":[{"tag":"","text":"Collides with everything except other interactive debris or debris"}]},"value":null},{"name":"COLLISION_GROUP_INTERACTIVE","docStart":1580,"docEnd":1643,"docs":{"brief":"Collides with everything except interactive debris or debris","tags":[{"tag":"","text":"Collides with everything except interactive debris or debris"}]},"value":null},{"name":"COLLISION_GROUP_PLAYER","docStart":0,"docEnd":0,"docs":null,"value":null},{"name":"COLLISION_GROUP_BREAKABLE_GLASS","docStart":0,"docEnd":0,"docs":null,"value":null},{"name":"COLLISION_GROUP_VEHICLE","docStart":0,"docEnd":0,"docs":null,"value":null},{"name":"COLLISION_GROUP_PLAYER_MOVEMENT","docStart":1780,"docEnd":1924,"docs":{"brief":"For HL2, same as Collision_Group_Player, for\nTF2, this filters out other players and CBaseObjects","tags":[{"tag":"","text":"For HL2, same as Collision_Group_Player, for\nTF2, this filters out other players and CBaseObjects"}]},"value":null},{"name":"COLLISION_GROUP_NPC","docStart":1953,"docEnd":1973,"docs":{"brief":"Generic NPC group","tags":[{"tag":"","text":"Generic NPC group"}]},"value":null},{"name":"COLLISION_GROUP_IN_VEHICLE","docStart":2008,"docEnd":2042,"docs":{"brief":"for any entity inside a vehicle","tags":[{"tag":"","text":"for any entity inside a vehicle"}]},"value":null},{"name":"COLLISION_GROUP_WEAPON","docStart":2074,"docEnd":2122,"docs":{"brief":"for any weapons that need collision detection","tags":[{"tag":"","text":"for any weapons that need collision detection"}]},"value":null},{"name":"COLLISION_GROUP_VEHICLE_CLIP","docStart":2158,"docEnd":2208,"docs":{"brief":"vehicle clip brush to restrict vehicle movement","tags":[{"tag":"","text":"vehicle clip brush to restrict vehicle movement"}]},"value":null},{"name":"COLLISION_GROUP_PROJECTILE","docStart":2243,"docEnd":2258,"docs":{"brief":"Projectiles!","tags":[{"tag":"","text":"Projectiles!"}]},"value":null},{"name":"COLLISION_GROUP_DOOR_BLOCKER","docStart":2294,"docEnd":2351,"docs":{"brief":"Blocks entities not permitted to get near moving doors","tags":[{"tag":"","text":"Blocks entities not permitted to get near moving doors"}]},"value":null},{"name":"COLLISION_GROUP_PASSABLE_DOOR","docStart":2388,"docEnd":2435,"docs":{"brief":"Doors that the player shouldn't collide with","tags":[{"tag":"","text":"Doors that the player shouldn't collide with"}]},"value":null},{"name":"COLLISION_GROUP_DISSOLVING","docStart":2470,"docEnd":2517,"docs":{"brief":"Things that are dissolving are in this group","tags":[{"tag":"","text":"Things that are dissolving are in this group"}]},"value":null},{"name":"COLLISION_GROUP_PUSHAWAY","docStart":2550,"docEnd":2607,"docs":{"brief":"Nonsolid on client and server, pushaway in player code","tags":[{"tag":"","text":"Nonsolid on client and server, pushaway in player code"}]},"value":null},{"name":"COLLISION_GROUP_NPC_ACTOR","docStart":2643,"docEnd":2688,"docs":{"brief":"Used so NPCs in scripts ignore the player.","tags":[{"tag":"","text":"Used so NPCs in scripts ignore the player."}]},"value":null},{"name":"COLLISION_GROUP_NPC_SCRIPTED","docStart":2724,"docEnd":2791,"docs":{"brief":"USed for NPCs in scripts that should not collide with each other","tags":[{"tag":"","text":"USed for NPCs in scripts that should not collide with each other"}]},"value":null},{"name":"LAST_SHARED_COLLISION_GROUP","docStart":0,"docEnd":0,"docs":null,"value":null}]},{"name":"SolidType_t","docStart":3052,"docEnd":3288,"docs":{"brief":"Solid type basically describes how the bounding volume of the object is represented\nNOTE: SOLID_BBOX MUST BE 2, and SOLID_VPHYSICS MUST BE 6\nNOTE: These numerical values are used in the FGD by the prop code (see prop_dynamic)","tags":[{"tag":"","text":"Solid type basically describes how the bounding volume of the object is represented\nNOTE: SOLID_BBOX MUST BE 2, and SOLID_VPHYSICS MUST BE 6\nNOTE: These numerical values are used in the FGD by the prop code (see prop_dynamic)"}]},"entries":[{"name":"SOLID_NONE","docStart":3333,"docEnd":3350,"docs":{"brief":"no solid model","tags":[{"tag":"","text":"no solid model"}]},"value":"0"},{"name":"SOLID_BSP","docStart":3373,"docEnd":3386,"docs":{"brief":"a BSP tree","tags":[{"tag":"","text":"a BSP tree"}]},"value":"1"},{"name":"SOLID_BBOX","docStart":3410,"docEnd":3420,"docs":{"brief":"an AABB","tags":[{"tag":"","text":"an AABB"}]},"value":"2"},{"name":"SOLID_OBB","docStart":3443,"docEnd":3474,"docs":{"brief":"an OBB (not implemented yet)","tags":[{"tag":"","text":"an OBB (not implemented yet)"}]},"value":"3"},{"name":"SOLID_OBB_YAW","docStart":3500,"docEnd":3546,"docs":{"brief":"an OBB, constrained so that it can only yaw","tags":[{"tag":"","text":"an OBB, constrained so that it can only yaw"}]},"value":"4"},{"name":"SOLID_CUSTOM","docStart":3571,"docEnd":3611,"docs":{"brief":"Always call into the entity for tests","tags":[{"tag":"","text":"Always call into the entity for tests"}]},"value":"5"},{"name":"SOLID_VPHYSICS","docStart":3638,"docEnd":3713,"docs":{"brief":"solid vphysics object, get vcollide from the model and collide with that","tags":[{"tag":"","text":"solid vphysics object, get vcollide from the model and collide with that"}]},"value":"6"},{"name":"SOLID_LAST","docStart":0,"docEnd":0,"docs":null,"value":null}]}],"typesets":[],"typedefs":[]}