{"functions":[],"methodmaps":[{"name":"JSON_Object","docStart":0,"docEnd":0,"docs":null,"parent":"StringMap","methods":[{"name":"HasKey","docStart":2013,"docEnd":2183,"docs":{"brief":"Checks whether the object has a key.","tags":[{"tag":"","text":"Checks whether the object has a key."},{"tag":"param:key","text":"Key to check existence of."},{"tag":"returns","text":"True if the key exists, false otherwise."}]},"kind":"stock","returnType":"bool","arguments":[{"type":"const char[]","name":"key","decl":"const char[] key","default":null}]},{"name":"GetMetadata","docStart":0,"docEnd":0,"docs":null,"kind":"stock","returnType":"any","arguments":[{"type":"const char[]","name":"key","decl":"const char[] key","default":null},{"type":"JSONMetaInfo","name":"meta","decl":"JSONMetaInfo meta","default":null},{"type":"any","name":"default_value","decl":"any default_value","default":null}]},{"name":"GetKeyType","docStart":3412,"docEnd":3632,"docs":{"brief":"Gets the cell type stored at a key.","tags":[{"tag":"","text":"Gets the cell type stored at a key."},{"tag":"param:key","text":"Key to get value type for."},{"tag":"returns","text":"Value type for key provided,\nor JSON_Type_Invalid if it does not exist."}]},"kind":"stock","returnType":"JSONCellType","arguments":[{"type":"const char[]","name":"key","decl":"const char[] key","default":null}]},{"name":"GetKeyLength","docStart":3821,"docEnd":4061,"docs":{"brief":"Gets the length of the string stored at a key.","tags":[{"tag":"","text":"Gets the length of the string stored at a key."},{"tag":"param:key","text":"Key to get string length for."},{"tag":"returns","text":"Length of string at key provided,\nor -1 if it is not a string/does not exist."}]},"kind":"stock","returnType":"int","arguments":[{"type":"const char[]","name":"key","decl":"const char[] key","default":null}]},{"name":"GetKeyHidden","docStart":4199,"docEnd":4387,"docs":{"brief":"Gets whether the key should be hidden from encoding.","tags":[{"tag":"","text":"Gets whether the key should be hidden from encoding."},{"tag":"param:key","text":"Key to get hidden state for."},{"tag":"returns","text":"Whether or not the key should be hidden."}]},"kind":"stock","returnType":"bool","arguments":[{"type":"const char[]","name":"key","decl":"const char[] key","default":null}]},{"name":"SetMetadata","docStart":0,"docEnd":0,"docs":null,"kind":"stock","returnType":"bool","arguments":[{"type":"const char[]","name":"key","decl":"const char[] key","default":null},{"type":"JSONMetaInfo","name":"meta","decl":"JSONMetaInfo meta","default":null},{"type":"any","name":"value","decl":"any value","default":null}]},{"name":"RemoveMetadata","docStart":0,"docEnd":0,"docs":null,"kind":"stock","returnType":"bool","arguments":[{"type":"const char[]","name":"key","decl":"const char[] key","default":null},{"type":"JSONMetaInfo","name":"meta","decl":"JSONMetaInfo meta","default":null}]},{"name":"SetKeyType","docStart":5301,"docEnd":5503,"docs":{"brief":"Sets the cell type stored at a key.","tags":[{"tag":"","text":"Sets the cell type stored at a key."},{"tag":"param:key","text":"Key to set value type for."},{"tag":"param:type","text":"Type to set key to."},{"tag":"returns","text":"True on success, false otherwise."}]},"kind":"stock","returnType":"bool","arguments":[{"type":"const char[]","name":"key","decl":"const char[] key","default":null},{"type":"JSONCellType","name":"type","decl":"JSONCellType type","default":null}]},{"name":"SetKeyLength","docStart":5645,"docEnd":5878,"docs":{"brief":"Sets the length of the string stored at a key.","tags":[{"tag":"","text":"Sets the length of the string stored at a key."},{"tag":"param:key","text":"Key to set string length for."},{"tag":"param:length","text":"Length to set string to."},{"tag":"returns","text":"True on success, false otherwise."}]},"kind":"stock","returnType":"bool","arguments":[{"type":"const char[]","name":"key","decl":"const char[] key","default":null},{"type":"int","name":"length","decl":"int length","default":null}]},{"name":"SetKeyHidden","docStart":6019,"docEnd":6272,"docs":{"brief":"Sets whether the key should be hidden from encoding.","tags":[{"tag":"","text":"Sets whether the key should be hidden from encoding."},{"tag":"param:key","text":"Key to set hidden state for."},{"tag":"param:hidden","text":"Wheter or not the key should be hidden."},{"tag":"returns","text":"True on success, false otherwise."}]},"kind":"stock","returnType":"bool","arguments":[{"type":"const char[]","name":"key","decl":"const char[] key","default":null},{"type":"bool","name":"hidden","decl":"bool hidden","default":null}]},{"name":"GetInt","docStart":6564,"docEnd":6804,"docs":{"brief":"Retrieves the int stored at a key.","tags":[{"tag":"","text":"Retrieves the int stored at a key."},{"tag":"param:key","text":"Key to retrieve int value for."},{"tag":"param:default_value","text":"Value to return if the key does not exist."},{"tag":"returns","text":"Value stored at key."}]},"kind":"stock","returnType":"int","arguments":[{"type":"const char[]","name":"key","decl":"const char[] key","default":null},{"type":"int","name":"default_value","decl":"int default_value","default":"-1"}]},{"name":"GetFloat","docStart":6971,"docEnd":7215,"docs":{"brief":"Retrieves the float stored at a key.","tags":[{"tag":"","text":"Retrieves the float stored at a key."},{"tag":"param:key","text":"Key to retrieve float value for."},{"tag":"param:default_value","text":"Value to return if the key does not exist."},{"tag":"returns","text":"Value stored at key."}]},"kind":"stock","returnType":"float","arguments":[{"type":"const char[]","name":"key","decl":"const char[] key","default":null},{"type":"float","name":"default_value","decl":"float default_value","default":"-1.000000"}]},{"name":"GetBool","docStart":7392,"docEnd":7634,"docs":{"brief":"Retrieves the bool stored at a key.","tags":[{"tag":"","text":"Retrieves the bool stored at a key."},{"tag":"param:key","text":"Key to retrieve bool value for."},{"tag":"param:default_value","text":"Value to return if the key does not exist."},{"tag":"returns","text":"Value stored at key."}]},"kind":"stock","returnType":"bool","arguments":[{"type":"const char[]","name":"key","decl":"const char[] key","default":null},{"type":"bool","name":"default_value","decl":"bool default_value","default":"false"}]},{"name":"GetObject","docStart":7808,"docEnd":8059,"docs":{"brief":"Retrieves the JSON object stored at a key.","tags":[{"tag":"","text":"Retrieves the JSON object stored at a key."},{"tag":"param:key","text":"Key to retrieve object value for."},{"tag":"param:default_value","text":"Value to return if the key does not exist."},{"tag":"returns","text":"Value stored at key."}]},"kind":"stock","returnType":"JSON_Object","arguments":[{"type":"const char[]","name":"key","decl":"const char[] key","default":null},{"type":"JSON_Object","name":"default_value","decl":"JSON_Object default_value","default":"null"}]},{"name":"SetString","docStart":8318,"docEnd":8524,"docs":{"brief":"Sets the string stored at a key.","tags":[{"tag":"","text":"Sets the string stored at a key."},{"tag":"param:key","text":"Key to set to string value."},{"tag":"param:value","text":"Value to set."},{"tag":"returns","text":"True on success, false otherwise."}]},"kind":"stock","returnType":"bool","arguments":[{"type":"const char[]","name":"key","decl":"const char[] key","default":null},{"type":"const char[]","name":"value","decl":"const char[] value","default":null}]},{"name":"SetInt","docStart":8762,"docEnd":8962,"docs":{"brief":"Sets the int stored at a key.","tags":[{"tag":"","text":"Sets the int stored at a key."},{"tag":"param:key","text":"Key to set to int value."},{"tag":"param:value","text":"Value to set."},{"tag":"returns","text":"True on success, false otherwise."}]},"kind":"stock","returnType":"bool","arguments":[{"type":"const char[]","name":"key","decl":"const char[] key","default":null},{"type":"int","name":"value","decl":"int value","default":null}]},{"name":"SetFloat","docStart":9125,"docEnd":9329,"docs":{"brief":"Sets the float stored at a key.","tags":[{"tag":"","text":"Sets the float stored at a key."},{"tag":"param:key","text":"Key to set to float value."},{"tag":"param:value","text":"Value to set."},{"tag":"returns","text":"True on success, false otherwise."}]},"kind":"stock","returnType":"bool","arguments":[{"type":"const char[]","name":"key","decl":"const char[] key","default":null},{"type":"float","name":"value","decl":"float value","default":null}]},{"name":"SetBool","docStart":9498,"docEnd":9700,"docs":{"brief":"Sets the bool stored at a key.","tags":[{"tag":"","text":"Sets the bool stored at a key."},{"tag":"param:key","text":"Key to set to bool value."},{"tag":"param:value","text":"Value to set."},{"tag":"returns","text":"True on success, false otherwise."}]},"kind":"stock","returnType":"bool","arguments":[{"type":"const char[]","name":"key","decl":"const char[] key","default":null},{"type":"bool","name":"value","decl":"bool value","default":null}]},{"name":"SetObject","docStart":9866,"docEnd":10077,"docs":{"brief":"Sets the JSON object stored at a key.","tags":[{"tag":"","text":"Sets the JSON object stored at a key."},{"tag":"param:key","text":"Key to set to object value."},{"tag":"param:value","text":"Value to set."},{"tag":"returns","text":"True on success, false otherwise."}]},"kind":"stock","returnType":"bool","arguments":[{"type":"const char[]","name":"key","decl":"const char[] key","default":null},{"type":"JSON_Object","name":"value","decl":"JSON_Object value","default":null}]},{"name":"Remove","docStart":10307,"docEnd":10496,"docs":{"brief":"Removes an item from the object by key.","tags":[{"tag":"","text":"Removes an item from the object by key."},{"tag":"param:key","text":"Key of object to remove."},{"tag":"returns","text":"True on success, false if the value was never set."}]},"kind":"stock","returnType":"bool","arguments":[{"type":"const char[]","name":"key","decl":"const char[] key","default":null}]},{"name":"JSON_Object","docStart":10796,"docEnd":10887,"docs":{"brief":"Creates a new JSON_Object.","tags":[{"tag":"","text":"Creates a new JSON_Object."},{"tag":"returns","text":"A new JSON_Object."}]},"kind":"stock","returnType":"JSON_Object","arguments":[]},{"name":"Encode","docStart":10981,"docEnd":11117,"docs":{"brief":"Calls the json_encode method, replacing the 'obj' parameter\nwith this instance.","tags":[{"tag":"","text":"Calls the json_encode method, replacing the 'obj' parameter\nwith this instance."},{"tag":"see","text":"json_encode"}]},"kind":"stock","returnType":"void","arguments":[{"type":"char[]","name":"output","decl":"char[] output","default":null},{"type":"int","name":"max_size","decl":"int max_size","default":null},{"type":"int","name":"options","decl":"int options","default":"JSON_NONE"},{"type":"int","name":"depth","decl":"int depth","default":"0"}]},{"name":"Merge","docStart":11326,"docEnd":11458,"docs":{"brief":"Calls the json_merge method, replacing the 'to' parameter\nith this instance.","tags":[{"tag":"","text":"Calls the json_merge method, replacing the 'to' parameter\nith this instance."},{"tag":"see","text":"json_merge"}]},"kind":"stock","returnType":"bool","arguments":[{"type":"JSON_Object","name":"from","decl":"JSON_Object from","default":null},{"type":"int","name":"options","decl":"int options","default":"JSON_MERGE_REPLACE"}]},{"name":"ShallowCopy","docStart":11598,"docEnd":11746,"docs":{"brief":"Calls the json_copy_shallow method, replacing the 'obj' parameter\nwith this instance.","tags":[{"tag":"","text":"Calls the json_copy_shallow method, replacing the 'obj' parameter\nwith this instance."},{"tag":"see","text":"json_copy_shallow"}]},"kind":"stock","returnType":"JSON_Object","arguments":[]},{"name":"DeepCopy","docStart":11841,"docEnd":11983,"docs":{"brief":"Calls the json_copy_deep method, replacing the 'obj' parameter\nwith this instance.","tags":[{"tag":"","text":"Calls the json_copy_deep method, replacing the 'obj' parameter\nwith this instance."},{"tag":"see","text":"json_copy_deep"}]},"kind":"stock","returnType":"JSON_Object","arguments":[]},{"name":"Cleanup","docStart":12072,"docEnd":12210,"docs":{"brief":"Calls the json_cleanup method, replacing the 'obj' parameter\nwith this instance.","tags":[{"tag":"","text":"Calls the json_cleanup method, replacing the 'obj' parameter\nwith this instance."},{"tag":"see","text":"json_cleanup"}]},"kind":"stock","returnType":"void","arguments":[]}],"properties":[{"name":"Super","docStart":1795,"docEnd":1880,"docs":{"brief":"Views the instance as its superclass to access overridden methods.","tags":[{"tag":"","text":"Views the instance as its superclass to access overridden methods."}]},"type":"StringMap","getter":true,"setter":false},{"name":"IsArray","docStart":2404,"docEnd":2462,"docs":{"brief":"Whether the current object is an array.","tags":[{"tag":"","text":"Whether the current object is an array."}]},"type":"bool","getter":true,"setter":false},{"name":"Length","docStart":2597,"docEnd":2671,"docs":{"brief":"The number of keys in the object (including meta-keys).","tags":[{"tag":"","text":"The number of keys in the object (including meta-keys)."}]},"type":"int","getter":true,"setter":false}]}],"enumstructs":[],"constants":[],"enums":[],"typesets":[],"typedefs":[]}