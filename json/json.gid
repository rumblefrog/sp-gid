{"functions":[{"name":"json_encode","docStart":1807,"docEnd":2190,"docs":{"brief":"Encodes a JSON instance into its string representation.","tags":[{"tag":"","text":"Encodes a JSON instance into its string representation."},{"tag":"param:obj","text":"Object to encode."},{"tag":"param:output","text":"String buffer to store output."},{"tag":"param:max_size","text":"Maximum size of string buffer."},{"tag":"param:options","text":"Bitwise combination of JSON_ENCODE_* options.\n[default: JSON_NONE]"},{"tag":"param:depth","text":"The current depth of the encoder. [default: 0]"}]},"kind":"stock","returnType":"void","arguments":[{"type":"JSON_Object","name":"obj","decl":"JSON_Object obj","default":null},{"type":"char[]","name":"output","decl":"char[] output","default":null},{"type":"int","name":"max_size","decl":"int max_size","default":null},{"type":"int","name":"options","decl":"int options","default":"JSON_NONE"},{"type":"int","name":"depth","decl":"int depth","default":"0"}]},{"name":"json_decode","docStart":7648,"docEnd":8246,"docs":{"brief":"Decodes a JSON string into a JSON instance.","tags":[{"tag":"","text":"Decodes a JSON string into a JSON instance."},{"tag":"param:buffer","text":"Buffer to decode."},{"tag":"param:options","text":"Bitwise combination of JSON_DECODE_* options.\n[default: JSON_NONE]"},{"tag":"param:pos","text":"Current position of the decoder as bytes\noffset into the buffer."},{"tag":"param:depth","text":"Current nested depth of the decoder."},{"tag":"returns","text":"JSON instance or null if decoding failed becase\nthe buffer didn't contain valid JSON."},{"tag":"error","text":"If the buffer does not contain valid JSON,\nan error will be thrown."}]},"kind":"stock","returnType":"JSON_Object","arguments":[{"type":"const char[]","name":"buffer","decl":"const char[] buffer","default":null},{"type":"int","name":"options","decl":"int options","default":"JSON_NONE"},{"type":"int&","name":"pos","decl":"int& pos","default":"0"},{"type":"int","name":"depth","decl":"int depth","default":"0"}]},{"name":"json_merge","docStart":17701,"docEnd":18426,"docs":{"brief":"Merges the entries from the second object to the first,\noptionally replacing existing entries with the same key.","tags":[{"tag":"","text":"Merges the entries from the second object to the first,\noptionally replacing existing entries with the same key."},{"tag":"param:to","text":"Object to merge on to."},{"tag":"param:from","text":"Object to merge entries from."},{"tag":"param:options","text":"Bitwise combination of JSON_MERGE_* options.\n[default: JSON_MERGE_REPLACE]"},{"tag":"returns","text":"True on success, false otherwise."},{"tag":"error","text":"If the objects are not the same structure type\nas one another, an error will be thrown.\nFor example, an object cannot be reliably merged over an\narray and vice versa. Only array over array and\nobject over object merging is supported."}]},"kind":"stock","returnType":"bool","arguments":[{"type":"JSON_Object","name":"to","decl":"JSON_Object to","default":null},{"type":"JSON_Object","name":"from","decl":"JSON_Object from","default":null},{"type":"int","name":"options","decl":"int options","default":"JSON_MERGE_REPLACE"}]},{"name":"json_copy_shallow","docStart":22298,"docEnd":22447,"docs":{"brief":"Creates a shallow copy of the specified object.","tags":[{"tag":"","text":"Creates a shallow copy of the specified object."},{"tag":"param:obj","text":"Object to copy."},{"tag":"returns","text":"A shallow copy of the specified object."}]},"kind":"stock","returnType":"JSON_Object","arguments":[{"type":"JSON_Object","name":"obj","decl":"JSON_Object obj","default":null}]},{"name":"json_copy_deep","docStart":22664,"docEnd":22807,"docs":{"brief":"Creates a deep copy of the specified object.","tags":[{"tag":"","text":"Creates a deep copy of the specified object."},{"tag":"param:obj","text":"Object to copy."},{"tag":"returns","text":"A deep copy of the specified object."}]},"kind":"stock","returnType":"JSON_Object","arguments":[{"type":"JSON_Object","name":"obj","decl":"JSON_Object obj","default":null}]},{"name":"json_cleanup","docStart":23627,"docEnd":23759,"docs":{"brief":"Recursively cleans up a JSON instance and any JSON instances stored within.","tags":[{"tag":"","text":"Recursively cleans up a JSON instance and any JSON instances stored within."},{"tag":"param:obj","text":"JSON instance to clean up."}]},"kind":"stock","returnType":"void","arguments":[{"type":"JSON_Object","name":"obj","decl":"JSON_Object obj","default":null}]},{"name":"json_cleanup_and_delete","docStart":24617,"docEnd":24775,"docs":{"brief":"Cleans up and deletes an object, ensuring all resources are freed.\nAlso sets the passed variable to null.","tags":[{"tag":"","text":"Cleans up and deletes an object, ensuring all resources are freed.\nAlso sets the passed variable to null."},{"tag":"param:obj","text":"Object to clean up."}]},"kind":"stock","returnType":"void","arguments":[{"type":"JSON_Object&","name":"obj","decl":"JSON_Object &obj","default":null}]}],"methodmaps":[],"enumstructs":[],"constants":[],"enums":[],"typesets":[],"typedefs":[]}