{"functions":[{"name":"json_encode","docStart":1871,"docEnd":2263,"docs":{"brief":"Encodes a JSON instance into its string representation.","tags":[{"tag":"","text":"Encodes a JSON instance into its string representation."},{"tag":"param:obj","text":"Object to encode."},{"tag":"param:output","text":"String buffer to store output."},{"tag":"param:max_size","text":"Maximum size of string buffer."},{"tag":"param:pretty_print","text":"Should the output be pretty printed (newlines and spaces)? [default: false]"},{"tag":"param:depth","text":"The current depth of the encoder. [default: 0]"}]},"kind":"stock","returnType":"void","arguments":[{"type":"JSON_Object","name":"obj","decl":"JSON_Object obj","default":null},{"type":"char[]","name":"output","decl":"char[] output","default":null},{"type":"int","name":"max_size","decl":"int max_size","default":null},{"type":"bool","name":"pretty_print","decl":"bool pretty_print","default":"false"},{"type":"int","name":"depth","decl":"int depth","default":"0"}]},{"name":"json_decode","docStart":7636,"docEnd":8681,"docs":{"brief":"Decodes a JSON string into a JSON instance.","tags":[{"tag":"","text":"Decodes a JSON string into a JSON instance."},{"tag":"param:buffer","text":"Buffer to decode."},{"tag":"param:existing","text":"Object to store output in. Setting this allows loading over\nan existing JSON instance, 'refreshing' it as opposed to\ncreating a new one. [default: null]"},{"tag":"param:pos","text":"Current position of the decoder as a bytes offset into the buffer."},{"tag":"param:depth","text":"Current depth of the decoder as child elements in the object."},{"tag":"returns","text":"JSON instance or null if decoding failed (buffer didn't contain valid JSON)."},{"tag":"error","text":"If the buffer does not contain valid JSON, an error will be thrown.\nIf the buffer does not contain the same structure type as\nthe existing parameter if one is provided, an error will be thrown.\nFor example, an object cannot be reliably decoded over an existing\narray and vice versa. Only array over array and object over object\ndecoding is supported."}]},"kind":"stock","returnType":"JSON_Object","arguments":[{"type":"const char[]","name":"buffer","decl":"const char[] buffer","default":null},{"type":"JSON_Object","name":"existing","decl":"JSON_Object existing","default":"null"},{"type":"int&","name":"pos","decl":"int& pos","default":"0"},{"type":"int","name":"depth","decl":"int depth","default":"0"}]},{"name":"json_merge","docStart":15411,"docEnd":16105,"docs":{"brief":"Merges the entries from the second object to the first,\noptionally replacing existing entries with the same key.","tags":[{"tag":"","text":"Merges the entries from the second object to the first,\noptionally replacing existing entries with the same key."},{"tag":"param:to","text":"Object to merge on to."},{"tag":"param:from","text":"Object to merge entries from."},{"tag":"param:replace","text":"Should existing keys be replaced if they exist in both objects?"},{"tag":"returns","text":"True on success, false otherwise."},{"tag":"error","text":"If the objects are not the same structure type\nas one another, an error will be thrown.\nFor example, an object cannot be reliably merged over an array\nand vice versa. Only array over array and object over object\nmerging is supported."}]},"kind":"stock","returnType":"bool","arguments":[{"type":"JSON_Object","name":"to","decl":"JSON_Object to","default":null},{"type":"JSON_Object","name":"from","decl":"JSON_Object from","default":null},{"type":"bool","name":"replace","decl":"bool replace","default":"true"}]},{"name":"json_copy_shallow","docStart":19572,"docEnd":19721,"docs":{"brief":"Creates a shallow copy of the specified object.","tags":[{"tag":"","text":"Creates a shallow copy of the specified object."},{"tag":"param:obj","text":"Object to copy."},{"tag":"returns","text":"A shallow copy of the specified object."}]},"kind":"stock","returnType":"JSON_Object","arguments":[{"type":"JSON_Object","name":"obj","decl":"JSON_Object obj","default":null}]},{"name":"json_copy_deep","docStart":19924,"docEnd":20067,"docs":{"brief":"Creates a deep copy of the specified object.","tags":[{"tag":"","text":"Creates a deep copy of the specified object."},{"tag":"param:obj","text":"Object to copy."},{"tag":"returns","text":"A deep copy of the specified object."}]},"kind":"stock","returnType":"JSON_Object","arguments":[{"type":"JSON_Object","name":"obj","decl":"JSON_Object obj","default":null}]},{"name":"json_cleanup","docStart":20867,"docEnd":20999,"docs":{"brief":"Recursively cleans up a JSON instance and any JSON instances stored within.","tags":[{"tag":"","text":"Recursively cleans up a JSON instance and any JSON instances stored within."},{"tag":"param:obj","text":"JSON instance to clean up."}]},"kind":"stock","returnType":"void","arguments":[{"type":"JSON_Object","name":"obj","decl":"JSON_Object obj","default":null}]}],"methodmaps":[],"enumstructs":[],"constants":[],"enums":[],"typesets":[],"typedefs":[]}