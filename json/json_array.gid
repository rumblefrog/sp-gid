{"functions":[],"methodmaps":[{"name":"JSON_Array","docStart":0,"docEnd":0,"docs":null,"parent":"JSON_Object","methods":[{"name":"IncrementIndex","docStart":2472,"docEnd":2580,"docs":{"brief":"Increases the length of the array by 1 and returns true.","tags":[{"tag":"","text":"Increases the length of the array by 1 and returns true."},{"tag":"returns","text":"True."}]},"kind":"stock","returnType":"bool","arguments":[]},{"name":"HasKey","docStart":2679,"docEnd":2864,"docs":{"brief":"Checks whether the object has an index.","tags":[{"tag":"","text":"Checks whether the object has an index."},{"tag":"param:index","text":"Index to check existence of."},{"tag":"returns","text":"True if the index exists, false otherwise."}]},"kind":"stock","returnType":"bool","arguments":[{"type":"int","name":"index","decl":"int index","default":null}]},{"name":"GetIndexAsString","docStart":2966,"docEnd":3404,"docs":{"brief":"Outputs an index as a string with optional validation.","tags":[{"tag":"","text":"Outputs an index as a string with optional validation."},{"tag":"param:index","text":"Index to output."},{"tag":"param:output","text":"String buffer to store output."},{"tag":"param:max_size","text":"Maximum size of string buffer."},{"tag":"param:validate","text":"Should we check that the index is valid before\nconverting it to a string? [default: true]"},{"tag":"returns","text":"True if the index is valid, false otherwise."}]},"kind":"stock","returnType":"bool","arguments":[{"type":"int","name":"index","decl":"int index","default":null},{"type":"char[]","name":"output","decl":"char[] output","default":null},{"type":"int","name":"max_size","decl":"int max_size","default":null},{"type":"bool","name":"validate","decl":"bool validate","default":"true"}]},{"name":"GetKeyType","docStart":3747,"docEnd":3981,"docs":{"brief":"Gets the cell type stored at an index.","tags":[{"tag":"","text":"Gets the cell type stored at an index."},{"tag":"param:index","text":"Index to get value type for."},{"tag":"returns","text":"Value type for index provided,\nor Type_Invalid if it does not exist."}]},"kind":"stock","returnType":"JSON_CELL_TYPE","arguments":[{"type":"int","name":"index","decl":"int index","default":null}]},{"name":"GetKeyLength","docStart":4241,"docEnd":4500,"docs":{"brief":"Gets the length of the string stored at an index.","tags":[{"tag":"","text":"Gets the length of the string stored at an index."},{"tag":"param:index","text":"Index to get string length for."},{"tag":"returns","text":"Length of string at index provided,\nor -1 if it is not a string/does not exist."}]},"kind":"stock","returnType":"int","arguments":[{"type":"int","name":"index","decl":"int index","default":null}]},{"name":"GetKeyHidden","docStart":4743,"docEnd":4945,"docs":{"brief":"Gets whether the index should be hidden from encoding.","tags":[{"tag":"","text":"Gets whether the index should be hidden from encoding."},{"tag":"param:index","text":"Index to get hidden state for."},{"tag":"returns","text":"Whether or not the index should be hidden."}]},"kind":"stock","returnType":"bool","arguments":[{"type":"int","name":"index","decl":"int index","default":null}]},{"name":"SetKeyType","docStart":5242,"docEnd":5462,"docs":{"brief":"Sets the cell type stored at a index.","tags":[{"tag":"","text":"Sets the cell type stored at a index."},{"tag":"param:index","text":"Index to set value type for."},{"tag":"param:type","text":"Type to set index to."},{"tag":"returns","text":"True on success, false otherwise."}]},"kind":"stock","returnType":"bool","arguments":[{"type":"int","name":"index","decl":"int index","default":null},{"type":"JSON_CELL_TYPE","name":"type","decl":"JSON_CELL_TYPE type","default":null}]},{"name":"SetKeyLength","docStart":5732,"docEnd":5969,"docs":{"brief":"Sets the length of the string stored at a index.","tags":[{"tag":"","text":"Sets the length of the string stored at a index."},{"tag":"param:index","text":"Index to set string length for."},{"tag":"param:length","text":"Length to set string to."},{"tag":"returns","text":"True on success, false otherwise."}]},"kind":"stock","returnType":"bool","arguments":[{"type":"int","name":"index","decl":"int index","default":null},{"type":"int","name":"length","decl":"int length","default":null}]},{"name":"SetKeyHidden","docStart":6236,"docEnd":6495,"docs":{"brief":"Sets whether the index should be hidden from encoding.","tags":[{"tag":"","text":"Sets whether the index should be hidden from encoding."},{"tag":"param:index","text":"Index to set hidden state for."},{"tag":"param:hidden","text":"Wheter or not the index should be hidden."},{"tag":"returns","text":"True on success, false otherwise."}]},"kind":"stock","returnType":"bool","arguments":[{"type":"int","name":"index","decl":"int index","default":null},{"type":"bool","name":"hidden","decl":"bool hidden","default":null}]},{"name":"GetValue","docStart":6804,"docEnd":7120,"docs":{"brief":"Retrieves the value stored at an index.","tags":[{"tag":"","text":"Retrieves the value stored at an index."},{"tag":"param:index","text":"Index to retrieve value for."},{"tag":"param:value","text":"Variable to store value."},{"tag":"returns","text":"True on success. False if the key is not set,\nor the key is set as an array or string (not a value)."}]},"kind":"stock","returnType":"any","arguments":[{"type":"int","name":"index","decl":"int index","default":null},{"type":"any&","name":"value","decl":"any& value","default":null}]},{"name":"GetString","docStart":7374,"docEnd":7839,"docs":{"brief":"Retrieves the string stored at an index.","tags":[{"tag":"","text":"Retrieves the string stored at an index."},{"tag":"param:index","text":"Index to retrieve string value for."},{"tag":"param:value","text":"Buffer to store value."},{"tag":"param:max_size","text":"Maximum size of string buffer."},{"tag":"param:size","text":"Optional parameter to store the number of bytes written to the buffer."},{"tag":"returns","text":"True on success. False if the key is not set,\nor the key is set as a value or array (not a string)."}]},"kind":"stock","returnType":"bool","arguments":[{"type":"int","name":"index","decl":"int index","default":null},{"type":"char[]","name":"value","decl":"char[] value","default":null},{"type":"int","name":"max_size","decl":"int max_size","default":null},{"type":"int&","name":"size","decl":"int& size","default":"0"}]},{"name":"GetInt","docStart":8146,"docEnd":8313,"docs":{"brief":"Retrieves the int stored at an index.","tags":[{"tag":"","text":"Retrieves the int stored at an index."},{"tag":"param:index","text":"Index to retrieve int value for."},{"tag":"returns","text":"Value stored at index."}]},"kind":"stock","returnType":"int","arguments":[{"type":"int","name":"index","decl":"int index","default":null}]},{"name":"GetFloat","docStart":8544,"docEnd":8715,"docs":{"brief":"Retrieves the float stored at an index.","tags":[{"tag":"","text":"Retrieves the float stored at an index."},{"tag":"param:index","text":"Index to retrieve float value for."},{"tag":"returns","text":"Value stored at index."}]},"kind":"stock","returnType":"float","arguments":[{"type":"int","name":"index","decl":"int index","default":null}]},{"name":"GetBool","docStart":8954,"docEnd":9123,"docs":{"brief":"Retrieves the bool stored at an index.","tags":[{"tag":"","text":"Retrieves the bool stored at an index."},{"tag":"param:index","text":"Index to retrieve bool value for."},{"tag":"returns","text":"Value stored at index."}]},"kind":"stock","returnType":"bool","arguments":[{"type":"int","name":"index","decl":"int index","default":null}]},{"name":"GetNull","docStart":9360,"docEnd":9525,"docs":{"brief":"Retrieves null stored at an index.","tags":[{"tag":"","text":"Retrieves null stored at an index."},{"tag":"param:index","text":"Index to retrieve null value for."},{"tag":"returns","text":"Value stored at index."}]},"kind":"stock","returnType":"Handle","arguments":[{"type":"int","name":"index","decl":"int index","default":null}]},{"name":"GetObject","docStart":9763,"docEnd":9941,"docs":{"brief":"Retrieves the JSON object stored at an index.","tags":[{"tag":"","text":"Retrieves the JSON object stored at an index."},{"tag":"param:index","text":"Index to retrieve object value for."},{"tag":"returns","text":"Value stored at index."}]},"kind":"stock","returnType":"JSON_Object","arguments":[{"type":"int","name":"index","decl":"int index","default":null}]},{"name":"PushString","docStart":10229,"docEnd":10392,"docs":{"brief":"Pushes a string to the end of the array.","tags":[{"tag":"","text":"Pushes a string to the end of the array."},{"tag":"param:value","text":"Value to push."},{"tag":"returns","text":"True on success, false otherwise."}]},"kind":"stock","returnType":"bool","arguments":[{"type":"const char[]","name":"value","decl":"const char[] value","default":null}]},{"name":"PushInt","docStart":10700,"docEnd":10861,"docs":{"brief":"Pushes an int to the end of the array.","tags":[{"tag":"","text":"Pushes an int to the end of the array."},{"tag":"param:value","text":"Value to push."},{"tag":"returns","text":"True on success, false otherwise."}]},"kind":"stock","returnType":"bool","arguments":[{"type":"int","name":"value","decl":"int value","default":null}]},{"name":"PushFloat","docStart":11154,"docEnd":11316,"docs":{"brief":"Pushes a float to the end of the array.","tags":[{"tag":"","text":"Pushes a float to the end of the array."},{"tag":"param:value","text":"Value to push."},{"tag":"returns","text":"True on success, false otherwise."}]},"kind":"stock","returnType":"bool","arguments":[{"type":"float","name":"value","decl":"float value","default":null}]},{"name":"PushBool","docStart":11615,"docEnd":11776,"docs":{"brief":"Pushes a bool to the end of the array.","tags":[{"tag":"","text":"Pushes a bool to the end of the array."},{"tag":"param:value","text":"Value to push."},{"tag":"returns","text":"True on success, false otherwise."}]},"kind":"stock","returnType":"bool","arguments":[{"type":"bool","name":"value","decl":"bool value","default":null}]},{"name":"PushNull","docStart":12072,"docEnd":12192,"docs":{"brief":"Pushes null to the end of the array.","tags":[{"tag":"","text":"Pushes null to the end of the array."},{"tag":"returns","text":"True on success, false otherwise."}]},"kind":"stock","returnType":"bool","arguments":[]},{"name":"PushObject","docStart":12471,"docEnd":12639,"docs":{"brief":"Pushes a JSON object to the end of the array.","tags":[{"tag":"","text":"Pushes a JSON object to the end of the array."},{"tag":"param:value","text":"Value to push."},{"tag":"returns","text":"True on success, false otherwise."}]},"kind":"stock","returnType":"bool","arguments":[{"type":"JSON_Object","name":"value","decl":"JSON_Object value","default":null}]},{"name":"IndexOf","docStart":12994,"docEnd":13182,"docs":{"brief":"Finds the index of a value in the array.","tags":[{"tag":"","text":"Finds the index of a value in the array."},{"tag":"param:value","text":"Value to search for."},{"tag":"returns","text":"The index of the value if it is found, -1 otherwise."}]},"kind":"stock","returnType":"int","arguments":[{"type":"any","name":"value","decl":"any value","default":null}]},{"name":"IndexOfString","docStart":13438,"docEnd":13629,"docs":{"brief":"Finds the index of a string in the array.","tags":[{"tag":"","text":"Finds the index of a string in the array."},{"tag":"param:value","text":"String to search for."},{"tag":"returns","text":"The index of the string if it is found, -1 otherwise."}]},"kind":"stock","returnType":"int","arguments":[{"type":"const char[]","name":"value","decl":"const char[] value","default":null}]},{"name":"Contains","docStart":14116,"docEnd":14302,"docs":{"brief":"Determines whether the array contains a value.","tags":[{"tag":"","text":"Determines whether the array contains a value."},{"tag":"param:value","text":"Value to search for."},{"tag":"returns","text":"True if the value is found, false otherwise."}]},"kind":"stock","returnType":"bool","arguments":[{"type":"any","name":"value","decl":"any value","default":null}]},{"name":"ContainsString","docStart":14398,"docEnd":14587,"docs":{"brief":"Determines whether the array contains a string.","tags":[{"tag":"","text":"Determines whether the array contains a string."},{"tag":"param:value","text":"String to search for."},{"tag":"returns","text":"True if the string is found, false otherwise."}]},"kind":"stock","returnType":"bool","arguments":[{"type":"const char[]","name":"value","decl":"const char[] value","default":null}]},{"name":"Clear","docStart":14757,"docEnd":14833,"docs":{"brief":"Clears all entries and ensures the array index is re-set.","tags":[{"tag":"","text":"Clears all entries and ensures the array index is re-set."}]},"kind":"stock","returnType":"void","arguments":[]},{"name":"Remove","docStart":14929,"docEnd":15173,"docs":{"brief":"Removes an index and its related meta-keys from the array,\nand shifts down all following element indices.","tags":[{"tag":"","text":"Removes an index and its related meta-keys from the array,\nand shifts down all following element indices."},{"tag":"param:key","text":"Key to remove."},{"tag":"returns","text":"True on success, false if the value was never set."}]},"kind":"stock","returnType":"bool","arguments":[{"type":"int","name":"index","decl":"int index","default":null}]},{"name":"JSON_Array","docStart":17057,"docEnd":17146,"docs":{"brief":"Creates a new JSON_Array.","tags":[{"tag":"","text":"Creates a new JSON_Array."},{"tag":"returns","text":"A new JSON_Array."}]},"kind":"stock","returnType":"JSON_Array","arguments":[]}],"properties":[{"name":"parent","docStart":1881,"docEnd":1962,"docs":{"brief":"Views the instance as its parent to access overridden methods.","tags":[{"tag":"","text":"Views the instance as its parent to access overridden methods."}]},"type":"JSON_Object","getter":true,"setter":false},{"name":"Length","docStart":2100,"docEnd":2155,"docs":{"brief":"The number of elements in the array.","tags":[{"tag":"","text":"The number of elements in the array."}]},"type":"int","getter":true,"setter":true}]}],"enumstructs":[],"constants":[],"enums":[],"typesets":[],"typedefs":[]}