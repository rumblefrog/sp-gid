{"functions":[{"name":"CreateKeyValues","docStart":14282,"docEnd":14637,"docs":{"brief":"Creates a new KeyValues structure.  The Handle must always be closed.","tags":[{"tag":"","text":"Creates a new KeyValues structure.  The Handle must always be closed."},{"tag":"param:name","text":"Name of the root section."},{"tag":"param:firstKey","text":"If non-empty, specifies the first key value."},{"tag":"param:firstValue","text":"If firstKey is non-empty, specifies the first key's value."},{"tag":"return","text":"A Handle to a new KeyValues structure."}]},"kind":"native","returnType":"KeyValues","arguments":[{"type":"const char[]","name":"name","decl":"const char[] name","default":null},{"type":"const char[]","name":"firstKey","decl":"const char[] firstKey","default":"\"\""},{"type":"const char[]","name":"firstValue","decl":"const char[] firstValue","default":"\"\""}]},{"name":"KvSetString","docStart":14749,"docEnd":14986,"docs":{"brief":"Sets a string value of a KeyValues key.","tags":[{"tag":"","text":"Sets a string value of a KeyValues key."},{"tag":"param:kv","text":"KeyValues Handle."},{"tag":"param:key","text":"Name of the key, or NULL_STRING."},{"tag":"param:value","text":"String value."},{"tag":"error","text":"Invalid Handle."}]},"kind":"native","returnType":"void","arguments":[{"type":"Handle","name":"kv","decl":"Handle kv","default":null},{"type":"const char[]","name":"key","decl":"const char[] key","default":null},{"type":"const char[]","name":"value","decl":"const char[] value","default":null}]},{"name":"KvSetNum","docStart":15065,"docEnd":15304,"docs":{"brief":"Sets an integer value of a KeyValues key.","tags":[{"tag":"","text":"Sets an integer value of a KeyValues key."},{"tag":"param:kv","text":"KeyValues Handle."},{"tag":"param:key","text":"Name of the key, or NULL_STRING."},{"tag":"param:value","text":"Value number."},{"tag":"error","text":"Invalid Handle."}]},"kind":"native","returnType":"void","arguments":[{"type":"Handle","name":"kv","decl":"Handle kv","default":null},{"type":"const char[]","name":"key","decl":"const char[] key","default":null},{"type":"int","name":"value","decl":"int value","default":null}]},{"name":"KvSetUInt64","docStart":15371,"docEnd":15647,"docs":{"brief":"Sets a large integer value of a KeyValues key.","tags":[{"tag":"","text":"Sets a large integer value of a KeyValues key."},{"tag":"param:kv","text":"KeyValues Handle."},{"tag":"param:key","text":"Name of the key, or NULL_STRING."},{"tag":"param:value","text":"Large integer value (0=High bits, 1=Low bits)"},{"tag":"error","text":"Invalid Handle."}]},"kind":"native","returnType":"void","arguments":[{"type":"Handle","name":"kv","decl":"Handle kv","default":null},{"type":"const char[]","name":"key","decl":"const char[] key","default":null},{"type":"const int[2]","name":"value","decl":"const int value[2]","default":null}]},{"name":"KvSetFloat","docStart":15726,"docEnd":15979,"docs":{"brief":"Sets a floating point value of a KeyValues key.","tags":[{"tag":"","text":"Sets a floating point value of a KeyValues key."},{"tag":"param:kv","text":"KeyValues Handle."},{"tag":"param:key","text":"Name of the key, or NULL_STRING."},{"tag":"param:value","text":"Floating point value."},{"tag":"error","text":"Invalid Handle."}]},"kind":"native","returnType":"void","arguments":[{"type":"Handle","name":"kv","decl":"Handle kv","default":null},{"type":"const char[]","name":"key","decl":"const char[] key","default":null},{"type":"float","name":"value","decl":"float value","default":null}]},{"name":"KvSetColor","docStart":16050,"docEnd":16404,"docs":{"brief":"Sets a set of color values of a KeyValues key.","tags":[{"tag":"","text":"Sets a set of color values of a KeyValues key."},{"tag":"param:kv","text":"KeyValues Handle."},{"tag":"param:key","text":"Name of the key, or NULL_STRING."},{"tag":"param:r","text":"Red value."},{"tag":"param:g","text":"Green value."},{"tag":"param:b","text":"Blue value."},{"tag":"param:a","text":"Alpha value."},{"tag":"error","text":"Invalid Handle."}]},"kind":"native","returnType":"void","arguments":[{"type":"Handle","name":"kv","decl":"Handle kv","default":null},{"type":"const char[]","name":"key","decl":"const char[] key","default":null},{"type":"int","name":"r","decl":"int r","default":null},{"type":"int","name":"g","decl":"int g","default":null},{"type":"int","name":"b","decl":"int b","default":null},{"type":"int","name":"a","decl":"int a","default":"0"}]},{"name":"KvSetVector","docStart":16492,"docEnd":16729,"docs":{"brief":"Sets a vector value of a KeyValues key.","tags":[{"tag":"","text":"Sets a vector value of a KeyValues key."},{"tag":"param:kv","text":"KeyValues Handle."},{"tag":"param:key","text":"Name of the key, or NULL_STRING."},{"tag":"param:vec","text":"Vector value."},{"tag":"error","text":"Invalid Handle."}]},"kind":"native","returnType":"void","arguments":[{"type":"Handle","name":"kv","decl":"Handle kv","default":null},{"type":"const char[]","name":"key","decl":"const char[] key","default":null},{"type":"const float[3]","name":"vec","decl":"const float vec[3]","default":null}]},{"name":"KvGetString","docStart":16808,"docEnd":17209,"docs":{"brief":"Retrieves a string value from a KeyValues key.","tags":[{"tag":"","text":"Retrieves a string value from a KeyValues key."},{"tag":"param:kv","text":"KeyValues Handle."},{"tag":"param:key","text":"Name of the key, or NULL_STRING."},{"tag":"param:value","text":"Buffer to store key value in."},{"tag":"param:maxlength","text":"Maximum length of the value buffer."},{"tag":"param:defvalue","text":"Optional default value to use if the key is not found."},{"tag":"error","text":"Invalid Handle."}]},"kind":"native","returnType":"void","arguments":[{"type":"Handle","name":"kv","decl":"Handle kv","default":null},{"type":"const char[]","name":"key","decl":"const char[] key","default":null},{"type":"char[]","name":"value","decl":"char[] value","default":null},{"type":"int","name":"maxlength","decl":"int maxlength","default":null},{"type":"const char[]","name":"defvalue","decl":"const char[] defvalue","default":"\"\""}]},{"name":"KvGetNum","docStart":17323,"docEnd":17661,"docs":{"brief":"Retrieves an integer value from a KeyValues key.","tags":[{"tag":"","text":"Retrieves an integer value from a KeyValues key."},{"tag":"param:kv","text":"KeyValues Handle."},{"tag":"param:key","text":"Name of the key, or NULL_STRING."},{"tag":"param:defvalue","text":"Optional default value to use if the key is not found."},{"tag":"return","text":"Integer value of the key."},{"tag":"error","text":"Invalid Handle."}]},"kind":"native","returnType":"int","arguments":[{"type":"Handle","name":"kv","decl":"Handle kv","default":null},{"type":"const char[]","name":"key","decl":"const char[] key","default":null},{"type":"int","name":"defvalue","decl":"int defvalue","default":"0"}]},{"name":"KvGetFloat","docStart":17732,"docEnd":18083,"docs":{"brief":"Retrieves a floating point value from a KeyValues key.","tags":[{"tag":"","text":"Retrieves a floating point value from a KeyValues key."},{"tag":"param:kv","text":"KeyValues Handle."},{"tag":"param:key","text":"Name of the key, or NULL_STRING."},{"tag":"param:defvalue","text":"Optional default value to use if the key is not found."},{"tag":"return","text":"Floating point value of the key."},{"tag":"error","text":"Invalid Handle."}]},"kind":"native","returnType":"float","arguments":[{"type":"Handle","name":"kv","decl":"Handle kv","default":null},{"type":"const char[]","name":"key","decl":"const char[] key","default":null},{"type":"float","name":"defvalue","decl":"float defvalue","default":"0.000000"}]},{"name":"KvGetColor","docStart":18162,"docEnd":18595,"docs":{"brief":"Retrieves a set of color values from a KeyValues key.","tags":[{"tag":"","text":"Retrieves a set of color values from a KeyValues key."},{"tag":"param:kv","text":"KeyValues Handle."},{"tag":"param:key","text":"Name of the key, or NULL_STRING."},{"tag":"param:r","text":"Red value, set by reference."},{"tag":"param:g","text":"Green value, set by reference."},{"tag":"param:b","text":"Blue value, set by reference."},{"tag":"param:a","text":"Alpha value, set by reference."},{"tag":"error","text":"Invalid Handle."}]},"kind":"native","returnType":"void","arguments":[{"type":"Handle","name":"kv","decl":"Handle kv","default":null},{"type":"const char[]","name":"key","decl":"const char[] key","default":null},{"type":"int&","name":"r","decl":"int& r","default":null},{"type":"int&","name":"g","decl":"int& g","default":null},{"type":"int&","name":"b","decl":"int& b","default":null},{"type":"int&","name":"a","decl":"int& a","default":null}]},{"name":"KvGetUInt64","docStart":18685,"docEnd":19040,"docs":{"brief":"Retrieves a large integer value from a KeyValues key.","tags":[{"tag":"","text":"Retrieves a large integer value from a KeyValues key."},{"tag":"param:kv","text":"KeyValues Handle."},{"tag":"param:key","text":"Name of the key, or NULL_STRING."},{"tag":"param:value","text":"Array to represent the large integer."},{"tag":"param:defvalue","text":"Optional default value to use if the key is not found."},{"tag":"error","text":"Invalid Handle."}]},"kind":"native","returnType":"void","arguments":[{"type":"Handle","name":"kv","decl":"Handle kv","default":null},{"type":"const char[]","name":"key","decl":"const char[] key","default":null},{"type":"int[2]","name":"value","decl":"int value[2]","default":null},{"type":"int[2]","name":"defvalue","decl":"int defvalue[2]","default":"{ 0, 0 }"}]},{"name":"KvGetVector","docStart":19136,"docEnd":19488,"docs":{"brief":"Retrieves a vector value from a KeyValues key.","tags":[{"tag":"","text":"Retrieves a vector value from a KeyValues key."},{"tag":"param:kv","text":"KeyValues Handle."},{"tag":"param:key","text":"Name of the key, or NULL_STRING."},{"tag":"param:vec","text":"Destination vector to store the value in."},{"tag":"param:defvalue","text":"Optional default value to use if the key is not found."},{"tag":"error","text":"Invalid Handle."}]},"kind":"native","returnType":"void","arguments":[{"type":"Handle","name":"kv","decl":"Handle kv","default":null},{"type":"const char[]","name":"key","decl":"const char[] key","default":null},{"type":"float[3]","name":"vec","decl":"float vec[3]","default":null},{"type":"const float[3]","name":"defvalue","decl":"const float defvalue[3]","default":"{ 0.000000, 0.000000, 0.000000 }"}]},{"name":"KvJumpToKey","docStart":19602,"docEnd":19942,"docs":{"brief":"Sets the current position in the KeyValues tree to the given key.","tags":[{"tag":"","text":"Sets the current position in the KeyValues tree to the given key."},{"tag":"param:kv","text":"KeyValues Handle."},{"tag":"param:key","text":"Name of the key."},{"tag":"param:create","text":"If true, and the key does not exist, it will be created."},{"tag":"return","text":"True if the key exists, false if it does not and was not created."}]},"kind":"native","returnType":"bool","arguments":[{"type":"Handle","name":"kv","decl":"Handle kv","default":null},{"type":"const char[]","name":"key","decl":"const char[] key","default":null},{"type":"bool","name":"create","decl":"bool create","default":"false"}]},{"name":"KvJumpToKeySymbol","docStart":20020,"docEnd":20255,"docs":{"brief":"Sets the current position in the KeyValues tree to the given key.","tags":[{"tag":"","text":"Sets the current position in the KeyValues tree to the given key."},{"tag":"param:kv","text":"KeyValues Handle."},{"tag":"param:id","text":"KeyValues id."},{"tag":"return","text":"True if the key exists, false if it does not."}]},"kind":"native","returnType":"bool","arguments":[{"type":"Handle","name":"kv","decl":"Handle kv","default":null},{"type":"int","name":"id","decl":"int id","default":null}]},{"name":"KvGotoFirstSubKey","docStart":20310,"docEnd":20685,"docs":{"brief":"Sets the current position in the KeyValues tree to the first sub key.\nThis native adds to the internal traversal stack.","tags":[{"tag":"","text":"Sets the current position in the KeyValues tree to the first sub key.\nThis native adds to the internal traversal stack."},{"tag":"param:kv","text":"KeyValues Handle."},{"tag":"param:keyOnly","text":"If false, non-keys will be traversed (values)."},{"tag":"return","text":"True on success, false if there was no first sub key."},{"tag":"error","text":"Invalid Handle."}]},"kind":"native","returnType":"bool","arguments":[{"type":"Handle","name":"kv","decl":"Handle kv","default":null},{"type":"bool","name":"keyOnly","decl":"bool keyOnly","default":"true"}]},{"name":"KvGotoNextKey","docStart":20751,"docEnd":21213,"docs":{"brief":"Sets the current position in the KeyValues tree to the next sub key.\nThis native does NOT add to the internal traversal stack, and thus\nKvGoBack() is not needed for each successive call to this function.","tags":[{"tag":"","text":"Sets the current position in the KeyValues tree to the next sub key.\nThis native does NOT add to the internal traversal stack, and thus\nKvGoBack() is not needed for each successive call to this function."},{"tag":"param:kv","text":"KeyValues Handle."},{"tag":"param:keyOnly","text":"If false, non-keys will be traversed (values)."},{"tag":"return","text":"True on success, false if there was no next sub key."},{"tag":"error","text":"Invalid Handle."}]},"kind":"native","returnType":"bool","arguments":[{"type":"Handle","name":"kv","decl":"Handle kv","default":null},{"type":"bool","name":"keyOnly","decl":"bool keyOnly","default":"true"}]},{"name":"KvSavePosition","docStart":21275,"docEnd":21571,"docs":{"brief":"Saves the current position in the traversal stack onto the traversal\nstack.  This can be useful if you wish to use KvGotoNextKey() and\nhave the previous key saved for backwards traversal.","tags":[{"tag":"","text":"Saves the current position in the traversal stack onto the traversal\nstack.  This can be useful if you wish to use KvGotoNextKey() and\nhave the previous key saved for backwards traversal."},{"tag":"param:kv","text":"KeyValues Handle."},{"tag":"error","text":"Invalid Handle."}]},"kind":"native","returnType":"void","arguments":[{"type":"Handle","name":"kv","decl":"Handle kv","default":null}]},{"name":"KvDeleteKey","docStart":21615,"docEnd":21876,"docs":{"brief":"Removes the given key from the current position.","tags":[{"tag":"","text":"Removes the given key from the current position."},{"tag":"param:kv","text":"KeyValues Handle."},{"tag":"param:key","text":"Name of the key."},{"tag":"return","text":"True on success, false if key did not exist."},{"tag":"error","text":"Invalid Handle."}]},"kind":"native","returnType":"bool","arguments":[{"type":"Handle","name":"kv","decl":"Handle kv","default":null},{"type":"const char[]","name":"key","decl":"const char[] key","default":null}]},{"name":"KvDeleteThis","docStart":21935,"docEnd":22724,"docs":{"brief":"Removes the current sub-key and attempts to set the position\nto the sub-key after the removed one.  If no such sub-key exists,\nthe position will be the parent key in the traversal stack.\nGiven the sub-key having position \"N\" in the traversal stack, the\nremoval will always take place from position \"N-1.\"","tags":[{"tag":"","text":"Removes the current sub-key and attempts to set the position\nto the sub-key after the removed one.  If no such sub-key exists,\nthe position will be the parent key in the traversal stack.\nGiven the sub-key having position \"N\" in the traversal stack, the\nremoval will always take place from position \"N-1.\""},{"tag":"param:kv","text":"KeyValues Handle."},{"tag":"return","text":"1 if removal succeeded and there was another key.\n0 if the current node was not contained in the\nprevious node, or no previous node exists.\n-1 if removal succeeded and there were no more keys,\nthus the state is as if KvGoBack() was called."},{"tag":"error","text":"Invalid Handle."}]},"kind":"native","returnType":"int","arguments":[{"type":"Handle","name":"kv","decl":"Handle kv","default":null}]},{"name":"KvGoBack","docStart":22765,"docEnd":23223,"docs":{"brief":"Jumps back to the previous position.  Returns false if there are no\nprevious positions (i.e., at the root node).  This should be called\nonce for each successful Jump call, in order to return to the top node.\nThis function pops one node off the internal traversal stack.","tags":[{"tag":"","text":"Jumps back to the previous position.  Returns false if there are no\nprevious positions (i.e., at the root node).  This should be called\nonce for each successful Jump call, in order to return to the top node.\nThis function pops one node off the internal traversal stack."},{"tag":"param:kv","text":"KeyValues Handle."},{"tag":"return","text":"True on success, false if there is no higher node."},{"tag":"error","text":"Invalid Handle."}]},"kind":"native","returnType":"bool","arguments":[{"type":"Handle","name":"kv","decl":"Handle kv","default":null}]},{"name":"KvRewind","docStart":23261,"docEnd":23542,"docs":{"brief":"Sets the position back to the top node, emptying the entire node\ntraversal history.  This can be used instead of looping KvGoBack()\nif recursive iteration is not important.","tags":[{"tag":"","text":"Sets the position back to the top node, emptying the entire node\ntraversal history.  This can be used instead of looping KvGoBack()\nif recursive iteration is not important."},{"tag":"param:kv","text":"KeyValues Handle."},{"tag":"error","text":"Invalid Handle."}]},"kind":"native","returnType":"void","arguments":[{"type":"Handle","name":"kv","decl":"Handle kv","default":null}]},{"name":"KvGetSectionName","docStart":23580,"docEnd":23895,"docs":{"brief":"Retrieves the current section name.","tags":[{"tag":"","text":"Retrieves the current section name."},{"tag":"param:kv","text":"KeyValues Handle."},{"tag":"param:section","text":"Buffer to store the section name."},{"tag":"param:maxlength","text":"Maximum length of the name buffer."},{"tag":"return","text":"True on success, false on failure."},{"tag":"error","text":"Invalid Handle."}]},"kind":"native","returnType":"bool","arguments":[{"type":"Handle","name":"kv","decl":"Handle kv","default":null},{"type":"char[]","name":"section","decl":"char[] section","default":null},{"type":"int","name":"maxlength","decl":"int maxlength","default":null}]},{"name":"KvSetSectionName","docStart":23972,"docEnd":24142,"docs":{"brief":"Sets the current section name.","tags":[{"tag":"","text":"Sets the current section name."},{"tag":"param:kv","text":"KeyValues Handle."},{"tag":"param:section","text":"Section name."},{"tag":"error","text":"Invalid Handle."}]},"kind":"native","returnType":"void","arguments":[{"type":"Handle","name":"kv","decl":"Handle kv","default":null},{"type":"const char[]","name":"section","decl":"const char[] section","default":null}]},{"name":"KvGetDataType","docStart":24210,"docEnd":24431,"docs":{"brief":"Returns the data type at a key.","tags":[{"tag":"","text":"Returns the data type at a key."},{"tag":"param:kv","text":"KeyValues Handle."},{"tag":"param:key","text":"Key name."},{"tag":"return","text":"KvDataType value of the key."},{"tag":"error","text":"Invalid Handle."}]},"kind":"native","returnType":"KvDataTypes","arguments":[{"type":"Handle","name":"kv","decl":"Handle kv","default":null},{"type":"const char[]","name":"key","decl":"const char[] key","default":null}]},{"name":"KeyValuesToFile","docStart":24499,"docEnd":24794,"docs":{"brief":"Converts a KeyValues tree to a file.  The tree is dumped\nfrom the current position.","tags":[{"tag":"","text":"Converts a KeyValues tree to a file.  The tree is dumped\nfrom the current position."},{"tag":"param:kv","text":"KeyValues Handle."},{"tag":"param:file","text":"File to dump write to."},{"tag":"return","text":"True on success, false otherwise."},{"tag":"error","text":"Invalid Handle."}]},"kind":"native","returnType":"bool","arguments":[{"type":"Handle","name":"kv","decl":"Handle kv","default":null},{"type":"const char[]","name":"file","decl":"const char[] file","default":null}]},{"name":"FileToKeyValues","docStart":24858,"docEnd":25159,"docs":{"brief":"Converts a file to a KeyValues tree.  The file is read into\nthe current position of the tree.","tags":[{"tag":"","text":"Converts a file to a KeyValues tree.  The file is read into\nthe current position of the tree."},{"tag":"param:kv","text":"KeyValues Handle."},{"tag":"param:file","text":"File to read from."},{"tag":"return","text":"True on success, false otherwise."},{"tag":"error","text":"Invalid Handle."}]},"kind":"native","returnType":"bool","arguments":[{"type":"Handle","name":"kv","decl":"Handle kv","default":null},{"type":"const char[]","name":"file","decl":"const char[] file","default":null}]},{"name":"StringToKeyValues","docStart":25223,"docEnd":25651,"docs":{"brief":"Converts a given string to a KeyValues tree.  The string is read into\nthe current postion of the tree.","tags":[{"tag":"","text":"Converts a given string to a KeyValues tree.  The string is read into\nthe current postion of the tree."},{"tag":"param:kv","text":"KeyValues Handle."},{"tag":"param:buffer","text":"String buffer to load into the KeyValues."},{"tag":"param:resourceName","text":"The resource name of the KeyValues, used for error tracking purposes."},{"tag":"return","text":"True on success, false otherwise."},{"tag":"error","text":"Invalid Handle."}]},"kind":"native","returnType":"bool","arguments":[{"type":"Handle","name":"kv","decl":"Handle kv","default":null},{"type":"const char[]","name":"buffer","decl":"const char[] buffer","default":null},{"type":"const char[]","name":"resourceName","decl":"const char[] resourceName","default":"\"StringToKeyValues\""}]},{"name":"KvSetEscapeSequences","docStart":25766,"docEnd":26115,"docs":{"brief":"Sets whether or not the KeyValues parser will read escape sequences.\nFor example, \\n would be read as a literal newline.  This defaults\nto false for new KeyValues structures.","tags":[{"tag":"","text":"Sets whether or not the KeyValues parser will read escape sequences.\nFor example, \\n would be read as a literal newline.  This defaults\nto false for new KeyValues structures."},{"tag":"param:kv","text":"KeyValues Handle."},{"tag":"param:useEscapes","text":"Whether or not to read escape sequences."},{"tag":"error","text":"Invalid Handle."}]},"kind":"native","returnType":"void","arguments":[{"type":"Handle","name":"kv","decl":"Handle kv","default":null},{"type":"bool","name":"useEscapes","decl":"bool useEscapes","default":null}]},{"name":"KvNodesInStack","docStart":26182,"docEnd":26511,"docs":{"brief":"Returns the position in the jump stack; I.e. the number of calls\nrequired for KvGoBack to return to the root node.  If at the root node,\n0 is returned.","tags":[{"tag":"","text":"Returns the position in the jump stack; I.e. the number of calls\nrequired for KvGoBack to return to the root node.  If at the root node,\n0 is returned."},{"tag":"param:kv","text":"KeyValues Handle."},{"tag":"return","text":"Number of non-root nodes in the jump stack."},{"tag":"error","text":"Invalid Handle."}]},"kind":"native","returnType":"int","arguments":[{"type":"Handle","name":"kv","decl":"Handle kv","default":null}]},{"name":"KvCopySubkeys","docStart":26554,"docEnd":26888,"docs":{"brief":"Makes a new copy of all subkeys in the origin KeyValues to\nthe destination KeyValues.\nNOTE: All KeyValues are processed from the current location not the root one.","tags":[{"tag":"","text":"Makes a new copy of all subkeys in the origin KeyValues to\nthe destination KeyValues.\nNOTE: All KeyValues are processed from the current location not the root one."},{"tag":"param:origin","text":"Origin KeyValues Handle."},{"tag":"param:dest","text":"Destination KeyValues Handle."},{"tag":"error","text":"Invalid Handle."}]},"kind":"native","returnType":"void","arguments":[{"type":"Handle","name":"origin","decl":"Handle origin","default":null},{"type":"Handle","name":"dest","decl":"Handle dest","default":null}]},{"name":"KvFindKeyById","docStart":26948,"docEnd":27294,"docs":{"brief":"Finds a KeyValues name by id.","tags":[{"tag":"","text":"Finds a KeyValues name by id."},{"tag":"param:kv","text":"KeyValues Handle."},{"tag":"param:id","text":"KeyValues id."},{"tag":"param:name","text":"Buffer to store the name."},{"tag":"param:maxlength","text":"Maximum length of the value buffer."},{"tag":"return","text":"True on success, false if id not found."},{"tag":"error","text":"Invalid Handle."}]},"kind":"native","returnType":"bool","arguments":[{"type":"Handle","name":"kv","decl":"Handle kv","default":null},{"type":"int","name":"id","decl":"int id","default":null},{"type":"char[]","name":"name","decl":"char[] name","default":null},{"type":"int","name":"maxlength","decl":"int maxlength","default":null}]},{"name":"KvGetNameSymbol","docStart":27373,"docEnd":27671,"docs":{"brief":"Finds a KeyValues id inside a KeyValues tree.","tags":[{"tag":"","text":"Finds a KeyValues id inside a KeyValues tree."},{"tag":"param:kv","text":"KeyValues Handle."},{"tag":"param:key","text":"Key name."},{"tag":"param:id","text":"Id of the found KeyValue."},{"tag":"return","text":"True on success, false if key not found."},{"tag":"error","text":"Invalid Handle."}]},"kind":"native","returnType":"bool","arguments":[{"type":"Handle","name":"kv","decl":"Handle kv","default":null},{"type":"const char[]","name":"key","decl":"const char[] key","default":null},{"type":"int&","name":"id","decl":"int& id","default":null}]},{"name":"KvGetSectionSymbol","docStart":27743,"docEnd":27989,"docs":{"brief":"Retrieves the current section id.","tags":[{"tag":"","text":"Retrieves the current section id."},{"tag":"param:kv","text":"KeyValues Handle."},{"tag":"param:id","text":"Id of the current section."},{"tag":"return","text":"True on success, false on failure."},{"tag":"error","text":"Invalid Handle."}]},"kind":"native","returnType":"bool","arguments":[{"type":"Handle","name":"kv","decl":"Handle kv","default":null},{"type":"int&","name":"id","decl":"int& id","default":null}]}],"methodmaps":[{"name":"KeyValues","docStart":0,"docEnd":0,"docs":null,"parent":"Handle","methods":[{"name":"KeyValues","docStart":2209,"docEnd":2521,"docs":{"brief":"Creates a new KeyValues structure.  The Handle must be closed with\nCloseHandle() or delete.","tags":[{"tag":"","text":"Creates a new KeyValues structure.  The Handle must be closed with\nCloseHandle() or delete."},{"tag":"param:name","text":"Name of the root section."},{"tag":"param:firstKey","text":"If non-empty, specifies the first key value."},{"tag":"param:firstValue","text":"If firstKey is non-empty, specifies the first key's value."}]},"kind":"native","returnType":"KeyValues","arguments":[{"type":"const char[]","name":"name","decl":"const char[] name","default":null},{"type":"const char[]","name":"firstKey","decl":"const char[] firstKey","default":"\"\""},{"type":"const char[]","name":"firstValue","decl":"const char[] firstValue","default":"\"\""}]},{"name":"ExportToFile","docStart":2626,"docEnd":2824,"docs":{"brief":"Exports a KeyValues tree to a file. The tree is dumped from the current position.","tags":[{"tag":"","text":"Exports a KeyValues tree to a file. The tree is dumped from the current position."},{"tag":"param:file","text":"File to dump write to."},{"tag":"return","text":"True on success, false otherwise."}]},"kind":"native","returnType":"bool","arguments":[{"type":"const char[]","name":"file","decl":"const char[] file","default":null}]},{"name":"ExportToString","docStart":2883,"docEnd":3143,"docs":{"brief":"Exports a KeyValues tree to a string. The string is dumped from the current position.","tags":[{"tag":"","text":"Exports a KeyValues tree to a string. The string is dumped from the current position."},{"tag":"param:buffer","text":"Buffer to write to."},{"tag":"param:maxlength","text":"Max length of buffer."},{"tag":"return","text":"Number of bytes that can be written to buffer."}]},"kind":"native","returnType":"int","arguments":[{"type":"char[]","name":"buffer","decl":"char[] buffer","default":null},{"type":"int","name":"maxlength","decl":"int maxlength","default":null}]},{"name":"ImportFromFile","docStart":3337,"docEnd":3546,"docs":{"brief":"Imports a file in KeyValues format. The file is read into the current\nposition of the tree.","tags":[{"tag":"","text":"Imports a file in KeyValues format. The file is read into the current\nposition of the tree."},{"tag":"param:file","text":"File to read from."},{"tag":"return","text":"True on success, false otherwise."}]},"kind":"native","returnType":"bool","arguments":[{"type":"const char[]","name":"file","decl":"const char[] file","default":null}]},{"name":"ImportFromString","docStart":3607,"docEnd":3946,"docs":{"brief":"Converts a given string to a KeyValues tree.  The string is read into\nthe current postion of the tree.","tags":[{"tag":"","text":"Converts a given string to a KeyValues tree.  The string is read into\nthe current postion of the tree."},{"tag":"param:buffer","text":"String buffer to load into the KeyValues."},{"tag":"param:resourceName","text":"The resource name of the KeyValues, used for error tracking purposes."},{"tag":"return","text":"True on success, false otherwise."}]},"kind":"native","returnType":"bool","arguments":[{"type":"const char[]","name":"buffer","decl":"const char[] buffer","default":null},{"type":"const char[]","name":"resourceName","decl":"const char[] resourceName","default":"\"StringToKeyValues\""}]},{"name":"Import","docStart":4058,"docEnd":4321,"docs":{"brief":"Imports subkeys in the given KeyValues, at the current position in that\nKeyValues, into the current position in this KeyValues. Note that this\ncopies keys; it does not embed a reference to them.","tags":[{"tag":"","text":"Imports subkeys in the given KeyValues, at the current position in that\nKeyValues, into the current position in this KeyValues. Note that this\ncopies keys; it does not embed a reference to them."},{"tag":"param:other","text":"Origin KeyValues Handle."}]},"kind":"native","returnType":"void","arguments":[{"type":"KeyValues","name":"other","decl":"KeyValues other","default":null}]},{"name":"SetString","docStart":4372,"docEnd":4562,"docs":{"brief":"Sets a string value of a KeyValues key.","tags":[{"tag":"","text":"Sets a string value of a KeyValues key."},{"tag":"param:kv","text":"KeyValues Handle."},{"tag":"param:key","text":"Name of the key, or NULL_STRING."},{"tag":"param:value","text":"String value."}]},"kind":"native","returnType":"void","arguments":[{"type":"const char[]","name":"key","decl":"const char[] key","default":null},{"type":"const char[]","name":"value","decl":"const char[] value","default":null}]},{"name":"SetNum","docStart":4637,"docEnd":4785,"docs":{"brief":"Sets an integer value of a KeyValues key.","tags":[{"tag":"","text":"Sets an integer value of a KeyValues key."},{"tag":"param:key","text":"Name of the key, or NULL_STRING."},{"tag":"param:value","text":"Value number."}]},"kind":"native","returnType":"void","arguments":[{"type":"const char[]","name":"key","decl":"const char[] key","default":null},{"type":"int","name":"value","decl":"int value","default":null}]},{"name":"SetUInt64","docStart":4848,"docEnd":5033,"docs":{"brief":"Sets a large integer value of a KeyValues key.","tags":[{"tag":"","text":"Sets a large integer value of a KeyValues key."},{"tag":"param:key","text":"Name of the key, or NULL_STRING."},{"tag":"param:value","text":"Large integer value (0=High bits, 1=Low bits)"}]},"kind":"native","returnType":"void","arguments":[{"type":"const char[]","name":"key","decl":"const char[] key","default":null},{"type":"const int[2]","name":"value","decl":"const int value[2]","default":null}]},{"name":"SetFloat","docStart":5108,"docEnd":5270,"docs":{"brief":"Sets a floating point value of a KeyValues key.","tags":[{"tag":"","text":"Sets a floating point value of a KeyValues key."},{"tag":"param:key","text":"Name of the key, or NULL_STRING."},{"tag":"param:value","text":"Floating point value."}]},"kind":"native","returnType":"void","arguments":[{"type":"const char[]","name":"key","decl":"const char[] key","default":null},{"type":"float","name":"value","decl":"float value","default":null}]},{"name":"SetColor","docStart":5337,"docEnd":5603,"docs":{"brief":"Sets a set of color values of a KeyValues key.","tags":[{"tag":"","text":"Sets a set of color values of a KeyValues key."},{"tag":"param:key","text":"Name of the key, or NULL_STRING."},{"tag":"param:r","text":"Red value."},{"tag":"param:g","text":"Green value."},{"tag":"param:b","text":"Blue value."},{"tag":"param:a","text":"Alpha value."}]},"kind":"native","returnType":"void","arguments":[{"type":"const char[]","name":"key","decl":"const char[] key","default":null},{"type":"int","name":"r","decl":"int r","default":null},{"type":"int","name":"g","decl":"int g","default":null},{"type":"int","name":"b","decl":"int b","default":null},{"type":"int","name":"a","decl":"int a","default":"0"}]},{"name":"SetColor4","docStart":5687,"docEnd":5863,"docs":{"brief":"Sets a set of color values of a KeyValues key.","tags":[{"tag":"","text":"Sets a set of color values of a KeyValues key."},{"tag":"param:key","text":"Name of the key, or NULL_STRING."},{"tag":"param:color","text":"Red, green, blue and alpha channels."}]},"kind":"stock","returnType":"void","arguments":[{"type":"const char[]","name":"key","decl":"const char[] key","default":null},{"type":"const int[4]","name":"color","decl":"const int color[4]","default":null}]},{"name":"SetVector","docStart":5999,"docEnd":6145,"docs":{"brief":"Sets a vector value of a KeyValues key.","tags":[{"tag":"","text":"Sets a vector value of a KeyValues key."},{"tag":"param:key","text":"Name of the key, or NULL_STRING."},{"tag":"param:vec","text":"Vector value."}]},"kind":"native","returnType":"void","arguments":[{"type":"const char[]","name":"key","decl":"const char[] key","default":null},{"type":"const float[3]","name":"vec","decl":"const float vec[3]","default":null}]},{"name":"GetString","docStart":6220,"docEnd":6532,"docs":{"brief":"Retrieves a string value from a KeyValues key.","tags":[{"tag":"","text":"Retrieves a string value from a KeyValues key."},{"tag":"param:key","text":"Name of the key, or NULL_STRING."},{"tag":"param:value","text":"Buffer to store key value in."},{"tag":"param:maxlength","text":"Maximum length of the value buffer."},{"tag":"param:defvalue","text":"Optional default value to use if the key is not found."}]},"kind":"native","returnType":"void","arguments":[{"type":"const char[]","name":"key","decl":"const char[] key","default":null},{"type":"char[]","name":"value","decl":"char[] value","default":null},{"type":"int","name":"maxlength","decl":"int maxlength","default":null},{"type":"const char[]","name":"defvalue","decl":"const char[] defvalue","default":"\"\""}]},{"name":"GetNum","docStart":6642,"docEnd":6890,"docs":{"brief":"Retrieves an integer value from a KeyValues key.","tags":[{"tag":"","text":"Retrieves an integer value from a KeyValues key."},{"tag":"param:key","text":"Name of the key, or NULL_STRING."},{"tag":"param:defvalue","text":"Optional default value to use if the key is not found."},{"tag":"return","text":"Integer value of the key."}]},"kind":"native","returnType":"int","arguments":[{"type":"const char[]","name":"key","decl":"const char[] key","default":null},{"type":"int","name":"defvalue","decl":"int defvalue","default":"0"}]},{"name":"GetFloat","docStart":6957,"docEnd":7218,"docs":{"brief":"Retrieves a floating point value from a KeyValues key.","tags":[{"tag":"","text":"Retrieves a floating point value from a KeyValues key."},{"tag":"param:key","text":"Name of the key, or NULL_STRING."},{"tag":"param:defvalue","text":"Optional default value to use if the key is not found."},{"tag":"return","text":"Floating point value of the key."}]},"kind":"native","returnType":"float","arguments":[{"type":"const char[]","name":"key","decl":"const char[] key","default":null},{"type":"float","name":"defvalue","decl":"float defvalue","default":"0.000000"}]},{"name":"GetColor","docStart":7293,"docEnd":7638,"docs":{"brief":"Retrieves a set of color values from a KeyValues key.","tags":[{"tag":"","text":"Retrieves a set of color values from a KeyValues key."},{"tag":"param:key","text":"Name of the key, or NULL_STRING."},{"tag":"param:r","text":"Red value, set by reference."},{"tag":"param:g","text":"Green value, set by reference."},{"tag":"param:b","text":"Blue value, set by reference."},{"tag":"param:a","text":"Alpha value, set by reference."}]},"kind":"native","returnType":"void","arguments":[{"type":"const char[]","name":"key","decl":"const char[] key","default":null},{"type":"int&","name":"r","decl":"int& r","default":null},{"type":"int&","name":"g","decl":"int& g","default":null},{"type":"int&","name":"b","decl":"int& b","default":null},{"type":"int&","name":"a","decl":"int& a","default":null}]},{"name":"GetColor4","docStart":7724,"docEnd":7908,"docs":{"brief":"Retrieves a set of color values from a KeyValues key.","tags":[{"tag":"","text":"Retrieves a set of color values from a KeyValues key."},{"tag":"param:key","text":"Name of the key, or NULL_STRING."},{"tag":"param:color","text":"Red, green, blue, and alpha channels."}]},"kind":"stock","returnType":"void","arguments":[{"type":"const char[]","name":"key","decl":"const char[] key","default":null},{"type":"int[4]","name":"color","decl":"int color[4]","default":null}]},{"name":"GetUInt64","docStart":8097,"docEnd":8362,"docs":{"brief":"Retrieves a large integer value from a KeyValues key.","tags":[{"tag":"","text":"Retrieves a large integer value from a KeyValues key."},{"tag":"param:key","text":"Name of the key, or NULL_STRING."},{"tag":"param:value","text":"Array to represent the large integer."},{"tag":"param:defvalue","text":"Optional default value to use if the key is not found."}]},"kind":"native","returnType":"void","arguments":[{"type":"const char[]","name":"key","decl":"const char[] key","default":null},{"type":"int[2]","name":"value","decl":"int value[2]","default":null},{"type":"int[2]","name":"defvalue","decl":"int defvalue[2]","default":"{ 0, 0 }"}]},{"name":"GetVector","docStart":8454,"docEnd":8716,"docs":{"brief":"Retrieves a vector value from a KeyValues key.","tags":[{"tag":"","text":"Retrieves a vector value from a KeyValues key."},{"tag":"param:key","text":"Name of the key, or NULL_STRING."},{"tag":"param:vec","text":"Destination vector to store the value in."},{"tag":"param:defvalue","text":"Optional default value to use if the key is not found."}]},"kind":"native","returnType":"void","arguments":[{"type":"const char[]","name":"key","decl":"const char[] key","default":null},{"type":"float[3]","name":"vec","decl":"float vec[3]","default":null},{"type":"const float[3]","name":"defvalue","decl":"const float defvalue[3]","default":"{ 0.000000, 0.000000, 0.000000 }"}]},{"name":"JumpToKey","docStart":8826,"docEnd":9117,"docs":{"brief":"Sets the current position in the KeyValues tree to the given key.","tags":[{"tag":"","text":"Sets the current position in the KeyValues tree to the given key."},{"tag":"param:key","text":"Name of the key."},{"tag":"param:create","text":"If true, and the key does not exist, it will be created."},{"tag":"return","text":"True if the key exists, false if it does not and was not created."}]},"kind":"native","returnType":"bool","arguments":[{"type":"const char[]","name":"key","decl":"const char[] key","default":null},{"type":"bool","name":"create","decl":"bool create","default":"false"}]},{"name":"JumpToKeySymbol","docStart":9191,"docEnd":9376,"docs":{"brief":"Sets the current position in the KeyValues tree to the given key.","tags":[{"tag":"","text":"Sets the current position in the KeyValues tree to the given key."},{"tag":"param:id","text":"KeyValues id."},{"tag":"return","text":"True if the key exists, false if it does not."}]},"kind":"native","returnType":"bool","arguments":[{"type":"int","name":"id","decl":"int id","default":null}]},{"name":"GotoFirstSubKey","docStart":9427,"docEnd":9712,"docs":{"brief":"Sets the current position in the KeyValues tree to the first sub key.\nThis native adds to the internal traversal stack.","tags":[{"tag":"","text":"Sets the current position in the KeyValues tree to the first sub key.\nThis native adds to the internal traversal stack."},{"tag":"param:keyOnly","text":"If false, non-keys will be traversed (values)."},{"tag":"return","text":"True on success, false if there was no first sub key."}]},"kind":"native","returnType":"bool","arguments":[{"type":"bool","name":"keyOnly","decl":"bool keyOnly","default":"true"}]},{"name":"GotoNextKey","docStart":9774,"docEnd":10145,"docs":{"brief":"Sets the current position in the KeyValues tree to the next sub key.\nThis native does NOT add to the internal traversal stack, and thus\nGoBack() is not needed for each successive call to this function.","tags":[{"tag":"","text":"Sets the current position in the KeyValues tree to the next sub key.\nThis native does NOT add to the internal traversal stack, and thus\nGoBack() is not needed for each successive call to this function."},{"tag":"param:keyOnly","text":"If false, non-keys will be traversed (values)."},{"tag":"return","text":"True on success, false if there was no next sub key."}]},"kind":"native","returnType":"bool","arguments":[{"type":"bool","name":"keyOnly","decl":"bool keyOnly","default":"true"}]},{"name":"SavePosition","docStart":10203,"docEnd":10452,"docs":{"brief":"Saves the current position in the traversal stack onto the traversal\nstack.  This can be useful if you wish to use KvGotoNextKey() and\nhave the previous key saved for backwards traversal.","tags":[{"tag":"","text":"Saves the current position in the traversal stack onto the traversal\nstack.  This can be useful if you wish to use KvGotoNextKey() and\nhave the previous key saved for backwards traversal."},{"tag":"param:kv","text":"KeyValues Handle."}]},"kind":"native","returnType":"void","arguments":[]},{"name":"GoBack","docStart":10494,"docEnd":10863,"docs":{"brief":"Jumps back to the previous position.  Returns false if there are no\nprevious positions (i.e., at the root node).  This should be called\nonce for each successful Jump call, in order to return to the top node.\nThis function pops one node off the internal traversal stack.","tags":[{"tag":"","text":"Jumps back to the previous position.  Returns false if there are no\nprevious positions (i.e., at the root node).  This should be called\nonce for each successful Jump call, in order to return to the top node.\nThis function pops one node off the internal traversal stack."},{"tag":"return","text":"True on success, false if there is no higher node."}]},"kind":"native","returnType":"bool","arguments":[]},{"name":"DeleteKey","docStart":10899,"docEnd":11069,"docs":{"brief":"Removes the given key from the current position.","tags":[{"tag":"","text":"Removes the given key from the current position."},{"tag":"param:key","text":"Name of the key."},{"tag":"return","text":"True on success, false if key did not exist."}]},"kind":"native","returnType":"bool","arguments":[{"type":"const char[]","name":"key","decl":"const char[] key","default":null}]},{"name":"DeleteThis","docStart":11124,"docEnd":11874,"docs":{"brief":"Removes the current sub-key and attempts to set the position\nto the sub-key after the removed one.  If no such sub-key exists,\nthe position will be the parent key in the traversal stack.\nGiven the sub-key having position \"N\" in the traversal stack, the\nremoval will always take place from position \"N-1.\"","tags":[{"tag":"","text":"Removes the current sub-key and attempts to set the position\nto the sub-key after the removed one.  If no such sub-key exists,\nthe position will be the parent key in the traversal stack.\nGiven the sub-key having position \"N\" in the traversal stack, the\nremoval will always take place from position \"N-1.\""},{"tag":"param:kv","text":"KeyValues Handle."},{"tag":"return","text":"1 if removal succeeded and there was another key.\n0 if the current node was not contained in the\nprevious node, or no previous node exists.\n-1 if removal succeeded and there were no more keys,\nthus the state is as if KvGoBack() was called."}]},"kind":"native","returnType":"int","arguments":[]},{"name":"Rewind","docStart":11913,"docEnd":12147,"docs":{"brief":"Sets the position back to the top node, emptying the entire node\ntraversal history.  This can be used instead of looping KvGoBack()\nif recursive iteration is not important.","tags":[{"tag":"","text":"Sets the position back to the top node, emptying the entire node\ntraversal history.  This can be used instead of looping KvGoBack()\nif recursive iteration is not important."},{"tag":"param:kv","text":"KeyValues Handle."}]},"kind":"native","returnType":"void","arguments":[]},{"name":"GetSectionName","docStart":12183,"docEnd":12408,"docs":{"brief":"Retrieves the current section name.","tags":[{"tag":"","text":"Retrieves the current section name."},{"tag":"param:section","text":"Buffer to store the section name."},{"tag":"param:maxlength","text":"Maximum length of the name buffer."},{"tag":"return","text":"True on success, false on failure."}]},"kind":"native","returnType":"bool","arguments":[{"type":"char[]","name":"section","decl":"char[] section","default":null},{"type":"int","name":"maxlength","decl":"int maxlength","default":null}]},{"name":"SetSectionName","docStart":12481,"docEnd":12559,"docs":{"brief":"Sets the current section name.","tags":[{"tag":"","text":"Sets the current section name."},{"tag":"param:section","text":"Section name."}]},"kind":"native","returnType":"void","arguments":[{"type":"const char[]","name":"section","decl":"const char[] section","default":null}]},{"name":"GetDataType","docStart":12623,"docEnd":12753,"docs":{"brief":"Returns the data type at a key.","tags":[{"tag":"","text":"Returns the data type at a key."},{"tag":"param:key","text":"Key name."},{"tag":"return","text":"KvDataType value of the key."}]},"kind":"native","returnType":"KvDataTypes","arguments":[{"type":"const char[]","name":"key","decl":"const char[] key","default":null}]},{"name":"SetEscapeSequences","docStart":12817,"docEnd":13076,"docs":{"brief":"Sets whether or not the KeyValues parser will read escape sequences.\nFor example, \\n would be read as a literal newline.  This defaults\nto false for new KeyValues structures.","tags":[{"tag":"","text":"Sets whether or not the KeyValues parser will read escape sequences.\nFor example, \\n would be read as a literal newline.  This defaults\nto false for new KeyValues structures."},{"tag":"param:useEscapes","text":"Whether or not to read escape sequences."}]},"kind":"native","returnType":"void","arguments":[{"type":"bool","name":"useEscapes","decl":"bool useEscapes","default":null}]},{"name":"NodesInStack","docStart":13139,"docEnd":13378,"docs":{"brief":"Returns the position in the jump stack; I.e. the number of calls\nrequired for KvGoBack to return to the root node.  If at the root node,\n0 is returned.","tags":[{"tag":"","text":"Returns the position in the jump stack; I.e. the number of calls\nrequired for KvGoBack to return to the root node.  If at the root node,\n0 is returned."},{"tag":"return","text":"Number of non-root nodes in the jump stack."}]},"kind":"native","returnType":"int","arguments":[]},{"name":"FindKeyById","docStart":13419,"docEnd":13676,"docs":{"brief":"Finds a KeyValues name by id.","tags":[{"tag":"","text":"Finds a KeyValues name by id."},{"tag":"param:id","text":"KeyValues id."},{"tag":"param:name","text":"Buffer to store the name."},{"tag":"param:maxlength","text":"Maximum length of the value buffer."},{"tag":"return","text":"True on success, false if id not found."}]},"kind":"native","returnType":"bool","arguments":[{"type":"int","name":"id","decl":"int id","default":null},{"type":"char[]","name":"name","decl":"char[] name","default":null},{"type":"int","name":"maxlength","decl":"int maxlength","default":null}]},{"name":"GetNameSymbol","docStart":13751,"docEnd":13959,"docs":{"brief":"Finds a KeyValues id inside a KeyValues tree.","tags":[{"tag":"","text":"Finds a KeyValues id inside a KeyValues tree."},{"tag":"param:key","text":"Key name."},{"tag":"param:id","text":"Id of the found KeyValue."},{"tag":"return","text":"True on success, false if key not found."}]},"kind":"native","returnType":"bool","arguments":[{"type":"const char[]","name":"key","decl":"const char[] key","default":null},{"type":"int&","name":"id","decl":"int& id","default":null}]},{"name":"GetSectionSymbol","docStart":14027,"docEnd":14226,"docs":{"brief":"Retrieves the current section id.","tags":[{"tag":"","text":"Retrieves the current section id."},{"tag":"param:kv","text":"KeyValues Handle."},{"tag":"param:id","text":"Id of the current section."},{"tag":"return","text":"True on success, false on failure."}]},"kind":"native","returnType":"bool","arguments":[{"type":"int&","name":"id","decl":"int& id","default":null}]}],"properties":[{"name":"ExportLength","docStart":3214,"docEnd":3274,"docs":{"brief":"Amount of bytes written by ExportToFile & ExportToString.","tags":[{"tag":"","text":"Amount of bytes written by ExportToFile & ExportToString."}]},"type":"int","getter":true,"setter":false}]}],"enumstructs":[],"constants":[],"enums":[{"name":"KvDataTypes","docStart":1659,"docEnd":1697,"docs":{"brief":"KeyValue data value types","tags":[{"tag":"","text":"KeyValue data value types"}]},"entries":[{"name":"KvData_None","docStart":1741,"docEnd":1789,"docs":{"brief":"Type could not be identified, or no type","tags":[{"tag":"","text":"Type could not be identified, or no type"}]},"value":"0"},{"name":"KvData_String","docStart":1812,"docEnd":1832,"docs":{"brief":"String value","tags":[{"tag":"","text":"String value"}]},"value":null},{"name":"KvData_Int","docStart":1855,"docEnd":1876,"docs":{"brief":"Integer value","tags":[{"tag":"","text":"Integer value"}]},"value":null},{"name":"KvData_Float","docStart":1899,"docEnd":1927,"docs":{"brief":"Floating point value","tags":[{"tag":"","text":"Floating point value"}]},"value":null},{"name":"KvData_Ptr","docStart":1950,"docEnd":1997,"docs":{"brief":"Pointer value (sometimes called \"long\")","tags":[{"tag":"","text":"Pointer value (sometimes called \"long\")"}]},"value":null},{"name":"KvData_WString","docStart":2020,"docEnd":2045,"docs":{"brief":"Wide string value","tags":[{"tag":"","text":"Wide string value"}]},"value":null},{"name":"KvData_Color","docStart":2068,"docEnd":2087,"docs":{"brief":"Color value","tags":[{"tag":"","text":"Color value"}]},"value":null},{"name":"KvData_UInt64","docStart":2110,"docEnd":2149,"docs":{"brief":"Large integer value\n---","tags":[{"tag":"","text":"Large integer value"},{"tag":"","text":"---"}]},"value":null},{"name":"KvData_NUMTYPES","docStart":0,"docEnd":0,"docs":null,"value":null}]}],"typesets":[],"typedefs":[]}