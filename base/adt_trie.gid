{"functions":[{"name":"CreateTrie","docStart":6579,"docEnd":7229,"docs":{"brief":"Creates a hash map. A hash map is a container that can map strings (called\n\"keys\") to arbitrary values (cells, arrays, or strings). Keys in a hash map\nare unique. That is, there is at most one entry in the map for a given key.\n\nInsertion, deletion, and lookup in a hash map are all considered to be fast\noperations, amortized to O(1), or constant time.\n\nThe word \"Trie\" in this API is historical. As of SourceMod 1.6, tries have\nbeen internally replaced with hash tables, which have O(1) insertion time\ninstead of O(n).","tags":[{"tag":"","text":"Creates a hash map. A hash map is a container that can map strings (called\n\"keys\") to arbitrary values (cells, arrays, or strings). Keys in a hash map\nare unique. That is, there is at most one entry in the map for a given key.\n\nInsertion, deletion, and lookup in a hash map are all considered to be fast\noperations, amortized to O(1), or constant time.\n\nThe word \"Trie\" in this API is historical. As of SourceMod 1.6, tries have\nbeen internally replaced with hash tables, which have O(1) insertion time\ninstead of O(n)."},{"tag":"return","text":"New Map Handle, which must be freed via CloseHandle()."}]},"kind":"native","returnType":"StringMap","arguments":[]},{"name":"SetTrieValue","docStart":7265,"docEnd":7673,"docs":{"brief":"Sets a value in a hash map, either inserting a new entry or replacing an old one.","tags":[{"tag":"","text":"Sets a value in a hash map, either inserting a new entry or replacing an old one."},{"tag":"param:map","text":"Map Handle."},{"tag":"param:key","text":"Key string."},{"tag":"param:value","text":"Value to store at this key."},{"tag":"param:replace","text":"If false, operation will fail if the key is already set."},{"tag":"return","text":"True on success, false on failure."},{"tag":"error","text":"Invalid Handle."}]},"kind":"native","returnType":"bool","arguments":[{"type":"Handle","name":"map","decl":"Handle map","default":null},{"type":"const char[]","name":"key","decl":"const char[] key","default":null},{"type":"any","name":"value","decl":"any value","default":null},{"type":"bool","name":"replace","decl":"bool replace","default":"true"}]},{"name":"SetTrieArray","docStart":7764,"docEnd":8217,"docs":{"brief":"Sets an array value in a Map, either inserting a new entry or replacing an old one.","tags":[{"tag":"","text":"Sets an array value in a Map, either inserting a new entry or replacing an old one."},{"tag":"param:map","text":"Map Handle."},{"tag":"param:key","text":"Key string."},{"tag":"param:array","text":"Array to store."},{"tag":"param:num_items","text":"Number of items in the array."},{"tag":"param:replace","text":"If false, operation will fail if the key is already set."},{"tag":"return","text":"True on success, false on failure."},{"tag":"error","text":"Invalid Handle."}]},"kind":"native","returnType":"bool","arguments":[{"type":"Handle","name":"map","decl":"Handle map","default":null},{"type":"const char[]","name":"key","decl":"const char[] key","default":null},{"type":"const any[]","name":"array","decl":"const any[] array","default":null},{"type":"int","name":"num_items","decl":"int num_items","default":null},{"type":"bool","name":"replace","decl":"bool replace","default":"true"}]},{"name":"SetTrieString","docStart":8331,"docEnd":8730,"docs":{"brief":"Sets a string value in a Map, either inserting a new entry or replacing an old one.","tags":[{"tag":"","text":"Sets a string value in a Map, either inserting a new entry or replacing an old one."},{"tag":"param:map","text":"Map Handle."},{"tag":"param:key","text":"Key string."},{"tag":"param:value","text":"String to store."},{"tag":"param:replace","text":"If false, operation will fail if the key is already set."},{"tag":"return","text":"True on success, false on failure."},{"tag":"error","text":"Invalid Handle."}]},"kind":"native","returnType":"bool","arguments":[{"type":"Handle","name":"map","decl":"Handle map","default":null},{"type":"const char[]","name":"key","decl":"const char[] key","default":null},{"type":"const char[]","name":"value","decl":"const char[] value","default":null},{"type":"bool","name":"replace","decl":"bool replace","default":"true"}]},{"name":"GetTrieValue","docStart":8831,"docEnd":9193,"docs":{"brief":"Retrieves a value in a Map.","tags":[{"tag":"","text":"Retrieves a value in a Map."},{"tag":"param:map","text":"Map Handle."},{"tag":"param:key","text":"Key string."},{"tag":"param:value","text":"Variable to store value."},{"tag":"return","text":"True on success.  False if the key is not set, or the key is set\nas an array or string (not a value)."},{"tag":"error","text":"Invalid Handle."}]},"kind":"native","returnType":"bool","arguments":[{"type":"Handle","name":"map","decl":"Handle map","default":null},{"type":"const char[]","name":"key","decl":"const char[] key","default":null},{"type":"any&","name":"value","decl":"any& value","default":null}]},{"name":"GetTrieArray","docStart":9266,"docEnd":9781,"docs":{"brief":"Retrieves an array in a Map.","tags":[{"tag":"","text":"Retrieves an array in a Map."},{"tag":"param:map","text":"Map Handle."},{"tag":"param:key","text":"Key string."},{"tag":"param:array","text":"Buffer to store array."},{"tag":"param:max_size","text":"Maximum size of array buffer."},{"tag":"param:size","text":"Optional parameter to store the number of elements written to the buffer."},{"tag":"return","text":"True on success.  False if the key is not set, or the key is set\nas a value or string (not an array)."},{"tag":"error","text":"Invalid Handle."}]},"kind":"native","returnType":"bool","arguments":[{"type":"Handle","name":"map","decl":"Handle map","default":null},{"type":"const char[]","name":"key","decl":"const char[] key","default":null},{"type":"any[]","name":"array","decl":"any[] array","default":null},{"type":"int","name":"max_size","decl":"int max_size","default":null},{"type":"int&","name":"size","decl":"int& size","default":"0"}]},{"name":"GetTrieString","docStart":9882,"docEnd":10394,"docs":{"brief":"Retrieves a string in a Map.","tags":[{"tag":"","text":"Retrieves a string in a Map."},{"tag":"param:map","text":"Map Handle."},{"tag":"param:key","text":"Key string."},{"tag":"param:value","text":"Buffer to store value."},{"tag":"param:max_size","text":"Maximum size of string buffer."},{"tag":"param:size","text":"Optional parameter to store the number of bytes written to the buffer."},{"tag":"return","text":"True on success.  False if the key is not set, or the key is set\nas a value or array (not a string)."},{"tag":"error","text":"Invalid Handle."}]},"kind":"native","returnType":"bool","arguments":[{"type":"Handle","name":"map","decl":"Handle map","default":null},{"type":"const char[]","name":"key","decl":"const char[] key","default":null},{"type":"char[]","name":"value","decl":"char[] value","default":null},{"type":"int","name":"max_size","decl":"int max_size","default":null},{"type":"int&","name":"size","decl":"int& size","default":"0"}]},{"name":"RemoveFromTrie","docStart":10497,"docEnd":10736,"docs":{"brief":"Removes a key entry from a Map.","tags":[{"tag":"","text":"Removes a key entry from a Map."},{"tag":"param:map","text":"Map Handle."},{"tag":"param:key","text":"Key string."},{"tag":"return","text":"True on success, false if the value was never set."},{"tag":"error","text":"Invalid Handle."}]},"kind":"native","returnType":"bool","arguments":[{"type":"Handle","name":"map","decl":"Handle map","default":null},{"type":"const char[]","name":"key","decl":"const char[] key","default":null}]},{"name":"ClearTrie","docStart":10799,"docEnd":10924,"docs":{"brief":"Clears all entries from a Map.","tags":[{"tag":"","text":"Clears all entries from a Map."},{"tag":"param:map","text":"Map Handle."},{"tag":"error","text":"Invalid Handle."}]},"kind":"native","returnType":"void","arguments":[{"type":"Handle","name":"map","decl":"Handle map","default":null}]},{"name":"GetTrieSize","docStart":10964,"docEnd":11158,"docs":{"brief":"Retrieves the number of elements in a map.","tags":[{"tag":"","text":"Retrieves the number of elements in a map."},{"tag":"param:map","text":"Map Handle."},{"tag":"return","text":"Number of elements in the trie."},{"tag":"error","text":"Invalid Handle."}]},"kind":"native","returnType":"int","arguments":[{"type":"Handle","name":"map","decl":"Handle map","default":null}]},{"name":"CreateTrieSnapshot","docStart":11199,"docEnd":11537,"docs":{"brief":"Creates a snapshot of all keys in the map. If the map is changed after this\ncall, the changes are not reflected in the snapshot. Keys are not sorted.","tags":[{"tag":"","text":"Creates a snapshot of all keys in the map. If the map is changed after this\ncall, the changes are not reflected in the snapshot. Keys are not sorted."},{"tag":"param:map","text":"Map Handle."},{"tag":"return","text":"New Map Snapshot Handle, which must be closed via CloseHandle()."},{"tag":"error","text":"Invalid Handle."}]},"kind":"native","returnType":"Handle","arguments":[{"type":"Handle","name":"map","decl":"Handle map","default":null}]},{"name":"TrieSnapshotLength","docStart":11588,"docEnd":11904,"docs":{"brief":"Returns the number of keys in a map snapshot. Note that this may be\ndifferent from the size of the map, since the map can change after the\nsnapshot of its keys was taken.","tags":[{"tag":"","text":"Returns the number of keys in a map snapshot. Note that this may be\ndifferent from the size of the map, since the map can change after the\nsnapshot of its keys was taken."},{"tag":"param:snapshot","text":"Map snapshot."},{"tag":"return","text":"Number of keys."},{"tag":"error","text":"Invalid Handle."}]},"kind":"native","returnType":"int","arguments":[{"type":"Handle","name":"snapshot","decl":"Handle snapshot","default":null}]},{"name":"TrieSnapshotKeyBufferSize","docStart":11957,"docEnd":12311,"docs":{"brief":"Returns the buffer size required to store a given key. That is, it returns\nthe length of the key plus one.","tags":[{"tag":"","text":"Returns the buffer size required to store a given key. That is, it returns\nthe length of the key plus one."},{"tag":"param:snapshot","text":"Map snapshot."},{"tag":"param:index","text":"Key index (starting from 0)."},{"tag":"return","text":"Buffer size required to store the key string."},{"tag":"error","text":"Invalid Handle or index out of range."}]},"kind":"native","returnType":"int","arguments":[{"type":"Handle","name":"snapshot","decl":"Handle snapshot","default":null},{"type":"int","name":"index","decl":"int index","default":null}]},{"name":"GetTrieSnapshotKey","docStart":12382,"docEnd":12765,"docs":{"brief":"Retrieves the key string of a given key in a map snapshot.","tags":[{"tag":"","text":"Retrieves the key string of a given key in a map snapshot."},{"tag":"param:snapshot","text":"Map snapshot."},{"tag":"param:index","text":"Key index (starting from 0)."},{"tag":"param:buffer","text":"String buffer."},{"tag":"param:maxlength","text":"Maximum buffer length."},{"tag":"return","text":"Number of bytes written to the buffer."},{"tag":"error","text":"Invalid Handle or index out of range."}]},"kind":"native","returnType":"int","arguments":[{"type":"Handle","name":"snapshot","decl":"Handle snapshot","default":null},{"type":"int","name":"index","decl":"int index","default":null},{"type":"char[]","name":"buffer","decl":"char[] buffer","default":null},{"type":"int","name":"maxlength","decl":"int maxlength","default":null}]}],"methodmaps":[{"name":"StringMap","docStart":1659,"docEnd":1698,"docs":{"brief":"Object-oriented wrapper for maps.","tags":[{"tag":"","text":"Object-oriented wrapper for maps."}]},"parent":"Handle","methods":[{"name":"StringMap","docStart":1734,"docEnd":2366,"docs":{"brief":"Creates a hash map. A hash map is a container that can map strings (called\n\"keys\") to arbitrary values (cells, arrays, or strings). Keys in a hash map\nare unique. That is, there is at most one entry in the map for a given key.\n\nInsertion, deletion, and lookup in a hash map are all considered to be fast\noperations, amortized to O(1), or constant time.\n\nThe word \"Trie\" in this API is historical. As of SourceMod 1.6, tries have\nbeen internally replaced with hash tables, which have O(1) insertion time\ninstead of O(n).\n\nThe StringMap must be freed via delete or CloseHandle().","tags":[{"tag":"","text":"Creates a hash map. A hash map is a container that can map strings (called\n\"keys\") to arbitrary values (cells, arrays, or strings). Keys in a hash map\nare unique. That is, there is at most one entry in the map for a given key.\n\nInsertion, deletion, and lookup in a hash map are all considered to be fast\noperations, amortized to O(1), or constant time.\n\nThe word \"Trie\" in this API is historical. As of SourceMod 1.6, tries have\nbeen internally replaced with hash tables, which have O(1) insertion time\ninstead of O(n).\n\nThe StringMap must be freed via delete or CloseHandle()."}]},"kind":"native","returnType":"StringMap","arguments":[]},{"name":"SetValue","docStart":2400,"docEnd":2713,"docs":{"brief":"Sets a value in a hash map, either inserting a new entry or replacing an old one.","tags":[{"tag":"","text":"Sets a value in a hash map, either inserting a new entry or replacing an old one."},{"tag":"param:key","text":"Key string."},{"tag":"param:value","text":"Value to store at this key."},{"tag":"param:replace","text":"If false, operation will fail if the key is already set."},{"tag":"return","text":"True on success, false on failure."}]},"kind":"native","returnType":"bool","arguments":[{"type":"const char[]","name":"key","decl":"const char[] key","default":null},{"type":"any","name":"value","decl":"any value","default":null},{"type":"bool","name":"replace","decl":"bool replace","default":"true"}]},{"name":"SetArray","docStart":2797,"docEnd":3153,"docs":{"brief":"Sets an array value in a Map, either inserting a new entry or replacing an old one.","tags":[{"tag":"","text":"Sets an array value in a Map, either inserting a new entry or replacing an old one."},{"tag":"param:key","text":"Key string."},{"tag":"param:array","text":"Array to store."},{"tag":"param:num_items","text":"Number of items in the array."},{"tag":"param:replace","text":"If false, operation will fail if the key is already set."},{"tag":"return","text":"True on success, false on failure."}]},"kind":"native","returnType":"bool","arguments":[{"type":"const char[]","name":"key","decl":"const char[] key","default":null},{"type":"const any[]","name":"array","decl":"const any[] array","default":null},{"type":"int","name":"num_items","decl":"int num_items","default":null},{"type":"bool","name":"replace","decl":"bool replace","default":"true"}]},{"name":"SetString","docStart":3260,"docEnd":3564,"docs":{"brief":"Sets a string value in a Map, either inserting a new entry or replacing an old one.","tags":[{"tag":"","text":"Sets a string value in a Map, either inserting a new entry or replacing an old one."},{"tag":"param:key","text":"Key string."},{"tag":"param:value","text":"String to store."},{"tag":"param:replace","text":"If false, operation will fail if the key is already set."},{"tag":"return","text":"True on success, false on failure."}]},"kind":"native","returnType":"bool","arguments":[{"type":"const char[]","name":"key","decl":"const char[] key","default":null},{"type":"const char[]","name":"value","decl":"const char[] value","default":null},{"type":"bool","name":"replace","decl":"bool replace","default":"true"}]},{"name":"GetValue","docStart":3658,"docEnd":3925,"docs":{"brief":"Retrieves a value in a Map.","tags":[{"tag":"","text":"Retrieves a value in a Map."},{"tag":"param:key","text":"Key string."},{"tag":"param:value","text":"Variable to store value."},{"tag":"return","text":"True on success.  False if the key is not set, or the key is set\nas an array or string (not a value)."}]},"kind":"native","returnType":"bool","arguments":[{"type":"const char[]","name":"key","decl":"const char[] key","default":null},{"type":"any&","name":"value","decl":"any& value","default":null}]},{"name":"GetArray","docStart":3991,"docEnd":4442,"docs":{"brief":"Retrieves an array in a Map.","tags":[{"tag":"","text":"Retrieves an array in a Map."},{"tag":"param:map","text":"Map Handle."},{"tag":"param:key","text":"Key string."},{"tag":"param:array","text":"Buffer to store array."},{"tag":"param:max_size","text":"Maximum size of array buffer."},{"tag":"param:size","text":"Optional parameter to store the number of elements written to the buffer."},{"tag":"return","text":"True on success.  False if the key is not set, or the key is set\nas a value or string (not an array)."}]},"kind":"native","returnType":"bool","arguments":[{"type":"const char[]","name":"key","decl":"const char[] key","default":null},{"type":"any[]","name":"array","decl":"any[] array","default":null},{"type":"int","name":"max_size","decl":"int max_size","default":null},{"type":"int&","name":"size","decl":"int& size","default":"0"}]},{"name":"GetString","docStart":4536,"docEnd":4949,"docs":{"brief":"Retrieves a string in a Map.","tags":[{"tag":"","text":"Retrieves a string in a Map."},{"tag":"param:key","text":"Key string."},{"tag":"param:value","text":"Buffer to store value."},{"tag":"param:max_size","text":"Maximum size of string buffer."},{"tag":"param:size","text":"Optional parameter to store the number of bytes written to the buffer."},{"tag":"return","text":"True on success.  False if the key is not set, or the key is set\nas a value or array (not a string)."}]},"kind":"native","returnType":"bool","arguments":[{"type":"const char[]","name":"key","decl":"const char[] key","default":null},{"type":"char[]","name":"value","decl":"char[] value","default":null},{"type":"int","name":"max_size","decl":"int max_size","default":null},{"type":"int&","name":"size","decl":"int& size","default":"0"}]},{"name":"Remove","docStart":5045,"docEnd":5193,"docs":{"brief":"Removes a key entry from a Map.","tags":[{"tag":"","text":"Removes a key entry from a Map."},{"tag":"param:key","text":"Key string."},{"tag":"return","text":"True on success, false if the value was never set."}]},"kind":"native","returnType":"bool","arguments":[{"type":"const char[]","name":"key","decl":"const char[] key","default":null}]},{"name":"Clear","docStart":5245,"docEnd":5278,"docs":{"brief":"Clears all entries from a Map.","tags":[{"tag":"","text":"Clears all entries from a Map."}]},"kind":"native","returnType":"void","arguments":[]},{"name":"Snapshot","docStart":5313,"docEnd":5375,"docs":{"brief":"Create a snapshot of the map's keys. See StringMapSnapshot.","tags":[{"tag":"","text":"Create a snapshot of the map's keys. See StringMapSnapshot."}]},"kind":"native","returnType":"StringMapSnapshot","arguments":[]}],"properties":[{"name":"Size","docStart":5426,"docEnd":5471,"docs":{"brief":"Retrieves the number of elements in a map.","tags":[{"tag":"","text":"Retrieves the number of elements in a map."}]},"type":"int","getter":true,"setter":false}]},{"name":"StringMapSnapshot","docStart":5529,"docEnd":5711,"docs":{"brief":"A StringMapSnapshot is created via StringMap.Snapshot(). It captures the\nkeys on a map so they can be read. Snapshots must be freed with delete or\nCloseHandle().","tags":[{"tag":"","text":"A StringMapSnapshot is created via StringMap.Snapshot(). It captures the\nkeys on a map so they can be read. Snapshots must be freed with delete or\nCloseHandle()."}]},"parent":"Handle","methods":[{"name":"KeyBufferSize","docStart":5862,"docEnd":6143,"docs":{"brief":"Returns the buffer size required to store a given key. That is, it\nreturns the length of the key plus one.","tags":[{"tag":"","text":"Returns the buffer size required to store a given key. That is, it\nreturns the length of the key plus one."},{"tag":"param:index","text":"Key index (starting from 0)."},{"tag":"return","text":"Buffer size required to store the key string."},{"tag":"error","text":"Index out of range."}]},"kind":"native","returnType":"int","arguments":[{"type":"int","name":"index","decl":"int index","default":null}]},{"name":"GetKey","docStart":6194,"docEnd":6502,"docs":{"brief":"Retrieves the key string of a given key in a map snapshot.","tags":[{"tag":"","text":"Retrieves the key string of a given key in a map snapshot."},{"tag":"param:index","text":"Key index (starting from 0)."},{"tag":"param:buffer","text":"String buffer."},{"tag":"param:maxlength","text":"Maximum buffer length."},{"tag":"return","text":"Number of bytes written to the buffer."},{"tag":"error","text":"Index out of range."}]},"kind":"native","returnType":"int","arguments":[{"type":"int","name":"index","decl":"int index","default":null},{"type":"char[]","name":"buffer","decl":"char[] buffer","default":null},{"type":"int","name":"maxlength","decl":"int maxlength","default":null}]}],"properties":[{"name":"Length","docStart":5755,"docEnd":5805,"docs":{"brief":"Returns the number of keys in the map snapshot.","tags":[{"tag":"","text":"Returns the number of keys in the map snapshot."}]},"type":"int","getter":true,"setter":false}]}],"enumstructs":[],"constants":[],"enums":[],"typesets":[],"typedefs":[]}