{"functions":[{"name":"CreateDataPack","docStart":4078,"docEnd":4207,"docs":{"brief":"Creates a new data pack.","tags":[{"tag":"","text":"Creates a new data pack."},{"tag":"return","text":"A Handle to the data pack.  Must be closed with CloseHandle()."}]},"kind":"native","returnType":"DataPack","arguments":[]},{"name":"WritePackCell","docStart":4246,"docEnd":4429,"docs":{"brief":"Packs a normal cell into a data pack.","tags":[{"tag":"","text":"Packs a normal cell into a data pack."},{"tag":"param:pack","text":"Handle to the data pack."},{"tag":"param:cell","text":"Cell to add."},{"tag":"error","text":"Invalid handle."}]},"kind":"native","returnType":"void","arguments":[{"type":"Handle","name":"pack","decl":"Handle pack","default":null},{"type":"any","name":"cell","decl":"any cell","default":null}]},{"name":"WritePackFloat","docStart":4484,"docEnd":4662,"docs":{"brief":"Packs a float into a data pack.","tags":[{"tag":"","text":"Packs a float into a data pack."},{"tag":"param:pack","text":"Handle to the data pack."},{"tag":"param:val","text":"Float to add."},{"tag":"error","text":"Invalid handle."}]},"kind":"native","returnType":"void","arguments":[{"type":"Handle","name":"pack","decl":"Handle pack","default":null},{"type":"float","name":"val","decl":"float val","default":null}]},{"name":"WritePackString","docStart":4719,"docEnd":4899,"docs":{"brief":"Packs a string into a data pack.","tags":[{"tag":"","text":"Packs a string into a data pack."},{"tag":"param:pack","text":"Handle to the data pack."},{"tag":"param:str","text":"String to add."},{"tag":"error","text":"Invalid handle."}]},"kind":"native","returnType":"void","arguments":[{"type":"Handle","name":"pack","decl":"Handle pack","default":null},{"type":"const char[]","name":"str","decl":"const char[] str","default":null}]},{"name":"WritePackFunction","docStart":4964,"docEnd":5164,"docs":{"brief":"Packs a function pointer into a data pack.","tags":[{"tag":"","text":"Packs a function pointer into a data pack."},{"tag":"param:pack","text":"Handle to the data pack."},{"tag":"param:fktptr","text":"Function pointer to add."},{"tag":"error","text":"Invalid handle."}]},"kind":"native","returnType":"void","arguments":[{"type":"Handle","name":"pack","decl":"Handle pack","default":null},{"type":"Function","name":"fktptr","decl":"Function fktptr","default":null}]},{"name":"ReadPackCell","docStart":5230,"docEnd":5422,"docs":{"brief":"Reads a cell from a data pack.","tags":[{"tag":"","text":"Reads a cell from a data pack."},{"tag":"param:pack","text":"Handle to the data pack."},{"tag":"return","text":"Cell value."},{"tag":"error","text":"Invalid handle, or bounds error."}]},"kind":"native","returnType":"any","arguments":[{"type":"Handle","name":"pack","decl":"Handle pack","default":null}]},{"name":"ReadPackFloat","docStart":5465,"docEnd":5659,"docs":{"brief":"Reads a float from a data pack.","tags":[{"tag":"","text":"Reads a float from a data pack."},{"tag":"param:pack","text":"Handle to the data pack."},{"tag":"return","text":"Float value."},{"tag":"error","text":"Invalid handle, or bounds error."}]},"kind":"native","returnType":"float","arguments":[{"type":"Handle","name":"pack","decl":"Handle pack","default":null}]},{"name":"ReadPackString","docStart":5705,"docEnd":5979,"docs":{"brief":"Reads a string from a data pack.","tags":[{"tag":"","text":"Reads a string from a data pack."},{"tag":"param:pack","text":"Handle to the data pack."},{"tag":"param:buffer","text":"Destination string buffer."},{"tag":"param:maxlen","text":"Maximum length of output string buffer."},{"tag":"error","text":"Invalid handle, or bounds error."}]},"kind":"native","returnType":"void","arguments":[{"type":"Handle","name":"pack","decl":"Handle pack","default":null},{"type":"char[]","name":"buffer","decl":"char[] buffer","default":null},{"type":"int","name":"maxlen","decl":"int maxlen","default":null}]},{"name":"ReadPackFunction","docStart":6052,"docEnd":6262,"docs":{"brief":"Reads a function pointer from a data pack.","tags":[{"tag":"","text":"Reads a function pointer from a data pack."},{"tag":"param:pack","text":"Handle to the data pack."},{"tag":"return","text":"Function pointer."},{"tag":"error","text":"Invalid handle, or bounds error."}]},"kind":"native","returnType":"Function","arguments":[{"type":"Handle","name":"pack","decl":"Handle pack","default":null}]},{"name":"ResetPack","docStart":6314,"docEnd":6518,"docs":{"brief":"Resets the position in a data pack.","tags":[{"tag":"","text":"Resets the position in a data pack."},{"tag":"param:pack","text":"Handle to the data pack."},{"tag":"param:clear","text":"If true, clears the contained data."},{"tag":"error","text":"Invalid handle."}]},"kind":"native","returnType":"void","arguments":[{"type":"Handle","name":"pack","decl":"Handle pack","default":null},{"type":"bool","name":"clear","decl":"bool clear","default":"false"}]},{"name":"GetPackPosition","docStart":6577,"docEnd":6830,"docs":{"brief":"Returns the read or write position in a data pack.","tags":[{"tag":"","text":"Returns the read or write position in a data pack."},{"tag":"param:pack","text":"Handle to the data pack."},{"tag":"return","text":"Position in the data pack, only usable with calls to SetPackPosition."},{"tag":"error","text":"Invalid handle."}]},"kind":"native","returnType":"DataPackPos","arguments":[{"type":"Handle","name":"pack","decl":"Handle pack","default":null}]},{"name":"SetPackPosition","docStart":6884,"docEnd":7189,"docs":{"brief":"Sets the read/write position in a data pack.","tags":[{"tag":"","text":"Sets the read/write position in a data pack."},{"tag":"param:pack","text":"Handle to the data pack."},{"tag":"param:position","text":"New position to set. Must have been previously retrieved from a call to GetPackPosition."},{"tag":"error","text":"Invalid handle, or position is beyond the pack bounds."}]},"kind":"native","returnType":"void","arguments":[{"type":"Handle","name":"pack","decl":"Handle pack","default":null},{"type":"DataPackPos","name":"position","decl":"DataPackPos position","default":null}]},{"name":"IsPackReadable","docStart":7258,"docEnd":7597,"docs":{"brief":"Returns whether or not a specified number of bytes from the data pack\nposition to the end can be read.","tags":[{"tag":"","text":"Returns whether or not a specified number of bytes from the data pack\nposition to the end can be read."},{"tag":"param:pack","text":"Handle to the data pack."},{"tag":"param:bytes","text":"Number of bytes to simulate reading."},{"tag":"return","text":"True if can be read, false otherwise."},{"tag":"error","text":"Invalid handle."}]},"kind":"native","returnType":"bool","arguments":[{"type":"Handle","name":"pack","decl":"Handle pack","default":null},{"type":"int","name":"bytes","decl":"int bytes","default":null}]}],"methodmaps":[{"name":"DataPack","docStart":1737,"docEnd":1810,"docs":{"brief":"A DataPack allows serializing multiple variables into a single stream.","tags":[{"tag":"","text":"A DataPack allows serializing multiple variables into a single stream."}]},"parent":"Handle","methods":[{"name":"DataPack","docStart":1845,"docEnd":1872,"docs":{"brief":"Creates a new data pack.","tags":[{"tag":"","text":"Creates a new data pack."}]},"kind":"native","returnType":"DataPack","arguments":[]},{"name":"WriteCell","docStart":1905,"docEnd":2084,"docs":{"brief":"Packs a normal cell into a data pack.","tags":[{"tag":"","text":"Packs a normal cell into a data pack."},{"tag":"param:cell","text":"Cell to add."},{"tag":"param:insert","text":"Determines whether mid-pack writes will insert instead of overwrite."}]},"kind":"native","returnType":"void","arguments":[{"type":"any","name":"cell","decl":"any cell","default":null},{"type":"bool","name":"insert","decl":"bool insert","default":"false"}]},{"name":"WriteFloat","docStart":2152,"docEnd":2326,"docs":{"brief":"Packs a float into a data pack.","tags":[{"tag":"","text":"Packs a float into a data pack."},{"tag":"param:val","text":"Float to add."},{"tag":"param:insert","text":"Determines whether mid-pack writes will insert instead of overwrite."}]},"kind":"native","returnType":"void","arguments":[{"type":"float","name":"val","decl":"float val","default":null},{"type":"bool","name":"insert","decl":"bool insert","default":"false"}]},{"name":"WriteString","docStart":2396,"docEnd":2572,"docs":{"brief":"Packs a string into a data pack.","tags":[{"tag":"","text":"Packs a string into a data pack."},{"tag":"param:str","text":"String to add."},{"tag":"param:insert","text":"Determines whether mid-pack writes will insert instead of overwrite."}]},"kind":"native","returnType":"void","arguments":[{"type":"const char[]","name":"str","decl":"const char[] str","default":null},{"type":"bool","name":"insert","decl":"bool insert","default":"false"}]},{"name":"WriteFunction","docStart":2650,"docEnd":2846,"docs":{"brief":"Packs a function pointer into a data pack.","tags":[{"tag":"","text":"Packs a function pointer into a data pack."},{"tag":"param:fktptr","text":"Function pointer to add."},{"tag":"param:insert","text":"Determines whether mid-pack writes will insert instead of overwrite."}]},"kind":"native","returnType":"void","arguments":[{"type":"Function","name":"fktptr","decl":"Function fktptr","default":null},{"type":"bool","name":"insert","decl":"bool insert","default":"false"}]},{"name":"ReadCell","docStart":2925,"docEnd":3001,"docs":{"brief":"Reads a cell from a data pack.","tags":[{"tag":"","text":"Reads a cell from a data pack."},{"tag":"return","text":"A cell at this position"}]},"kind":"native","returnType":"any","arguments":[]},{"name":"ReadFloat","docStart":3038,"docEnd":3114,"docs":{"brief":"Reads a float from a data pack.","tags":[{"tag":"","text":"Reads a float from a data pack."},{"tag":"return","text":"Float at this position"}]},"kind":"native","returnType":"float","arguments":[]},{"name":"ReadString","docStart":3154,"docEnd":3313,"docs":{"brief":"Reads a string from a data pack.","tags":[{"tag":"","text":"Reads a string from a data pack."},{"tag":"param:buffer","text":"Destination string buffer."},{"tag":"param:maxlen","text":"Maximum length of output string buffer."}]},"kind":"native","returnType":"void","arguments":[{"type":"char[]","name":"buffer","decl":"char[] buffer","default":null},{"type":"int","name":"maxlen","decl":"int maxlen","default":null}]},{"name":"ReadFunction","docStart":3378,"docEnd":3472,"docs":{"brief":"Reads a function pointer from a data pack.","tags":[{"tag":"","text":"Reads a function pointer from a data pack."},{"tag":"return","text":"Function pointer."}]},"kind":"native","returnType":"Function","arguments":[]},{"name":"Reset","docStart":3518,"docEnd":3623,"docs":{"brief":"Resets the position in a data pack.","tags":[{"tag":"","text":"Resets the position in a data pack."},{"tag":"param:clear","text":"If true, clears the contained data."}]},"kind":"native","returnType":"void","arguments":[{"type":"bool","name":"clear","decl":"bool clear","default":"false"}]},{"name":"IsReadable","docStart":3674,"docEnd":3869,"docs":{"brief":"Returns whether or not a specified number of bytes from the data pack\nposition to the end can be read.","tags":[{"tag":"","text":"Returns whether or not a specified number of bytes from the data pack\nposition to the end can be read."},{"tag":"param:unused","text":"Unused variable. Exists for backwards compatability."}]},"kind":"native","returnType":"bool","arguments":[{"type":"int","name":"unused","decl":"int unused","default":"0"}]}],"properties":[{"name":"Position","docStart":3924,"docEnd":3969,"docs":{"brief":"The read or write position in a data pack.","tags":[{"tag":"","text":"The read or write position in a data pack."}]},"type":"DataPackPos","getter":true,"setter":true}]}],"enumstructs":[],"constants":[],"enums":[{"name":"DataPackPos","docStart":1660,"docEnd":1710,"docs":{"brief":"Opaque handle to a datapack position.","tags":[{"tag":"","text":"Opaque handle to a datapack position."}]},"entries":[]}],"typesets":[],"typedefs":[]}