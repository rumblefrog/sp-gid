{"functions":[{"name":"RegClientCookie","docStart":6468,"docEnd":7038,"docs":{"brief":"Creates a new Client preference cookie.\n\nHandles returned by RegClientCookie can be closed via CloseHandle() when\nno longer needed.","tags":[{"tag":"","text":"Creates a new Client preference cookie.\n\nHandles returned by RegClientCookie can be closed via CloseHandle() when\nno longer needed."},{"tag":"param:name","text":"Name of the new preference cookie."},{"tag":"param:description","text":"Optional description of the preference cookie."},{"tag":"param:access","text":"What CookieAccess level to assign to this cookie."},{"tag":"return","text":"A handle to the newly created cookie. If the cookie already\nexists, a handle to it will still be returned."},{"tag":"error","text":"Cookie name is blank."}]},"kind":"native","returnType":"Handle","arguments":[{"type":"const char[]","name":"name","decl":"const char[] name","default":null},{"type":"const char[]","name":"description","decl":"const char[] description","default":null},{"type":"CookieAccess","name":"access","decl":"CookieAccess access","default":null}]},{"name":"FindClientCookie","docStart":7140,"docEnd":7440,"docs":{"brief":"Searches for a Client preference cookie.\n\nHandles returned by FindClientCookie can be closed via CloseHandle() when\nno longer needed.","tags":[{"tag":"","text":"Searches for a Client preference cookie.\n\nHandles returned by FindClientCookie can be closed via CloseHandle() when\nno longer needed."},{"tag":"param:name","text":"Name of cookie to find."},{"tag":"return","text":"A handle to the cookie if it is found. INVALID_HANDLE otherwise."}]},"kind":"native","returnType":"Handle","arguments":[{"type":"const char[]","name":"name","decl":"const char[] name","default":null}]},{"name":"SetClientCookie","docStart":7496,"docEnd":7772,"docs":{"brief":"Set the value of a Client preference cookie.","tags":[{"tag":"","text":"Set the value of a Client preference cookie."},{"tag":"param:client","text":"Client index."},{"tag":"param:cookie","text":"Client preference cookie handle."},{"tag":"param:value","text":"String value to set."},{"tag":"error","text":"Invalid cookie handle or invalid client index."}]},"kind":"native","returnType":"void","arguments":[{"type":"int","name":"client","decl":"int client","default":null},{"type":"Handle","name":"cookie","decl":"Handle cookie","default":null},{"type":"const char[]","name":"value","decl":"const char[] value","default":null}]},{"name":"GetClientCookie","docStart":7853,"docEnd":8195,"docs":{"brief":"Retrieve the value of a Client preference cookie.","tags":[{"tag":"","text":"Retrieve the value of a Client preference cookie."},{"tag":"param:client","text":"Client index."},{"tag":"param:cookie","text":"Client preference cookie handle."},{"tag":"param:buffer","text":"Copyback buffer for value."},{"tag":"param:maxlen","text":"Maximum length of the buffer."},{"tag":"error","text":"Invalid cookie handle or invalid client index."}]},"kind":"native","returnType":"void","arguments":[{"type":"int","name":"client","decl":"int client","default":null},{"type":"Handle","name":"cookie","decl":"Handle cookie","default":null},{"type":"char[]","name":"buffer","decl":"char[] buffer","default":null},{"type":"int","name":"maxlen","decl":"int maxlen","default":null}]},{"name":"SetAuthIdCookie","docStart":8283,"docEnd":8587,"docs":{"brief":"Sets the value of a Client preference cookie based on an authID string.","tags":[{"tag":"","text":"Sets the value of a Client preference cookie based on an authID string."},{"tag":"param:authID","text":"String Auth/STEAM ID of player to set."},{"tag":"param:cookie","text":"Client preference cookie handle."},{"tag":"param:value","text":"String value to set."},{"tag":"error","text":"Invalid cookie handle."}]},"kind":"native","returnType":"void","arguments":[{"type":"const char[]","name":"authID","decl":"const char[] authID","default":null},{"type":"Handle","name":"cookie","decl":"Handle cookie","default":null},{"type":"const char[]","name":"value","decl":"const char[] value","default":null}]},{"name":"AreClientCookiesCached","docStart":8677,"docEnd":8901,"docs":{"brief":"Checks if a clients cookies have been loaded from the database.","tags":[{"tag":"","text":"Checks if a clients cookies have been loaded from the database."},{"tag":"param:client","text":"Client index."},{"tag":"return","text":"True if loaded, false otherwise."},{"tag":"error","text":"Invalid client index."}]},"kind":"native","returnType":"bool","arguments":[{"type":"int","name":"client","decl":"int client","default":null}]},{"name":"OnClientCookiesCached","docStart":8954,"docEnd":9082,"docs":{"brief":"Called once a client's saved cookies have been loaded from the database.","tags":[{"tag":"","text":"Called once a client's saved cookies have been loaded from the database."},{"tag":"param:client","text":"Client index."}]},"kind":"forward","returnType":"void","arguments":[{"type":"int","name":"client","decl":"int client","default":null}]},{"name":"SetCookiePrefabMenu","docStart":9135,"docEnd":9658,"docs":{"brief":"Add a new prefab item to the client cookie settings menu.\n\nNote: This handles everything automatically and does not require a callback","tags":[{"tag":"","text":"Add a new prefab item to the client cookie settings menu.\n\nNote: This handles everything automatically and does not require a callback"},{"tag":"param:cookie","text":"Client preference cookie handle."},{"tag":"param:type","text":"A CookieMenu prefab menu type."},{"tag":"param:display","text":"Text to show on the menu."},{"tag":"param:handler","text":"Optional handler callback for translations and output on selection"},{"tag":"param:info","text":"Info data to pass to the callback."},{"tag":"error","text":"Invalid cookie handle."}]},"kind":"native","returnType":"void","arguments":[{"type":"Handle","name":"cookie","decl":"Handle cookie","default":null},{"type":"CookieMenu","name":"type","decl":"CookieMenu type","default":null},{"type":"const char[]","name":"display","decl":"const char[] display","default":null},{"type":"function void(int client, CookieMenuAction action, any info, char[] buffer, int maxlen)","name":"handler","decl":"function void(int client, CookieMenuAction action, any info, char[] buffer, int maxlen) handler","default":"INVALID_FUNCTION"},{"type":"any","name":"info","decl":"any info","default":"0"}]},{"name":"SetCookieMenuItem","docStart":9806,"docEnd":10191,"docs":{"brief":"Adds a new item to the client cookie settings menu.\n\nNote: This only adds the top level menu item. You need to handle any submenus from the callback.","tags":[{"tag":"","text":"Adds a new item to the client cookie settings menu.\n\nNote: This only adds the top level menu item. You need to handle any submenus from the callback."},{"tag":"param:handler","text":"A MenuHandler callback function."},{"tag":"param:info","text":"Data to pass to the callback."},{"tag":"param:display","text":"Text to show on the menu."},{"tag":"error","text":"Invalid cookie handle."}]},"kind":"native","returnType":"void","arguments":[{"type":"function void(int client, CookieMenuAction action, any info, char[] buffer, int maxlen)","name":"handler","decl":"function void(int client, CookieMenuAction action, any info, char[] buffer, int maxlen) handler","default":null},{"type":"any","name":"info","decl":"any info","default":null},{"type":"const char[]","name":"display","decl":"const char[] display","default":null}]},{"name":"ShowCookieMenu","docStart":10286,"docEnd":10381,"docs":{"brief":"Displays the settings menu to a client.","tags":[{"tag":"","text":"Displays the settings menu to a client."},{"tag":"param:client","text":"Client index."}]},"kind":"native","returnType":"void","arguments":[{"type":"int","name":"client","decl":"int client","default":null}]},{"name":"GetCookieIterator","docStart":10426,"docEnd":10549,"docs":{"brief":"Gets a cookie iterator.  Must be freed with CloseHandle().","tags":[{"tag":"","text":"Gets a cookie iterator.  Must be freed with CloseHandle()."},{"tag":"return","text":"A new cookie iterator."}]},"kind":"native","returnType":"Handle","arguments":[]},{"name":"ReadCookieIterator","docStart":10589,"docEnd":11042,"docs":{"brief":"Reads a cookie iterator, then advances to the next cookie if any.","tags":[{"tag":"","text":"Reads a cookie iterator, then advances to the next cookie if any."},{"tag":"param:iter","text":"Cookie iterator Handle."},{"tag":"param:name","text":"Name buffer."},{"tag":"param:nameLen","text":"Name buffer size."},{"tag":"param:access","text":"Access level of the cookie."},{"tag":"param:desc","text":"Cookie description buffer."},{"tag":"param:descLen","text":"Cookie description buffer size."},{"tag":"return","text":"True on success, false if there are no more commands."}]},"kind":"native","returnType":"bool","arguments":[{"type":"Handle","name":"iter","decl":"Handle iter","default":null},{"type":"char[]","name":"name","decl":"char[] name","default":null},{"type":"int","name":"nameLen","decl":"int nameLen","default":null},{"type":"CookieAccess&","name":"access","decl":"CookieAccess& access","default":null},{"type":"char[]","name":"desc","decl":"char[] desc","default":"\"\""},{"type":"int","name":"descLen","decl":"int descLen","default":"0"}]},{"name":"GetCookieAccess","docStart":11220,"docEnd":11431,"docs":{"brief":"Returns the access level of a cookie","tags":[{"tag":"","text":"Returns the access level of a cookie"},{"tag":"param:cookie","text":"Client preference cookie handle."},{"tag":"return","text":"CookieAccess access level."},{"tag":"error","text":"Invalid cookie handle."}]},"kind":"native","returnType":"CookieAccess","arguments":[{"type":"Handle","name":"cookie","decl":"Handle cookie","default":null}]},{"name":"GetClientCookieTime","docStart":11488,"docEnd":11687,"docs":{"brief":"Returns the last updated timestamp for a client cookie","tags":[{"tag":"","text":"Returns the last updated timestamp for a client cookie"},{"tag":"param:client","text":"Client index."},{"tag":"param:cookie","text":"Cookie handle."},{"tag":"return","text":"Last updated timestamp."}]},"kind":"native","returnType":"int","arguments":[{"type":"int","name":"client","decl":"int client","default":null},{"type":"Handle","name":"cookie","decl":"Handle cookie","default":null}]},{"name":"__ext_cprefs_SetNTVOptional","docStart":0,"docEnd":0,"docs":null,"kind":"public","returnType":"void","arguments":[]}],"methodmaps":[{"name":"Cookie","docStart":0,"docEnd":0,"docs":null,"parent":"Handle","methods":[{"name":"Cookie","docStart":3504,"docEnd":4055,"docs":{"brief":"Creates a new Client preference cookie.\n\nHandles returned can be closed via CloseHandle() when\nno longer needed.","tags":[{"tag":"","text":"Creates a new Client preference cookie.\n\nHandles returned can be closed via CloseHandle() when\nno longer needed."},{"tag":"param:name","text":"Name of the new preference cookie."},{"tag":"param:description","text":"Optional description of the preference cookie."},{"tag":"param:access","text":"What CookieAccess level to assign to this cookie."},{"tag":"return","text":"A handle to the newly created cookie. If the cookie already\nexists, a handle to it will still be returned."},{"tag":"error","text":"Cookie name is blank."}]},"kind":"native","returnType":"Cookie","arguments":[{"type":"const char[]","name":"name","decl":"const char[] name","default":null},{"type":"const char[]","name":"description","decl":"const char[] description","default":null},{"type":"CookieAccess","name":"access","decl":"CookieAccess access","default":null}]},{"name":"Find","docStart":4150,"docEnd":4441,"docs":{"brief":"Searches for a Client preference cookie.\n\nHandles returned by Cookie.Find can be closed via CloseHandle() when\nno longer needed.","tags":[{"tag":"","text":"Searches for a Client preference cookie.\n\nHandles returned by Cookie.Find can be closed via CloseHandle() when\nno longer needed."},{"tag":"param:name","text":"Name of cookie to find."},{"tag":"return","text":"A handle to the cookie if it is found. INVALID_HANDLE otherwise."}]},"kind":"native","returnType":"Cookie","arguments":[{"type":"const char[]","name":"name","decl":"const char[] name","default":null}]},{"name":"Set","docStart":4501,"docEnd":4713,"docs":{"brief":"Set the value of a Client preference cookie.","tags":[{"tag":"","text":"Set the value of a Client preference cookie."},{"tag":"param:client","text":"Client index."},{"tag":"param:value","text":"String value to set."},{"tag":"error","text":"Invalid cookie handle or invalid client index."}]},"kind":"native","returnType":"void","arguments":[{"type":"int","name":"client","decl":"int client","default":null},{"type":"const char[]","name":"value","decl":"const char[] value","default":null}]},{"name":"Get","docStart":4776,"docEnd":5055,"docs":{"brief":"Retrieve the value of a Client preference cookie.","tags":[{"tag":"","text":"Retrieve the value of a Client preference cookie."},{"tag":"param:client","text":"Client index."},{"tag":"param:buffer","text":"Copyback buffer for value."},{"tag":"param:maxlen","text":"Maximum length of the buffer."},{"tag":"error","text":"Invalid cookie handle or invalid client index."}]},"kind":"native","returnType":"void","arguments":[{"type":"int","name":"client","decl":"int client","default":null},{"type":"char[]","name":"buffer","decl":"char[] buffer","default":null},{"type":"int","name":"maxlen","decl":"int maxlen","default":null}]},{"name":"SetByAuthId","docStart":5125,"docEnd":5365,"docs":{"brief":"Sets the value of a Client preference cookie based on an authID string.","tags":[{"tag":"","text":"Sets the value of a Client preference cookie based on an authID string."},{"tag":"param:authID","text":"String Auth/STEAM ID of player to set."},{"tag":"param:value","text":"String value to set."},{"tag":"error","text":"Invalid cookie handle."}]},"kind":"native","returnType":"void","arguments":[{"type":"const char[]","name":"authID","decl":"const char[] authID","default":null},{"type":"const char[]","name":"value","decl":"const char[] value","default":null}]},{"name":"SetPrefabMenu","docStart":5445,"docEnd":5908,"docs":{"brief":"Add a new prefab item to the client cookie settings menu.\n\nNote: This handles everything automatically and does not require a callback","tags":[{"tag":"","text":"Add a new prefab item to the client cookie settings menu.\n\nNote: This handles everything automatically and does not require a callback"},{"tag":"param:type","text":"A CookieMenu prefab menu type."},{"tag":"param:display","text":"Text to show on the menu."},{"tag":"param:handler","text":"Optional handler callback for translations and output on selection"},{"tag":"param:info","text":"Info data to pass to the callback."},{"tag":"error","text":"Invalid cookie handle."}]},"kind":"native","returnType":"void","arguments":[{"type":"CookieMenu","name":"type","decl":"CookieMenu type","default":null},{"type":"const char[]","name":"display","decl":"const char[] display","default":null},{"type":"function void(int client, CookieMenuAction action, any info, char[] buffer, int maxlen)","name":"handler","decl":"function void(int client, CookieMenuAction action, any info, char[] buffer, int maxlen) handler","default":"INVALID_FUNCTION"},{"type":"any","name":"info","decl":"any info","default":"0"}]},{"name":"GetClientTime","docStart":6044,"docEnd":6196,"docs":{"brief":"Returns the last updated timestamp for a client cookie","tags":[{"tag":"","text":"Returns the last updated timestamp for a client cookie"},{"tag":"param:client","text":"Client index."},{"tag":"return","text":"Last updated timestamp."}]},"kind":"native","returnType":"int","arguments":[{"type":"int","name":"client","decl":"int client","default":null}]}],"properties":[{"name":"AccessLevel","docStart":6248,"docEnd":6394,"docs":{"brief":"Returns the access level of a cookie","tags":[{"tag":"","text":"Returns the access level of a cookie"},{"tag":"return","text":"CookieAccess access level."},{"tag":"error","text":"Invalid cookie handle."}]},"type":"CookieAccess","getter":true,"setter":false}]}],"enumstructs":[],"constants":[],"enums":[{"name":"CookieAccess","docStart":1649,"docEnd":1700,"docs":{"brief":"Cookie access types for client viewing","tags":[{"tag":"","text":"Cookie access types for client viewing"}]},"entries":[{"name":"CookieAccess_Public","docStart":1757,"docEnd":1796,"docs":{"brief":"Visible and Changeable by users","tags":[{"tag":"","text":"Visible and Changeable by users"}]},"value":null},{"name":"CookieAccess_Protected","docStart":1831,"docEnd":1857,"docs":{"brief":"Read only to users","tags":[{"tag":"","text":"Read only to users"}]},"value":null},{"name":"CookieAccess_Private","docStart":1892,"docEnd":1924,"docs":{"brief":"Completely hidden cookie","tags":[{"tag":"","text":"Completely hidden cookie"}]},"value":null}]},{"name":"CookieMenu","docStart":1932,"docEnd":1969,"docs":{"brief":"Cookie Prefab menu types","tags":[{"tag":"","text":"Cookie Prefab menu types"}]},"entries":[{"name":"CookieMenu_YesNo","docStart":2020,"docEnd":2085,"docs":{"brief":"Yes/No menu with \"yes\"/\"no\" results saved into the cookie","tags":[{"tag":"","text":"Yes/No menu with \"yes\"/\"no\" results saved into the cookie"}]},"value":null},{"name":"CookieMenu_YesNo_Int","docStart":2116,"docEnd":2166,"docs":{"brief":"Yes/No menu with 1/0 saved into the cookie","tags":[{"tag":"","text":"Yes/No menu with 1/0 saved into the cookie"}]},"value":null},{"name":"CookieMenu_OnOff","docStart":2197,"docEnd":2262,"docs":{"brief":"On/Off menu with \"on\"/\"off\" results saved into the cookie","tags":[{"tag":"","text":"On/Off menu with \"on\"/\"off\" results saved into the cookie"}]},"value":null},{"name":"CookieMenu_OnOff_Int","docStart":2293,"docEnd":2343,"docs":{"brief":"On/Off menu with 1/0 saved into the cookie","tags":[{"tag":"","text":"On/Off menu with 1/0 saved into the cookie"}]},"value":null}]},{"name":"CookieMenuAction","docStart":0,"docEnd":0,"docs":null,"entries":[{"name":"CookieMenuAction_DisplayOption","docStart":2378,"docEnd":2539,"docs":{"brief":"An option is being drawn for a menu.\n\nINPUT : Client index and data if available.\nOUTPUT: Buffer for rendering, maxlength of buffer.","tags":[{"tag":"","text":"An option is being drawn for a menu.\n\nINPUT : Client index and data if available.\nOUTPUT: Buffer for rendering, maxlength of buffer."}]},"value":"0"},{"name":"CookieMenuAction_SelectOption","docStart":2583,"docEnd":2688,"docs":{"brief":"A menu option has been selected.\n\nINPUT : Client index and any data if available.","tags":[{"tag":"","text":"A menu option has been selected.\n\nINPUT : Client index and any data if available."}]},"value":"1"}]}],"typesets":[],"typedefs":[{"name":"CookieMenuHandler","docStart":2732,"docEnd":3018,"docs":{"brief":"Cookie Menu Callback prototype","tags":[{"tag":"","text":"Cookie Menu Callback prototype"},{"tag":"param:client","text":"Client index."},{"tag":"param:action","text":"CookieMenuAction being performed."},{"tag":"param:info","text":"Info data passed."},{"tag":"param:buffer","text":"Outbut buffer."},{"tag":"param:maxlen","text":"Max length of the output buffer."}]},"type":"function void(int client, CookieMenuAction action, any info, char[] buffer, int maxlen)","parsedSignature":{"returnType":"void","arguments":[{"type":"int","name":"client","decl":"int client","default":null},{"type":"CookieMenuAction","name":"action","decl":"CookieMenuAction action","default":null},{"type":"any","name":"info","decl":"any info","default":null},{"type":"char[]","name":"buffer","decl":"char[] buffer","default":null},{"type":"int","name":"maxlen","decl":"int maxlen","default":null}]}}]}