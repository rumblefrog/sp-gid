{"functions":[{"name":"LogToGame","docStart":6121,"docEnd":6260,"docs":{"brief":"Logs a generic message to the HL2 logs.","tags":[{"tag":"","text":"Logs a generic message to the HL2 logs."},{"tag":"param:format","text":"String format."},{"tag":"param:...","text":"Format arguments."}]},"kind":"native","returnType":"void","arguments":[{"type":"const char[]","name":"format","decl":"const char[] format","default":null},{"type":"any...","name":"...","decl":"any...","default":null}]},{"name":"SetRandomSeed","docStart":6318,"docEnd":6432,"docs":{"brief":"Sets the seed value for the global Half-Life 2 Random Stream.","tags":[{"tag":"","text":"Sets the seed value for the global Half-Life 2 Random Stream."},{"tag":"param:seed","text":"Seed value."}]},"kind":"native","returnType":"void","arguments":[{"type":"int","name":"seed","decl":"int seed","default":null}]},{"name":"GetRandomFloat","docStart":6474,"docEnd":6735,"docs":{"brief":"Returns a random floating point number from the Half-Life 2 Random Stream.","tags":[{"tag":"","text":"Returns a random floating point number from the Half-Life 2 Random Stream."},{"tag":"param:fMin","text":"Minimum random bound."},{"tag":"param:fMax","text":"Maximum random bound."},{"tag":"return","text":"A random number between (inclusive) fMin and fMax."}]},"kind":"native","returnType":"float","arguments":[{"type":"float","name":"fMin","decl":"float fMin","default":"0.000000"},{"type":"float","name":"fMax","decl":"float fMax","default":"1.000000"}]},{"name":"GetRandomInt","docStart":6801,"docEnd":7047,"docs":{"brief":"Returns a random number from the Half-Life 2 Random Stream.","tags":[{"tag":"","text":"Returns a random number from the Half-Life 2 Random Stream."},{"tag":"param:nmin","text":"Minimum random bound."},{"tag":"param:nmax","text":"Maximum random bound."},{"tag":"return","text":"A random number between (inclusive) nmin and nmax."}]},"kind":"native","returnType":"int","arguments":[{"type":"int","name":"nmin","decl":"int nmin","default":null},{"type":"int","name":"nmax","decl":"int nmax","default":null}]},{"name":"IsMapValid","docStart":7097,"docEnd":7270,"docs":{"brief":"Returns whether a map is valid or not.","tags":[{"tag":"","text":"Returns whether a map is valid or not."},{"tag":"param:map","text":"Map name, excluding .bsp extension."},{"tag":"return","text":"True if valid, false otherwise."}]},"kind":"native","returnType":"bool","arguments":[{"type":"const char[]","name":"map","decl":"const char[] map","default":null}]},{"name":"FindMap","docStart":7317,"docEnd":7867,"docs":{"brief":"Returns whether a full or partial map name is found or can be resolved","tags":[{"tag":"","text":"Returns whether a full or partial map name is found or can be resolved"},{"tag":"param:map","text":"Map name (usually same as map path relative to maps/ dir,\nexcluding .bsp extension)."},{"tag":"param:foundmap","text":"Resolved map name. If the return is FindMap_FuzzyMatch\nor FindMap_NonCanonical the buffer will be the full path."},{"tag":"param:maxlen","text":"Maximum length to write to map var."},{"tag":"return","text":"Result of the find operation. Not all result types are supported on all games."}]},"kind":"native","returnType":"FindMapResult","arguments":[{"type":"const char[]","name":"map","decl":"const char[] map","default":null},{"type":"char[]","name":"foundmap","decl":"char[] foundmap","default":null},{"type":"int","name":"maxlen","decl":"int maxlen","default":null}]},{"name":"GetMapDisplayName","docStart":7949,"docEnd":8858,"docs":{"brief":"Get the display name of a workshop map.\n\nNote: You do not need to call FindMap first.  This native will call FindMap internally.","tags":[{"tag":"","text":"Get the display name of a workshop map.\n\nNote: You do not need to call FindMap first.  This native will call FindMap internally."},{"tag":"param:map","text":"Map name (usually same as map path relative to maps/ dir,\nexcluding .bsp extension)."},{"tag":"param:displayName","text":"Map's display name, i.e. cp_mymapname or de_mymapname.\nIf FindMap returns FindMap_PossiblyAvailable or FindMap_NotFound,\nthe map cannot be resolved and this native will return false,\nbut displayName will be a copy of map."},{"tag":"param:maxlen","text":"Maximum length to write to displayName var."},{"tag":"return","text":"true if FindMap returns FindMap_Found, FindMap_FuzzyMatch, or\nFindMap_NonCanonical.\nfalse if FindMap returns FindMap_PossiblyAvailable or FindMap_NotFound."}]},"kind":"native","returnType":"bool","arguments":[{"type":"const char[]","name":"map","decl":"const char[] map","default":null},{"type":"char[]","name":"displayName","decl":"char[] displayName","default":null},{"type":"int","name":"maxlen","decl":"int maxlen","default":null}]},{"name":"IsDedicatedServer","docStart":8944,"docEnd":9062,"docs":{"brief":"Returns whether the server is dedicated.","tags":[{"tag":"","text":"Returns whether the server is dedicated."},{"tag":"return","text":"True if dedicated, false otherwise."}]},"kind":"native","returnType":"bool","arguments":[]},{"name":"GetEngineTime","docStart":9100,"docEnd":9232,"docs":{"brief":"Returns a high-precision time value for profiling the engine.","tags":[{"tag":"","text":"Returns a high-precision time value for profiling the engine."},{"tag":"return","text":"A floating point time value."}]},"kind":"native","returnType":"float","arguments":[]},{"name":"GetGameTime","docStart":9267,"docEnd":9370,"docs":{"brief":"Returns the game time based on the game tick.","tags":[{"tag":"","text":"Returns the game time based on the game tick."},{"tag":"return","text":"Game tick time."}]},"kind":"native","returnType":"float","arguments":[]},{"name":"GetGameTickCount","docStart":9403,"docEnd":9501,"docs":{"brief":"Returns the game's internal tick count.","tags":[{"tag":"","text":"Returns the game's internal tick count."},{"tag":"return","text":"Game tick count."}]},"kind":"native","returnType":"int","arguments":[]},{"name":"GetGameFrameTime","docStart":9537,"docEnd":9653,"docs":{"brief":"Returns the time the Game took processing the last frame.","tags":[{"tag":"","text":"Returns the time the Game took processing the last frame."},{"tag":"return","text":"Game frame time."}]},"kind":"native","returnType":"float","arguments":[]},{"name":"GetGameDescription","docStart":9691,"docEnd":10081,"docs":{"brief":"Returns the game description from the mod.","tags":[{"tag":"","text":"Returns the game description from the mod."},{"tag":"param:buffer","text":"Buffer to store the description."},{"tag":"param:maxlength","text":"Maximum size of the buffer."},{"tag":"param:original","text":"If true, retrieves the original game description,\nignoring any potential hooks from plugins."},{"tag":"return","text":"Number of bytes written to the buffer (UTF-8 safe)."}]},"kind":"native","returnType":"int","arguments":[{"type":"char[]","name":"buffer","decl":"char[] buffer","default":null},{"type":"int","name":"maxlength","decl":"int maxlength","default":null},{"type":"bool","name":"original","decl":"bool original","default":"false"}]},{"name":"GetGameFolderName","docStart":10168,"docEnd":10417,"docs":{"brief":"Returns the name of the game's directory.","tags":[{"tag":"","text":"Returns the name of the game's directory."},{"tag":"param:buffer","text":"Buffer to store the directory name."},{"tag":"param:maxlength","text":"Maximum size of the buffer."},{"tag":"return","text":"Number of bytes written to the buffer (UTF-8 safe)."}]},"kind":"native","returnType":"int","arguments":[{"type":"char[]","name":"buffer","decl":"char[] buffer","default":null},{"type":"int","name":"maxlength","decl":"int maxlength","default":null}]},{"name":"GetCurrentMap","docStart":10482,"docEnd":10693,"docs":{"brief":"Returns the current map name.","tags":[{"tag":"","text":"Returns the current map name."},{"tag":"param:buffer","text":"Buffer to store map name."},{"tag":"param:maxlength","text":"Maximum length of buffer."},{"tag":"return","text":"Number of bytes written (UTF-8 safe)."}]},"kind":"native","returnType":"int","arguments":[{"type":"char[]","name":"buffer","decl":"char[] buffer","default":null},{"type":"int","name":"maxlength","decl":"int maxlength","default":null}]},{"name":"PrecacheModel","docStart":10754,"docEnd":11007,"docs":{"brief":"Precaches a given model.","tags":[{"tag":"","text":"Precaches a given model."},{"tag":"param:model","text":"Name of the model to precache."},{"tag":"param:preload","text":"If preload is true the file will be precached before level startup."},{"tag":"return","text":"Returns the model index, 0 for error."}]},"kind":"native","returnType":"int","arguments":[{"type":"const char[]","name":"model","decl":"const char[] model","default":null},{"type":"bool","name":"preload","decl":"bool preload","default":"false"}]},{"name":"PrecacheSentenceFile","docStart":11078,"docEnd":11340,"docs":{"brief":"Precaches a given sentence file.","tags":[{"tag":"","text":"Precaches a given sentence file."},{"tag":"param:file","text":"Name of the sentence file to precache."},{"tag":"param:preload","text":"If preload is true the file will be precached before level startup."},{"tag":"return","text":"Returns a sentence file index."}]},"kind":"native","returnType":"int","arguments":[{"type":"const char[]","name":"file","decl":"const char[] file","default":null},{"type":"bool","name":"preload","decl":"bool preload","default":"false"}]},{"name":"PrecacheDecal","docStart":11417,"docEnd":11655,"docs":{"brief":"Precaches a given decal.","tags":[{"tag":"","text":"Precaches a given decal."},{"tag":"param:decal","text":"Name of the decal to precache."},{"tag":"param:preload","text":"If preload is true the file will be precached before level startup."},{"tag":"return","text":"Returns a decal index."}]},"kind":"native","returnType":"int","arguments":[{"type":"const char[]","name":"decal","decl":"const char[] decal","default":null},{"type":"bool","name":"preload","decl":"bool preload","default":"false"}]},{"name":"PrecacheGeneric","docStart":11726,"docEnd":11985,"docs":{"brief":"Precaches a given generic file.","tags":[{"tag":"","text":"Precaches a given generic file."},{"tag":"param:generic","text":"Name of the generic file to precache."},{"tag":"param:preload","text":"If preload is true the file will be precached before level startup."},{"tag":"return","text":"Returns a generic file index."}]},"kind":"native","returnType":"int","arguments":[{"type":"const char[]","name":"generic","decl":"const char[] generic","default":null},{"type":"bool","name":"preload","decl":"bool preload","default":"false"}]},{"name":"IsModelPrecached","docStart":12060,"docEnd":12229,"docs":{"brief":"Returns if a given model is precached.","tags":[{"tag":"","text":"Returns if a given model is precached."},{"tag":"param:model","text":"Name of the model to check."},{"tag":"return","text":"True if precached, false otherwise."}]},"kind":"native","returnType":"bool","arguments":[{"type":"const char[]","name":"model","decl":"const char[] model","default":null}]},{"name":"IsDecalPrecached","docStart":12284,"docEnd":12453,"docs":{"brief":"Returns if a given decal is precached.","tags":[{"tag":"","text":"Returns if a given decal is precached."},{"tag":"param:decal","text":"Name of the decal to check."},{"tag":"return","text":"True if precached, false otherwise."}]},"kind":"native","returnType":"bool","arguments":[{"type":"const char[]","name":"decal","decl":"const char[] decal","default":null}]},{"name":"IsGenericPrecached","docStart":12508,"docEnd":12691,"docs":{"brief":"Returns if a given generic file is precached.","tags":[{"tag":"","text":"Returns if a given generic file is precached."},{"tag":"param:generic","text":"Name of the generic file to check."},{"tag":"return","text":"True if precached, false otherwise."}]},"kind":"native","returnType":"bool","arguments":[{"type":"const char[]","name":"generic","decl":"const char[] generic","default":null}]},{"name":"PrecacheSound","docStart":12750,"docEnd":13014,"docs":{"brief":"Precaches a given sound.","tags":[{"tag":"","text":"Precaches a given sound."},{"tag":"param:sound","text":"Name of the sound to precache."},{"tag":"param:preload","text":"If preload is true the file will be precached before level startup."},{"tag":"return","text":"True if successfully precached, false otherwise."}]},"kind":"native","returnType":"bool","arguments":[{"type":"const char[]","name":"sound","decl":"const char[] sound","default":null},{"type":"bool","name":"preload","decl":"bool preload","default":"false"}]},{"name":"IsSoundPrecached","docStart":0,"docEnd":0,"docs":null,"kind":"native","returnType":"bool","arguments":[{"type":"const char[]","name":"sound","decl":"const char[] sound","default":null}]},{"name":"CreateDialog","docStart":13445,"docEnd":13802,"docs":{"brief":"Creates different types of ingame messages.","tags":[{"tag":"","text":"Creates different types of ingame messages."},{"tag":"param:client","text":"Index of the client."},{"tag":"param:kv","text":"KeyValues handle to set the menu keys and options. (Check iserverplugin.h for more information)."},{"tag":"param:type","text":"Message type to display ingame."},{"tag":"error","text":"Invalid client index, or client not connected."}]},"kind":"native","returnType":"void","arguments":[{"type":"int","name":"client","decl":"int client","default":null},{"type":"Handle","name":"kv","decl":"Handle kv","default":null},{"type":"DialogType","name":"type","decl":"DialogType type","default":null}]},{"name":"GuessSDKVersion","docStart":0,"docEnd":0,"docs":null,"kind":"native","returnType":"int","arguments":[]},{"name":"GetEngineVersion","docStart":14329,"docEnd":14607,"docs":{"brief":"Gets the engine version that the currently-loaded SM core was compiled against.\n\nThe engine version values are not guaranteed to be in any particular order,\nand should only be compared by (in)equality.","tags":[{"tag":"","text":"Gets the engine version that the currently-loaded SM core was compiled against.\n\nThe engine version values are not guaranteed to be in any particular order,\nand should only be compared by (in)equality."},{"tag":"return","text":"An EngineVersion value."}]},"kind":"native","returnType":"EngineVersion","arguments":[]},{"name":"PrintToChat","docStart":14653,"docEnd":14951,"docs":{"brief":"Prints a message to a specific client in the chat area.","tags":[{"tag":"","text":"Prints a message to a specific client in the chat area."},{"tag":"param:client","text":"Client index."},{"tag":"param:format","text":"Formatting rules."},{"tag":"param:...","text":"Variable number of format parameters."},{"tag":"error","text":"If the client is not connected an error will be thrown."}]},"kind":"native","returnType":"void","arguments":[{"type":"int","name":"client","decl":"int client","default":null},{"type":"const char[]","name":"format","decl":"const char[] format","default":null},{"type":"any...","name":"...","decl":"any...","default":null}]},{"name":"PrintToChatAll","docStart":15023,"docEnd":15195,"docs":{"brief":"Prints a message to all clients in the chat area.","tags":[{"tag":"","text":"Prints a message to all clients in the chat area."},{"tag":"param:format","text":"Formatting rules."},{"tag":"param:...","text":"Variable number of format parameters."}]},"kind":"stock","returnType":"void","arguments":[{"type":"const char[]","name":"format","decl":"const char[] format","default":null},{"type":"any...","name":"...","decl":"any...","default":null}]},{"name":"PrintCenterText","docStart":15479,"docEnd":15788,"docs":{"brief":"Prints a message to a specific client in the center of the screen.","tags":[{"tag":"","text":"Prints a message to a specific client in the center of the screen."},{"tag":"param:client","text":"Client index."},{"tag":"param:format","text":"Formatting rules."},{"tag":"param:...","text":"Variable number of format parameters."},{"tag":"error","text":"If the client is not connected an error will be thrown."}]},"kind":"native","returnType":"void","arguments":[{"type":"int","name":"client","decl":"int client","default":null},{"type":"const char[]","name":"format","decl":"const char[] format","default":null},{"type":"any...","name":"...","decl":"any...","default":null}]},{"name":"PrintCenterTextAll","docStart":15864,"docEnd":16047,"docs":{"brief":"Prints a message to all clients in the center of the screen.","tags":[{"tag":"","text":"Prints a message to all clients in the center of the screen."},{"tag":"param:format","text":"Formatting rules."},{"tag":"param:...","text":"Variable number of format parameters."}]},"kind":"stock","returnType":"void","arguments":[{"type":"const char[]","name":"format","decl":"const char[] format","default":null},{"type":"any...","name":"...","decl":"any...","default":null}]},{"name":"PrintHintText","docStart":16339,"docEnd":16636,"docs":{"brief":"Prints a message to a specific client with a hint box.","tags":[{"tag":"","text":"Prints a message to a specific client with a hint box."},{"tag":"param:client","text":"Client index."},{"tag":"param:format","text":"Formatting rules."},{"tag":"param:...","text":"Variable number of format parameters."},{"tag":"error","text":"If the client is not connected an error will be thrown."}]},"kind":"native","returnType":"void","arguments":[{"type":"int","name":"client","decl":"int client","default":null},{"type":"const char[]","name":"format","decl":"const char[] format","default":null},{"type":"any...","name":"...","decl":"any...","default":null}]},{"name":"PrintHintTextToAll","docStart":16710,"docEnd":16881,"docs":{"brief":"Prints a message to all clients with a hint box.","tags":[{"tag":"","text":"Prints a message to all clients with a hint box."},{"tag":"param:format","text":"Formatting rules."},{"tag":"param:...","text":"Variable number of format parameters."}]},"kind":"stock","returnType":"void","arguments":[{"type":"const char[]","name":"format","decl":"const char[] format","default":null},{"type":"any...","name":"...","decl":"any...","default":null}]},{"name":"ShowVGUIPanel","docStart":17171,"docEnd":17727,"docs":{"brief":"Shows a VGUI panel to a specific client.","tags":[{"tag":"","text":"Shows a VGUI panel to a specific client."},{"tag":"param:client","text":"Client index."},{"tag":"param:name","text":"Panel type name (Check viewport_panel_names.h to see a list of\nsome panel names)."},{"tag":"param:Kv","text":"KeyValues handle with all the data for the panel setup (Depends\non the panel type and may be unused)."},{"tag":"param:show","text":"True to show the panel, or false to remove it from the client screen."},{"tag":"error","text":"If the client is not connected an error will be thrown."}]},"kind":"native","returnType":"void","arguments":[{"type":"int","name":"client","decl":"int client","default":null},{"type":"const char[]","name":"name","decl":"const char[] name","default":null},{"type":"Handle","name":"Kv","decl":"Handle Kv","default":"INVALID_HANDLE"},{"type":"bool","name":"show","decl":"bool show","default":"true"}]},{"name":"CreateHudSynchronizer","docStart":17832,"docEnd":19549,"docs":{"brief":"Creates a HUD synchronization object.  This object is used to automatically assign and\nre-use channels for a set of messages.\n\nThe HUD has a hardcoded number of channels (usually 6) for displaying\ntext.  You can use any channel for any area of the screen.  Text on\ndifferent channels can overlap, but text on the same channel will\nerase the old text first.  This overlapping and overwriting gets problematic.\n\nA HUD synchronization object automatically selects channels for you based on\nthe following heuristics:\n- If channel X was last used by the object, and hasn't been modified again,\nchannel X gets re-used.\n- Otherwise, a new channel is chosen based on the least-recently-used channel.\n\nThis ensures that if you display text on a sync object, that the previous text\ndisplayed on it will always be cleared first.  This is because your new text\nwill either overwrite the old text on the same channel, or because another\nchannel has already erased your text.\n\nNote that messages can still overlap if they are on different synchronization\nobjects, or they are displayed to manual channels.\n\nThese are particularly useful for displaying repeating or refreshing HUD text, in\naddition to displaying multiple message sets in one area of the screen (for example,\ncenter-say messages that may pop up randomly that you don't want to overlap each\nother).","tags":[{"tag":"","text":"Creates a HUD synchronization object.  This object is used to automatically assign and\nre-use channels for a set of messages.\n\nThe HUD has a hardcoded number of channels (usually 6) for displaying\ntext.  You can use any channel for any area of the screen.  Text on\ndifferent channels can overlap, but text on the same channel will\nerase the old text first.  This overlapping and overwriting gets problematic.\n\nA HUD synchronization object automatically selects channels for you based on\nthe following heuristics:\n- If channel X was last used by the object, and hasn't been modified again,\nchannel X gets re-used.\n- Otherwise, a new channel is chosen based on the least-recently-used channel.\n\nThis ensures that if you display text on a sync object, that the previous text\ndisplayed on it will always be cleared first.  This is because your new text\nwill either overwrite the old text on the same channel, or because another\nchannel has already erased your text.\n\nNote that messages can still overlap if they are on different synchronization\nobjects, or they are displayed to manual channels.\n\nThese are particularly useful for displaying repeating or refreshing HUD text, in\naddition to displaying multiple message sets in one area of the screen (for example,\ncenter-say messages that may pop up randomly that you don't want to overlap each\nother)."},{"tag":"return","text":"New HUD synchronization object.\nThe Handle can be closed with CloseHandle().\nIf HUD text is not supported on this mod, then\nINVALID_HANDLE is returned."}]},"kind":"native","returnType":"Handle","arguments":[]},{"name":"SetHudTextParams","docStart":19593,"docEnd":20788,"docs":{"brief":"Sets the HUD parameters for drawing text.  These parameters are stored\nglobally, although nothing other than this function and SetHudTextParamsEx\nmodify them.\n\nYou must call this function before drawing text.  If you are drawing\ntext to multiple clients, you can set the parameters once, since\nthey won't be modified.  However, as soon as you pass control back\nto other plugins, you must reset the parameters next time you draw.","tags":[{"tag":"","text":"Sets the HUD parameters for drawing text.  These parameters are stored\nglobally, although nothing other than this function and SetHudTextParamsEx\nmodify them.\n\nYou must call this function before drawing text.  If you are drawing\ntext to multiple clients, you can set the parameters once, since\nthey won't be modified.  However, as soon as you pass control back\nto other plugins, you must reset the parameters next time you draw."},{"tag":"param:x","text":"x coordinate, from 0 to 1.  -1.0 is the center."},{"tag":"param:y","text":"y coordinate, from 0 to 1.  -1.0 is the center."},{"tag":"param:holdTime","text":"Number of seconds to hold the text."},{"tag":"param:r","text":"Red color value."},{"tag":"param:g","text":"Green color value."},{"tag":"param:b","text":"Blue color value."},{"tag":"param:a","text":"Alpha transparency value."},{"tag":"param:effect","text":"0/1 causes the text to fade in and fade out.\n2 causes the text to flash[?]."},{"tag":"param:fxTime","text":"Duration of chosen effect (may not apply to all effects)."},{"tag":"param:fadeIn","text":"Number of seconds to spend fading in."},{"tag":"param:fadeOut","text":"Number of seconds to spend fading out."}]},"kind":"native","returnType":"void","arguments":[{"type":"float","name":"x","decl":"float x","default":null},{"type":"float","name":"y","decl":"float y","default":null},{"type":"float","name":"holdTime","decl":"float holdTime","default":null},{"type":"int","name":"r","decl":"int r","default":null},{"type":"int","name":"g","decl":"int g","default":null},{"type":"int","name":"b","decl":"int b","default":null},{"type":"int","name":"a","decl":"int a","default":null},{"type":"int","name":"effect","decl":"int effect","default":"0"},{"type":"float","name":"fxTime","decl":"float fxTime","default":"6.000000"},{"type":"float","name":"fadeIn","decl":"float fadeIn","default":"0.100000"},{"type":"float","name":"fadeOut","decl":"float fadeOut","default":"0.200000"}]},{"name":"SetHudTextParamsEx","docStart":20963,"docEnd":21986,"docs":{"brief":"Sets the HUD parameters for drawing text.  These parameters are stored\nglobally, although nothing other than this function and SetHudTextParams\nmodify them.\n\nThis is the same as SetHudTextParams(), except it lets you set the alternate\ncolor for when effects require it.","tags":[{"tag":"","text":"Sets the HUD parameters for drawing text.  These parameters are stored\nglobally, although nothing other than this function and SetHudTextParams\nmodify them.\n\nThis is the same as SetHudTextParams(), except it lets you set the alternate\ncolor for when effects require it."},{"tag":"param:x","text":"x coordinate, from 0 to 1.  -1.0 is the center."},{"tag":"param:y","text":"y coordinate, from 0 to 1.  -1.0 is the center."},{"tag":"param:holdTime","text":"Number of seconds to hold the text."},{"tag":"param:color1","text":"First color set, array values being [red, green, blue, alpha]"},{"tag":"param:color2","text":"Second color set, array values being [red, green, blue, alpha]"},{"tag":"param:effect","text":"0/1 causes the text to fade in and fade out.\n2 causes the text to flash[?]."},{"tag":"param:fxTime","text":"Duration of chosen effect (may not apply to all effects)."},{"tag":"param:fadeIn","text":"Number of seconds to spend fading in."},{"tag":"param:fadeOut","text":"Number of seconds to spend fading out."}]},"kind":"native","returnType":"void","arguments":[{"type":"float","name":"x","decl":"float x","default":null},{"type":"float","name":"y","decl":"float y","default":null},{"type":"float","name":"holdTime","decl":"float holdTime","default":null},{"type":"int[4]","name":"color1","decl":"int color1[4]","default":null},{"type":"int[4]","name":"color2","decl":"int color2[4]","default":"{ 255, 255, 255, 0 }"},{"type":"int","name":"effect","decl":"int effect","default":"0"},{"type":"float","name":"fxTime","decl":"float fxTime","default":"6.000000"},{"type":"float","name":"fadeIn","decl":"float fadeIn","default":"0.100000"},{"type":"float","name":"fadeOut","decl":"float fadeOut","default":"0.200000"}]},{"name":"ShowSyncHudText","docStart":22192,"docEnd":22772,"docs":{"brief":"Shows a synchronized HUD message to a client.\n\nAs of this writing, only TF, HL2MP, and SourceForts support HUD Text.","tags":[{"tag":"","text":"Shows a synchronized HUD message to a client.\n\nAs of this writing, only TF, HL2MP, and SourceForts support HUD Text."},{"tag":"param:client","text":"Client index to send the message to."},{"tag":"param:sync","text":"Synchronization object."},{"tag":"param:message","text":"Message text or formatting rules."},{"tag":"param:...","text":"Message formatting parameters."},{"tag":"return","text":"-1 on failure, anything else on success.\nThis function fails if the mod does not support it."},{"tag":"error","text":"Client not in-game, or sync object not valid."}]},"kind":"native","returnType":"int","arguments":[{"type":"int","name":"client","decl":"int client","default":null},{"type":"Handle","name":"sync","decl":"Handle sync","default":null},{"type":"const char[]","name":"message","decl":"const char[] message","default":null},{"type":"any...","name":"...","decl":"any...","default":null}]},{"name":"ClearSyncHud","docStart":22861,"docEnd":23502,"docs":{"brief":"Clears the text on a synchronized HUD channel.\n\nThis is not the same as sending \"\" because it guarantees that it won't\noverwrite text on another channel.  For example, consider the scenario:\n\n1. Your synchronized message goes to channel 3.\n2. Someone else's non-synchronized message goes to channel 3.\n\nIf you were to simply send \"\" on your synchronized message,\nthen someone else's text could be overwritten.","tags":[{"tag":"","text":"Clears the text on a synchronized HUD channel.\n\nThis is not the same as sending \"\" because it guarantees that it won't\noverwrite text on another channel.  For example, consider the scenario:\n\n1. Your synchronized message goes to channel 3.\n2. Someone else's non-synchronized message goes to channel 3.\n\nIf you were to simply send \"\" on your synchronized message,\nthen someone else's text could be overwritten."},{"tag":"param:client","text":"Client index to send the message to."},{"tag":"param:sync","text":"Synchronization object."},{"tag":"error","text":"Client not in-game, or sync object not valid."}]},"kind":"native","returnType":"void","arguments":[{"type":"int","name":"client","decl":"int client","default":null},{"type":"Handle","name":"sync","decl":"Handle sync","default":null}]},{"name":"ShowHudText","docStart":23558,"docEnd":24423,"docs":{"brief":"Shows a HUD message to a client on the given channel.\n\nAs of this writing, only TF, HL2MP, and SourceForts support HUD Text.","tags":[{"tag":"","text":"Shows a HUD message to a client on the given channel.\n\nAs of this writing, only TF, HL2MP, and SourceForts support HUD Text."},{"tag":"param:client","text":"Client index to send the message to."},{"tag":"param:channel","text":"A channel number.\nIf -1, then a channel will automatically be selected\nbased on the least-recently-used channel.  If the\nchannel is any other number, it will be modulo'd with\nthe channel count to get a final channel number."},{"tag":"param:message","text":"Message text or formatting rules."},{"tag":"param:...","text":"Message formatting parameters."},{"tag":"return","text":"-1 on failure (lack of mod support).\nAny other return value is the channel number that was\nused to render the text."}]},"kind":"native","returnType":"int","arguments":[{"type":"int","name":"client","decl":"int client","default":null},{"type":"int","name":"channel","decl":"int channel","default":null},{"type":"const char[]","name":"message","decl":"const char[] message","default":null},{"type":"any...","name":"...","decl":"any...","default":null}]},{"name":"ShowMOTDPanel","docStart":24508,"docEnd":25057,"docs":{"brief":"Shows a MOTD panel to a specific client.","tags":[{"tag":"","text":"Shows a MOTD panel to a specific client."},{"tag":"param:client","text":"Client index."},{"tag":"param:title","text":"Title of the panel (printed on the top border of the window)."},{"tag":"param:msg","text":"Contents of the panel, it can be treated as an url, filename or plain text\ndepending on the type parameter (WARNING: msg has to be 192 bytes maximum!)"},{"tag":"param:type","text":"Determines the way to treat the message body of the panel."},{"tag":"error","text":"If the client is not connected an error will be thrown."}]},"kind":"stock","returnType":"void","arguments":[{"type":"int","name":"client","decl":"int client","default":null},{"type":"const char[]","name":"title","decl":"const char[] title","default":null},{"type":"const char[]","name":"msg","decl":"const char[] msg","default":null},{"type":"int","name":"type","decl":"int type","default":"1"}]},{"name":"DisplayAskConnectBox","docStart":25409,"docEnd":25751,"docs":{"brief":"Displays a panel asking the client to connect to a specified IP.","tags":[{"tag":"","text":"Displays a panel asking the client to connect to a specified IP."},{"tag":"param:client","text":"Client index."},{"tag":"param:time","text":"Duration to hold the panel on the client's screen."},{"tag":"param:ip","text":"Destination IP."},{"tag":"param:password","text":"Password to connect to the destination IP. The client will be able to see this."}]},"kind":"stock","returnType":"void","arguments":[{"type":"int","name":"client","decl":"int client","default":null},{"type":"float","name":"time","decl":"float time","default":null},{"type":"const char[]","name":"ip","decl":"const char[] ip","default":null},{"type":"const char[]","name":"password","decl":"const char[] password","default":"\"\""}]},{"name":"EntIndexToEntRef","docStart":26130,"docEnd":26293,"docs":{"brief":"Converts an entity index into a serial encoded entity reference.","tags":[{"tag":"","text":"Converts an entity index into a serial encoded entity reference."},{"tag":"param:entity","text":"Entity index."},{"tag":"return","text":"Entity reference."}]},"kind":"native","returnType":"int","arguments":[{"type":"int","name":"entity","decl":"int entity","default":null}]},{"name":"EntRefToEntIndex","docStart":26339,"docEnd":26482,"docs":{"brief":"Retrieves the entity index from a reference.","tags":[{"tag":"","text":"Retrieves the entity index from a reference."},{"tag":"param:ref","text":"Entity reference."},{"tag":"return","text":"Entity index."}]},"kind":"native","returnType":"int","arguments":[{"type":"int","name":"ref","decl":"int ref","default":null}]},{"name":"MakeCompatEntRef","docStart":26525,"docEnd":26686,"docs":{"brief":"Converts a reference into a backwards compatible version.","tags":[{"tag":"","text":"Converts a reference into a backwards compatible version."},{"tag":"param:ref","text":"Entity reference."},{"tag":"return","text":"Bcompat reference."}]},"kind":"native","returnType":"int","arguments":[{"type":"int","name":"ref","decl":"int ref","default":null}]},{"name":"GetClientsInRange","docStart":26810,"docEnd":27223,"docs":{"brief":"Find clients that are potentially in range of a position.","tags":[{"tag":"","text":"Find clients that are potentially in range of a position."},{"tag":"param:origin","text":"Coordinates from which to test range."},{"tag":"param:rangeType","text":"Range type to use for filtering clients."},{"tag":"param:clients","text":"Array to which found client indexes will be written."},{"tag":"param:size","text":"Maximum size of clients array."},{"tag":"return","text":"Number of client indexes written to clients array."}]},"kind":"native","returnType":"int","arguments":[{"type":"const float[3]","name":"origin","decl":"const float origin[3]","default":null},{"type":"ClientRangeType","name":"rangeType","decl":"ClientRangeType rangeType","default":null},{"type":"int[]","name":"clients","decl":"int[] clients","default":null},{"type":"int","name":"size","decl":"int size","default":null}]},{"name":"GetServerAuthId","docStart":27333,"docEnd":27850,"docs":{"brief":"Retrieves the server's authentication string (SteamID).\n\nNote: If called before server is connected to Steam, auth id\nwill be invalid ([I:0:1], 1, etc.)","tags":[{"tag":"","text":"Retrieves the server's authentication string (SteamID).\n\nNote: If called before server is connected to Steam, auth id\nwill be invalid ([I:0:1], 1, etc.)"},{"tag":"param:authType","text":"Auth id type and format to use.\n(Only AuthId_Steam3 and AuthId_SteamID64 are supported)"},{"tag":"param:auth","text":"Buffer to store the server's auth id."},{"tag":"param:maxlen","text":"Maximum length of string buffer (includes NULL terminator)."},{"tag":"error","text":"Invalid AuthIdType given."}]},"kind":"native","returnType":"void","arguments":[{"type":"AuthIdType","name":"authType","decl":"AuthIdType authType","default":null},{"type":"char[]","name":"auth","decl":"char[] auth","default":null},{"type":"int","name":"maxlen","decl":"int maxlen","default":null}]},{"name":"GetServerSteamAccountId","docStart":27930,"docEnd":28050,"docs":{"brief":"Returns the server's Steam account ID.","tags":[{"tag":"","text":"Returns the server's Steam account ID."},{"tag":"return","text":"Steam account ID or 0 if not available."}]},"kind":"native","returnType":"int","arguments":[]}],"methodmaps":[],"enumstructs":[],"constants":[],"enums":[{"name":"DialogType","docStart":0,"docEnd":0,"docs":null,"entries":[{"name":"DialogType_Msg","docStart":3514,"docEnd":3547,"docs":{"brief":"just an on screen message","tags":[{"tag":"","text":"just an on screen message"}]},"value":"0"},{"name":"DialogType_Menu","docStart":3574,"docEnd":3597,"docs":{"brief":"an options menu","tags":[{"tag":"","text":"an options menu"}]},"value":null},{"name":"DialogType_Text","docStart":3624,"docEnd":3649,"docs":{"brief":"a richtext dialog","tags":[{"tag":"","text":"a richtext dialog"}]},"value":null},{"name":"DialogType_Entry","docStart":3676,"docEnd":3696,"docs":{"brief":"an entry box","tags":[{"tag":"","text":"an entry box"}]},"value":null},{"name":"DialogType_AskConnect","docStart":3723,"docEnd":3774,"docs":{"brief":"ask the client to connect to a specified IP","tags":[{"tag":"","text":"ask the client to connect to a specified IP"}]},"value":null}]},{"name":"EngineVersion","docStart":0,"docEnd":0,"docs":null,"entries":[{"name":"Engine_Unknown","docStart":3834,"docEnd":3880,"docs":{"brief":"Could not determine the engine version","tags":[{"tag":"","text":"Could not determine the engine version"}]},"value":null},{"name":"Engine_Original","docStart":3911,"docEnd":3960,"docs":{"brief":"Original Source Engine (used by The Ship)","tags":[{"tag":"","text":"Original Source Engine (used by The Ship)"}]},"value":null},{"name":"Engine_SourceSDK2006","docStart":3991,"docEnd":4041,"docs":{"brief":"Episode 1 Source Engine (second major SDK)","tags":[{"tag":"","text":"Episode 1 Source Engine (second major SDK)"}]},"value":null},{"name":"Engine_SourceSDK2007","docStart":4072,"docEnd":4122,"docs":{"brief":"Orange Box Source Engine (third major SDK)","tags":[{"tag":"","text":"Orange Box Source Engine (third major SDK)"}]},"value":null},{"name":"Engine_Left4Dead","docStart":4153,"docEnd":4172,"docs":{"brief":"Left 4 Dead","tags":[{"tag":"","text":"Left 4 Dead"}]},"value":null},{"name":"Engine_DarkMessiah","docStart":4203,"docEnd":4262,"docs":{"brief":"Dark Messiah Multiplayer (based on original engine)","tags":[{"tag":"","text":"Dark Messiah Multiplayer (based on original engine)"}]},"value":null},{"name":"Engine_Left4Dead2","docStart":4293,"docEnd":4314,"docs":{"brief":"Left 4 Dead 2","tags":[{"tag":"","text":"Left 4 Dead 2"}]},"value":"7"},{"name":"Engine_AlienSwarm","docStart":4345,"docEnd":4386,"docs":{"brief":"Alien Swarm (and Alien Swarm SDK)","tags":[{"tag":"","text":"Alien Swarm (and Alien Swarm SDK)"}]},"value":null},{"name":"Engine_BloodyGoodTime","docStart":4417,"docEnd":4441,"docs":{"brief":"Bloody Good Time","tags":[{"tag":"","text":"Bloody Good Time"}]},"value":null},{"name":"Engine_EYE","docStart":4472,"docEnd":4503,"docs":{"brief":"E.Y.E Divine Cybermancy","tags":[{"tag":"","text":"E.Y.E Divine Cybermancy"}]},"value":null},{"name":"Engine_Portal2","docStart":4534,"docEnd":4550,"docs":{"brief":"Portal 2","tags":[{"tag":"","text":"Portal 2"}]},"value":null},{"name":"Engine_CSGO","docStart":4581,"docEnd":4621,"docs":{"brief":"Counter-Strike: Global Offensive","tags":[{"tag":"","text":"Counter-Strike: Global Offensive"}]},"value":null},{"name":"Engine_CSS","docStart":4652,"docEnd":4682,"docs":{"brief":"Counter-Strike: Source","tags":[{"tag":"","text":"Counter-Strike: Source"}]},"value":null},{"name":"Engine_DOTA","docStart":4713,"docEnd":4727,"docs":{"brief":"Dota 2","tags":[{"tag":"","text":"Dota 2"}]},"value":null},{"name":"Engine_HL2DM","docStart":4758,"docEnd":4788,"docs":{"brief":"Half-Life 2 Deathmatch","tags":[{"tag":"","text":"Half-Life 2 Deathmatch"}]},"value":null},{"name":"Engine_DODS","docStart":4819,"docEnd":4848,"docs":{"brief":"Day of Defeat: Source","tags":[{"tag":"","text":"Day of Defeat: Source"}]},"value":null},{"name":"Engine_TF2","docStart":4879,"docEnd":4902,"docs":{"brief":"Team Fortress 2","tags":[{"tag":"","text":"Team Fortress 2"}]},"value":null},{"name":"Engine_NuclearDawn","docStart":4933,"docEnd":4953,"docs":{"brief":"Nuclear Dawn","tags":[{"tag":"","text":"Nuclear Dawn"}]},"value":null},{"name":"Engine_SDK2013","docStart":4984,"docEnd":5007,"docs":{"brief":"Source SDK 2013","tags":[{"tag":"","text":"Source SDK 2013"}]},"value":null},{"name":"Engine_Blade","docStart":5038,"docEnd":5060,"docs":{"brief":"Blade Symphony","tags":[{"tag":"","text":"Blade Symphony"}]},"value":null},{"name":"Engine_Insurgency","docStart":5091,"docEnd":5130,"docs":{"brief":"Insurgency (2013 Retail version","tags":[{"tag":"","text":"Insurgency (2013 Retail version"}]},"value":null},{"name":"Engine_Contagion","docStart":5161,"docEnd":5178,"docs":{"brief":"Contagion","tags":[{"tag":"","text":"Contagion"}]},"value":null},{"name":"Engine_BlackMesa","docStart":5209,"docEnd":5239,"docs":{"brief":"Black Mesa Multiplayer","tags":[{"tag":"","text":"Black Mesa Multiplayer"}]},"value":null},{"name":"Engine_DOI","docStart":5270,"docEnd":5291,"docs":{"brief":"Day of Infamy","tags":[{"tag":"","text":"Day of Infamy"}]},"value":null}]},{"name":"FindMapResult","docStart":0,"docEnd":0,"docs":null,"entries":[{"name":"FindMap_Found","docStart":5323,"docEnd":5364,"docs":{"brief":"A direct match for this name was found","tags":[{"tag":"","text":"A direct match for this name was found"}]},"value":null},{"name":"FindMap_NotFound","docStart":5384,"docEnd":5429,"docs":{"brief":"No match for this map name could be found.","tags":[{"tag":"","text":"No match for this map name could be found."}]},"value":null},{"name":"FindMap_FuzzyMatch","docStart":5452,"docEnd":5651,"docs":{"brief":"A fuzzy match for this map name was found.\nEx: cp_dust -> cp_dustbowl, c1m1 -> c1m1_hotel\nOnly supported for maps that the engine knows about. (This excludes workshop maps on Orangebox).","tags":[{"tag":"","text":"A fuzzy match for this map name was found.\nEx: cp_dust -> cp_dustbowl, c1m1 -> c1m1_hotel\nOnly supported for maps that the engine knows about. (This excludes workshop maps on Orangebox)."}]},"value":null},{"name":"FindMap_NonCanonical","docStart":5676,"docEnd":5854,"docs":{"brief":"A non-canonical match for this map name was found.\nEx: workshop/1234 -> workshop/cp_qualified_name.ugc1234\nOnly supported on \"Orangebox\" games with workshop support.","tags":[{"tag":"","text":"A non-canonical match for this map name was found.\nEx: workshop/1234 -> workshop/cp_qualified_name.ugc1234\nOnly supported on \"Orangebox\" games with workshop support."}]},"value":null},{"name":"FindMap_PossiblyAvailable","docStart":5881,"docEnd":6041,"docs":{"brief":"No currently available match for this map name could be found, but it may be possible to load\nOnly supported on \"Orangebox\" games with workshop support.","tags":[{"tag":"","text":"No currently available match for this map name could be found, but it may be possible to load\nOnly supported on \"Orangebox\" games with workshop support."}]},"value":null}]},{"name":"ClientRangeType","docStart":0,"docEnd":0,"docs":null,"entries":[{"name":"RangeType_Visibility","docStart":0,"docEnd":0,"docs":null,"value":"0"},{"name":"RangeType_Audibility","docStart":0,"docEnd":0,"docs":null,"value":null}]}],"typesets":[],"typedefs":[]}