{"functions":[{"name":"GetFunctionByName","docStart":9096,"docEnd":9482,"docs":{"brief":"Gets a function id from a function name.","tags":[{"tag":"","text":"Gets a function id from a function name."},{"tag":"param:plugin","text":"Handle of the plugin that contains the function.\nPass INVALID_HANDLE to search in the calling plugin."},{"tag":"param:name","text":"Name of the function."},{"tag":"return","text":"Function id or INVALID_FUNCTION if not found."},{"tag":"error","text":"Invalid or corrupt plugin handle."}]},"kind":"native","returnType":"function","arguments":[{"type":"Handle","name":"plugin","decl":"Handle plugin","default":null},{"type":"const char[]","name":"name","decl":"const char[] name","default":null}]},{"name":"CreateGlobalForward","docStart":9556,"docEnd":10177,"docs":{"brief":"Creates a global forward.","tags":[{"tag":"","text":"Creates a global forward."},{"tag":"note","text":"The name used to create the forward is used as its public function in all target plugins."},{"tag":"note","text":"This is ideal for global, static forwards that are never changed."},{"tag":"note","text":"Global forwards cannot be cloned."},{"tag":"note","text":"Use CloseHandle() to destroy these."},{"tag":"param:name","text":"Name of public function to use in forward."},{"tag":"param:type","text":"Execution type to be used."},{"tag":"param:...","text":"Variable number of parameter types (up to 32)."},{"tag":"return","text":"Handle to new global forward."},{"tag":"error","text":"More than 32 paramater types passed."}]},"kind":"native","returnType":"GlobalForward","arguments":[{"type":"const char[]","name":"name","decl":"const char[] name","default":null},{"type":"ExecType","name":"type","decl":"ExecType type","default":null},{"type":"ParamType...","name":"...","decl":"ParamType...","default":null}]},{"name":"CreateForward","docStart":10273,"docEnd":10729,"docs":{"brief":"Creates a private forward.","tags":[{"tag":"","text":"Creates a private forward."},{"tag":"note","text":"No functions are automatically added. Use AddToForward() to do this."},{"tag":"note","text":"Private forwards can be cloned."},{"tag":"note","text":"Use CloseHandle() to destroy these."},{"tag":"param:type","text":"Execution type to be used."},{"tag":"param:...","text":"Variable number of parameter types (up to 32)."},{"tag":"return","text":"Handle to new private forward."},{"tag":"error","text":"More than 32 paramater types passed."}]},"kind":"native","returnType":"PrivateForward","arguments":[{"type":"ExecType","name":"type","decl":"ExecType type","default":null},{"type":"ParamType...","name":"...","decl":"ParamType...","default":null}]},{"name":"GetForwardFunctionCount","docStart":10801,"docEnd":11072,"docs":{"brief":"Returns the number of functions in a global or private forward's call list.","tags":[{"tag":"","text":"Returns the number of functions in a global or private forward's call list."},{"tag":"param:fwd","text":"Handle to global or private forward."},{"tag":"return","text":"Number of functions in forward."},{"tag":"error","text":"Invalid or corrupt forward handle."}]},"kind":"native","returnType":"int","arguments":[{"type":"Handle","name":"fwd","decl":"Handle fwd","default":null}]},{"name":"AddToForward","docStart":11125,"docEnd":11684,"docs":{"brief":"Adds a function to a private forward's call list.","tags":[{"tag":"","text":"Adds a function to a private forward's call list."},{"tag":"note","text":"Cannot be used during an incomplete call."},{"tag":"param:fwd","text":"Handle to private forward."},{"tag":"param:plugin","text":"Handle of the plugin that contains the function.\nPass INVALID_HANDLE to specify the calling plugin."},{"tag":"param:func","text":"Function to add to forward."},{"tag":"return","text":"True on success, false otherwise."},{"tag":"error","text":"Invalid or corrupt private forward handle, invalid or corrupt plugin handle, or invalid function."}]},"kind":"native","returnType":"bool","arguments":[{"type":"Handle","name":"fwd","decl":"Handle fwd","default":null},{"type":"Handle","name":"plugin","decl":"Handle plugin","default":null},{"type":"function","name":"func","decl":"function func","default":null}]},{"name":"RemoveFromForward","docStart":11757,"docEnd":12397,"docs":{"brief":"Removes a function from a private forward's call list.","tags":[{"tag":"","text":"Removes a function from a private forward's call list."},{"tag":"note","text":"Only removes one instance."},{"tag":"note","text":"Functions will be removed automatically if their parent plugin is unloaded."},{"tag":"param:fwd","text":"Handle to private forward."},{"tag":"param:plugin","text":"Handle of the plugin that contains the function.\nPass INVALID_HANDLE to specify the calling plugin."},{"tag":"param:func","text":"Function to remove from forward."},{"tag":"return","text":"True on success, false otherwise."},{"tag":"error","text":"Invalid or corrupt private forward handle, invalid or corrupt plugin handle, or invalid function."}]},"kind":"native","returnType":"bool","arguments":[{"type":"Handle","name":"fwd","decl":"Handle fwd","default":null},{"type":"Handle","name":"plugin","decl":"Handle plugin","default":null},{"type":"function","name":"func","decl":"function func","default":null}]},{"name":"RemoveAllFromForward","docStart":12475,"docEnd":13020,"docs":{"brief":"Removes all instances of a plugin from a private forward's call list.","tags":[{"tag":"","text":"Removes all instances of a plugin from a private forward's call list."},{"tag":"note","text":"Functions will be removed automatically if their parent plugin is unloaded."},{"tag":"param:fwd","text":"Handle to private forward."},{"tag":"param:plugin","text":"Handle of the plugin to remove instances of.\nPass INVALID_HANDLE to specify the calling plugin."},{"tag":"return","text":"Number of functions removed from forward."},{"tag":"error","text":"Invalid or corrupt private forward handle or invalid or corrupt plugin handle."}]},"kind":"native","returnType":"int","arguments":[{"type":"Handle","name":"fwd","decl":"Handle fwd","default":null},{"type":"Handle","name":"plugin","decl":"Handle plugin","default":null}]},{"name":"Call_StartForward","docStart":13085,"docEnd":13376,"docs":{"brief":"Starts a call to functions in a forward's call list.","tags":[{"tag":"","text":"Starts a call to functions in a forward's call list."},{"tag":"note","text":"Cannot be used during an incomplete call."},{"tag":"param:fwd","text":"Handle to global or private forward."},{"tag":"error","text":"Invalid or corrupt forward handle or called before another call has completed."}]},"kind":"native","returnType":"void","arguments":[{"type":"Handle","name":"fwd","decl":"Handle fwd","default":null}]},{"name":"Call_StartFunction","docStart":13424,"docEnd":13840,"docs":{"brief":"Starts a call to a function.","tags":[{"tag":"","text":"Starts a call to a function."},{"tag":"note","text":"Cannot be used during an incomplete call."},{"tag":"param:plugin","text":"Handle of the plugin that contains the function.\nPass INVALID_HANDLE to specify the calling plugin."},{"tag":"param:func","text":"Function to call."},{"tag":"error","text":"Invalid or corrupt plugin handle, invalid function, or called before another call has completed."}]},"kind":"native","returnType":"void","arguments":[{"type":"Handle","name":"plugin","decl":"Handle plugin","default":null},{"type":"function","name":"func","decl":"function func","default":null}]},{"name":"Call_PushCell","docStart":13907,"docEnd":14130,"docs":{"brief":"Pushes a cell onto the current call.","tags":[{"tag":"","text":"Pushes a cell onto the current call."},{"tag":"note","text":"Cannot be used before a call has been started."},{"tag":"param:value","text":"Cell value to push."},{"tag":"error","text":"Called before a call has been started."}]},"kind":"native","returnType":"void","arguments":[{"type":"any","name":"value","decl":"any value","default":null}]},{"name":"Call_PushCellRef","docStart":14173,"docEnd":14413,"docs":{"brief":"Pushes a cell by reference onto the current call.","tags":[{"tag":"","text":"Pushes a cell by reference onto the current call."},{"tag":"note","text":"Cannot be used before a call has been started."},{"tag":"param:value","text":"Cell reference to push."},{"tag":"error","text":"Called before a call has been started."}]},"kind":"native","returnType":"void","arguments":[{"type":"any&","name":"value","decl":"any& value","default":null}]},{"name":"Call_PushFloat","docStart":14460,"docEnd":14694,"docs":{"brief":"Pushes a float onto the current call.","tags":[{"tag":"","text":"Pushes a float onto the current call."},{"tag":"note","text":"Cannot be used before a call has been started."},{"tag":"param:value","text":"Floating point value to push."},{"tag":"error","text":"Called before a call has been started."}]},"kind":"native","returnType":"void","arguments":[{"type":"float","name":"value","decl":"float value","default":null}]},{"name":"Call_PushFloatRef","docStart":14740,"docEnd":14991,"docs":{"brief":"Pushes a float by reference onto the current call.","tags":[{"tag":"","text":"Pushes a float by reference onto the current call."},{"tag":"note","text":"Cannot be used before a call has been started."},{"tag":"param:value","text":"Floating point reference to push."},{"tag":"error","text":"Called before a call has been started."}]},"kind":"native","returnType":"void","arguments":[{"type":"float&","name":"value","decl":"float& value","default":null}]},{"name":"Call_PushArray","docStart":15041,"docEnd":15389,"docs":{"brief":"Pushes an array onto the current call.","tags":[{"tag":"","text":"Pushes an array onto the current call."},{"tag":"note","text":"Changes to array are not copied back to caller. Use PushArrayEx() to do this."},{"tag":"note","text":"Cannot be used before a call has been started."},{"tag":"param:value","text":"Array to push."},{"tag":"param:size","text":"Size of array."},{"tag":"error","text":"Called before a call has been started."}]},"kind":"native","returnType":"void","arguments":[{"type":"const any[]","name":"value","decl":"const any[] value","default":null},{"type":"int","name":"size","decl":"int size","default":null}]},{"name":"Call_PushArrayEx","docStart":15451,"docEnd":15864,"docs":{"brief":"Pushes an array onto the current call.","tags":[{"tag":"","text":"Pushes an array onto the current call."},{"tag":"note","text":"Cannot be used before a call has been started."},{"tag":"param:value","text":"Array to push."},{"tag":"param:size","text":"Size of array."},{"tag":"param:cpflags","text":"Whether or not changes should be copied back to the input array.\nSee SP_PARAM_* constants for details."},{"tag":"error","text":"Called before a call has been started."}]},"kind":"native","returnType":"void","arguments":[{"type":"any[]","name":"value","decl":"any[] value","default":null},{"type":"int","name":"size","decl":"int size","default":null},{"type":"int","name":"cpflags","decl":"int cpflags","default":null}]},{"name":"Call_PushNullVector","docStart":15935,"docEnd":16144,"docs":{"brief":"Pushes the NULL_VECTOR onto the current call.","tags":[{"tag":"","text":"Pushes the NULL_VECTOR onto the current call."},{"tag":"see","text":"IsNullVector"},{"tag":"note","text":"Cannot be used before a call has been started."},{"tag":"error","text":"Called before a call has been started."}]},"kind":"native","returnType":"void","arguments":[]},{"name":"Call_PushString","docStart":16184,"docEnd":16495,"docs":{"brief":"Pushes a string onto the current call.","tags":[{"tag":"","text":"Pushes a string onto the current call."},{"tag":"note","text":"Changes to string are not copied back to caller. Use PushStringEx() to do this."},{"tag":"note","text":"Cannot be used before a call has been started."},{"tag":"param:value","text":"String to push."},{"tag":"error","text":"Called before a call has been started."}]},"kind":"native","returnType":"void","arguments":[{"type":"const char[]","name":"value","decl":"const char[] value","default":null}]},{"name":"Call_PushStringEx","docStart":16549,"docEnd":17175,"docs":{"brief":"Pushes a string onto the current call.","tags":[{"tag":"","text":"Pushes a string onto the current call."},{"tag":"note","text":"Cannot be used before a call has been started."},{"tag":"param:value","text":"String to push."},{"tag":"param:length","text":"Length of string buffer."},{"tag":"param:szflags","text":"Flags determining how string should be handled.\nSee SM_PARAM_STRING_* constants for details.\nThe default (0) is to push ASCII."},{"tag":"param:cpflags","text":"Whether or not changes should be copied back to the input array.\nSee SM_PARAM_* constants for details."},{"tag":"error","text":"Called before a call has been started."}]},"kind":"native","returnType":"void","arguments":[{"type":"char[]","name":"value","decl":"char[] value","default":null},{"type":"int","name":"length","decl":"int length","default":null},{"type":"int","name":"szflags","decl":"int szflags","default":null},{"type":"int","name":"cpflags","decl":"int cpflags","default":null}]},{"name":"Call_PushNullString","docStart":17263,"docEnd":17472,"docs":{"brief":"Pushes the NULL_STRING onto the current call.","tags":[{"tag":"","text":"Pushes the NULL_STRING onto the current call."},{"tag":"see","text":"IsNullString"},{"tag":"note","text":"Cannot be used before a call has been started."},{"tag":"error","text":"Called before a call has been started."}]},"kind":"native","returnType":"void","arguments":[]},{"name":"Call_Finish","docStart":17512,"docEnd":17863,"docs":{"brief":"Completes a call to a function or forward's call list.","tags":[{"tag":"","text":"Completes a call to a function or forward's call list."},{"tag":"note","text":"Cannot be used before a call has been started."},{"tag":"param:result","text":"Return value of function or forward's call list."},{"tag":"return","text":"SP_ERROR_NONE on success, any other integer on failure."},{"tag":"error","text":"Called before a call has been started."}]},"kind":"native","returnType":"int","arguments":[{"type":"any&","name":"result","decl":"any& result","default":"0"}]},{"name":"Call_Cancel","docStart":17907,"docEnd":18101,"docs":{"brief":"Cancels a call to a function or forward's call list.","tags":[{"tag":"","text":"Cancels a call to a function or forward's call list."},{"tag":"note","text":"Cannot be used before a call has been started."},{"tag":"error","text":"Called before a call has been started."}]},"kind":"native","returnType":"void","arguments":[]},{"name":"CreateNative","docStart":18858,"docEnd":19220,"docs":{"brief":"Creates a dynamic native.  This should only be called in AskPluginLoad(), or\nelse you risk not having your native shared with other plugins.","tags":[{"tag":"","text":"Creates a dynamic native.  This should only be called in AskPluginLoad(), or\nelse you risk not having your native shared with other plugins."},{"tag":"param:name","text":"Name of the dynamic native; must be unique among\nall other registered dynamic natives."},{"tag":"param:func","text":"Function to use as the dynamic native."}]},"kind":"native","returnType":"void","arguments":[{"type":"const char[]","name":"name","decl":"const char[] name","default":null},{"type":"NativeCall","name":"func","decl":"NativeCall func","default":null}]},{"name":"ThrowNativeError","docStart":19287,"docEnd":19516,"docs":{"brief":"Throws an error in the calling plugin of a native, instead of your own plugin.","tags":[{"tag":"","text":"Throws an error in the calling plugin of a native, instead of your own plugin."},{"tag":"param:error","text":"Error code to use."},{"tag":"param:fmt","text":"Error message format."},{"tag":"param:...","text":"Format arguments."}]},"kind":"native","returnType":"int","arguments":[{"type":"int","name":"error","decl":"int error","default":null},{"type":"const char[]","name":"fmt","decl":"const char[] fmt","default":null},{"type":"any...","name":"...","decl":"any...","default":null}]},{"name":"GetNativeStringLength","docStart":19588,"docEnd":20105,"docs":{"brief":"Retrieves the string length from a native parameter string.  This is useful for\nfetching the entire string using dynamic arrays.","tags":[{"tag":"","text":"Retrieves the string length from a native parameter string.  This is useful for\nfetching the entire string using dynamic arrays."},{"tag":"note","text":"If this function succeeds, Get/SetNativeString will also succeed."},{"tag":"param:param","text":"Parameter number, starting from 1."},{"tag":"param:length","text":"Stores the length of the string."},{"tag":"return","text":"SP_ERROR_NONE on success, any other integer on failure."},{"tag":"error","text":"Invalid parameter number or calling from a non-native function."}]},"kind":"native","returnType":"int","arguments":[{"type":"int","name":"param","decl":"int param","default":null},{"type":"int&","name":"length","decl":"int& length","default":null}]},{"name":"GetNativeString","docStart":20168,"docEnd":20698,"docs":{"brief":"Retrieves a string from a native parameter.","tags":[{"tag":"","text":"Retrieves a string from a native parameter."},{"tag":"note","text":"Output conditions are undefined on failure."},{"tag":"param:param","text":"Parameter number, starting from 1."},{"tag":"param:buffer","text":"Buffer to store the string in."},{"tag":"param:maxlength","text":"Maximum length of the buffer."},{"tag":"param:bytes","text":"Optionally store the number of bytes written."},{"tag":"return","text":"SP_ERROR_NONE on success, any other integer on failure."},{"tag":"error","text":"Invalid parameter number or calling from a non-native function."}]},"kind":"native","returnType":"int","arguments":[{"type":"int","name":"param","decl":"int param","default":null},{"type":"char[]","name":"buffer","decl":"char[] buffer","default":null},{"type":"int","name":"maxlength","decl":"int maxlength","default":null},{"type":"int&","name":"bytes","decl":"int& bytes","default":"0"}]},{"name":"SetNativeString","docStart":20786,"docEnd":21409,"docs":{"brief":"Sets a string in a native parameter.","tags":[{"tag":"","text":"Sets a string in a native parameter."},{"tag":"note","text":"Output conditions are undefined on failure."},{"tag":"param:param","text":"Parameter number, starting from 1."},{"tag":"param:source","text":"Source string to use."},{"tag":"param:maxlength","text":"Maximum number of bytes to write."},{"tag":"param:utf8","text":"If false, string will not be written\nwith UTF8 safety."},{"tag":"param:bytes","text":"Optionally store the number of bytes written."},{"tag":"return","text":"SP_ERROR_NONE on success, any other integer on failure."},{"tag":"error","text":"Invalid parameter number or calling from a non-native function."}]},"kind":"native","returnType":"int","arguments":[{"type":"int","name":"param","decl":"int param","default":null},{"type":"const char[]","name":"source","decl":"const char[] source","default":null},{"type":"int","name":"maxlength","decl":"int maxlength","default":null},{"type":"bool","name":"utf8","decl":"bool utf8","default":"true"},{"type":"int&","name":"bytes","decl":"int& bytes","default":"0"}]},{"name":"GetNativeCell","docStart":21519,"docEnd":21782,"docs":{"brief":"Gets a cell from a native parameter.","tags":[{"tag":"","text":"Gets a cell from a native parameter."},{"tag":"param:param","text":"Parameter number, starting from 1."},{"tag":"return","text":"Cell value at the parameter number."},{"tag":"error","text":"Invalid parameter number or calling from a non-native function."}]},"kind":"native","returnType":"any","arguments":[{"type":"int","name":"param","decl":"int param","default":null}]},{"name":"GetNativeFunction","docStart":21824,"docEnd":22124,"docs":{"brief":"Gets a function pointer from a native parameter.","tags":[{"tag":"","text":"Gets a function pointer from a native parameter."},{"tag":"param:param","text":"Parameter number, starting from 1."},{"tag":"return","text":"Function pointer at the given parameter number."},{"tag":"error","text":"Invalid parameter number, or calling from a non-native function."}]},"kind":"native","returnType":"function","arguments":[{"type":"int","name":"param","decl":"int param","default":null}]},{"name":"GetNativeCellRef","docStart":22175,"docEnd":22452,"docs":{"brief":"Gets a cell from a native parameter, by reference.","tags":[{"tag":"","text":"Gets a cell from a native parameter, by reference."},{"tag":"param:param","text":"Parameter number, starting from 1."},{"tag":"return","text":"Cell value at the parameter number."},{"tag":"error","text":"Invalid parameter number or calling from a non-native function."}]},"kind":"native","returnType":"any","arguments":[{"type":"int","name":"param","decl":"int param","default":null}]},{"name":"SetNativeCellRef","docStart":22497,"docEnd":22794,"docs":{"brief":"Sets a cell from a native parameter, by reference.","tags":[{"tag":"","text":"Sets a cell from a native parameter, by reference."},{"tag":"param:param","text":"Parameter number, starting from 1."},{"tag":"param:value","text":"Cell value at the parameter number to set by reference."},{"tag":"error","text":"Invalid parameter number or calling from a non-native function."}]},"kind":"native","returnType":"void","arguments":[{"type":"int","name":"param","decl":"int param","default":null},{"type":"any","name":"value","decl":"any value","default":null}]},{"name":"GetNativeArray","docStart":22851,"docEnd":23259,"docs":{"brief":"Gets an array from a native parameter (always by reference).","tags":[{"tag":"","text":"Gets an array from a native parameter (always by reference)."},{"tag":"param:param","text":"Parameter number, starting from 1."},{"tag":"param:local","text":"Local array to copy into."},{"tag":"param:size","text":"Maximum size of local array."},{"tag":"return","text":"SP_ERROR_NONE on success, anything else on failure."},{"tag":"error","text":"Invalid parameter number or calling from a non-native function."}]},"kind":"native","returnType":"int","arguments":[{"type":"int","name":"param","decl":"int param","default":null},{"type":"any[]","name":"local","decl":"any[] local","default":null},{"type":"int","name":"size","decl":"int size","default":null}]},{"name":"SetNativeArray","docStart":23325,"docEnd":23750,"docs":{"brief":"Copies a local array into a native parameter array (always by reference).","tags":[{"tag":"","text":"Copies a local array into a native parameter array (always by reference)."},{"tag":"param:param","text":"Parameter number, starting from 1."},{"tag":"param:local","text":"Local array to copy from."},{"tag":"param:size","text":"Size of the local array to copy."},{"tag":"return","text":"SP_ERROR_NONE on success, anything else on failure."},{"tag":"error","text":"Invalid parameter number or calling from a non-native function."}]},"kind":"native","returnType":"int","arguments":[{"type":"int","name":"param","decl":"int param","default":null},{"type":"const any[]","name":"local","decl":"const any[] local","default":null},{"type":"int","name":"size","decl":"int size","default":null}]},{"name":"IsNativeParamNullVector","docStart":23822,"docEnd":24011,"docs":{"brief":"Check if the native parameter is the NULL_VECTOR.","tags":[{"tag":"","text":"Check if the native parameter is the NULL_VECTOR."},{"tag":"param:param","text":"Parameter number, starting from 1."},{"tag":"return","text":"True if NULL_VECTOR, false otherwise."}]},"kind":"native","returnType":"bool","arguments":[{"type":"int","name":"param","decl":"int param","default":null}]},{"name":"IsNativeParamNullString","docStart":24064,"docEnd":24253,"docs":{"brief":"Check if the native parameter is the NULL_STRING.","tags":[{"tag":"","text":"Check if the native parameter is the NULL_STRING."},{"tag":"param:param","text":"Parameter number, starting from 1."},{"tag":"return","text":"True if NULL_STRING, false otherwise."}]},"kind":"native","returnType":"bool","arguments":[{"type":"int","name":"param","decl":"int param","default":null}]},{"name":"FormatNativeString","docStart":24306,"docEnd":25143,"docs":{"brief":"Formats a string using parameters from a native.","tags":[{"tag":"","text":"Formats a string using parameters from a native."},{"tag":"note","text":"All parameter indexes start at 1."},{"tag":"note","text":"If the input and output buffers overlap, the contents\nof the output buffer at the end is undefined."},{"tag":"param:out_param","text":"Output parameter number to write to.  If 0, out_string is used."},{"tag":"param:fmt_param","text":"Format parameter number.  If 0, fmt_string is used."},{"tag":"param:vararg_param","text":"First variable parameter number."},{"tag":"param:out_len","text":"Output string buffer maximum length (always required)."},{"tag":"param:written","text":"Optionally stores the number of bytes written."},{"tag":"param:out_string","text":"Output string buffer to use if out_param is not used."},{"tag":"param:fmt_string","text":"Format string to use if fmt_param is not used."},{"tag":"return","text":"SP_ERROR_NONE on success, anything else on failure."}]},"kind":"native","returnType":"int","arguments":[{"type":"int","name":"out_param","decl":"int out_param","default":null},{"type":"int","name":"fmt_param","decl":"int fmt_param","default":null},{"type":"int","name":"vararg_param","decl":"int vararg_param","default":null},{"type":"int","name":"out_len","decl":"int out_len","default":null},{"type":"int&","name":"written","decl":"int& written","default":"0"},{"type":"char[]","name":"out_string","decl":"char[] out_string","default":"\"\""},{"type":"const char[]","name":"fmt_string","decl":"const char[] fmt_string","default":"\"\""}]},{"name":"RequestFrame","docStart":25561,"docEnd":25755,"docs":{"brief":"Creates a single use Next Frame hook.","tags":[{"tag":"","text":"Creates a single use Next Frame hook."},{"tag":"param:Function","text":"Function to call on the next frame."},{"tag":"param:data","text":"Value to be passed on the invocation of the Function."}]},"kind":"native","returnType":"void","arguments":[{"type":"RequestFrameCallback","name":"Function","decl":"RequestFrameCallback Function","default":null},{"type":"any","name":"data","decl":"any data","default":"0"}]}],"methodmaps":[{"name":"GlobalForward","docStart":0,"docEnd":0,"docs":null,"parent":"Handle","methods":[{"name":"GlobalForward","docStart":5871,"docEnd":6513,"docs":{"brief":"Creates a global forward.","tags":[{"tag":"","text":"Creates a global forward."},{"tag":"note","text":"The name used to create the forward is used as its public function in all target plugins."},{"tag":"note","text":"This is ideal for global, static forwards that are never changed."},{"tag":"note","text":"Global forwards cannot be cloned."},{"tag":"note","text":"Use CloseHandle() to destroy these."},{"tag":"param:name","text":"Name of public function to use in forward."},{"tag":"param:type","text":"Execution type to be used."},{"tag":"param:...","text":"Variable number of parameter types (up to 32)."},{"tag":"return","text":"Handle to new global forward."},{"tag":"error","text":"More than 32 paramater types passed."}]},"kind":"native","returnType":"GlobalForward","arguments":[{"type":"const char[]","name":"name","decl":"const char[] name","default":null},{"type":"ExecType","name":"type","decl":"ExecType type","default":null},{"type":"ParamType...","name":"...","decl":"ParamType...","default":null}]}],"properties":[{"name":"FunctionCount","docStart":6598,"docEnd":6676,"docs":{"brief":"Returns the number of functions in a global or private forward's call list.","tags":[{"tag":"","text":"Returns the number of functions in a global or private forward's call list."}]},"type":"int","getter":true,"setter":false}]},{"name":"PrivateForward","docStart":0,"docEnd":0,"docs":null,"parent":"GlobalForward","methods":[{"name":"PrivateForward","docStart":6788,"docEnd":7243,"docs":{"brief":"Creates a private forward.","tags":[{"tag":"","text":"Creates a private forward."},{"tag":"note","text":"No functions are automatically added. Use AddToForward() to do this."},{"tag":"note","text":"Private forwards can be cloned."},{"tag":"note","text":"Use CloseHandle() to destroy these."},{"tag":"param:type","text":"Execution type to be used."},{"tag":"param:...","text":"Variable number of parameter types (up to 32)."},{"tag":"return","text":"Handle to new private forward."},{"tag":"error","text":"More than 32 paramater types passed."}]},"kind":"native","returnType":"PrivateForward","arguments":[{"type":"ExecType","name":"type","decl":"ExecType type","default":null},{"type":"ParamType...","name":"...","decl":"ParamType...","default":null}]},{"name":"AddFunction","docStart":7310,"docEnd":7815,"docs":{"brief":"Adds a function to a private forward's call list.","tags":[{"tag":"","text":"Adds a function to a private forward's call list."},{"tag":"note","text":"Cannot be used during an incomplete call."},{"tag":"param:plugin","text":"Handle of the plugin that contains the function.\nPass INVALID_HANDLE to specify the calling plugin."},{"tag":"param:func","text":"Function to add to forward."},{"tag":"return","text":"True on success, false otherwise."},{"tag":"error","text":"Invalid or corrupt private forward handle, invalid or corrupt plugin handle, or invalid function."}]},"kind":"native","returnType":"bool","arguments":[{"type":"Handle","name":"plugin","decl":"Handle plugin","default":null},{"type":"function","name":"func","decl":"function func","default":null}]},{"name":"RemoveFunction","docStart":7884,"docEnd":8471,"docs":{"brief":"Removes a function from a private forward's call list.","tags":[{"tag":"","text":"Removes a function from a private forward's call list."},{"tag":"note","text":"Only removes one instance."},{"tag":"note","text":"Functions will be removed automatically if their parent plugin is unloaded."},{"tag":"param:plugin","text":"Handle of the plugin that contains the function.\nPass INVALID_HANDLE to specify the calling plugin."},{"tag":"param:func","text":"Function to remove from forward."},{"tag":"return","text":"True on success, false otherwise."},{"tag":"error","text":"Invalid or corrupt private forward handle, invalid or corrupt plugin handle, or invalid function."}]},"kind":"native","returnType":"bool","arguments":[{"type":"Handle","name":"plugin","decl":"Handle plugin","default":null},{"type":"function","name":"func","decl":"function func","default":null}]},{"name":"RemoveAllFunctions","docStart":8543,"docEnd":9033,"docs":{"brief":"Removes all instances of a plugin from a private forward's call list.","tags":[{"tag":"","text":"Removes all instances of a plugin from a private forward's call list."},{"tag":"note","text":"Functions will be removed automatically if their parent plugin is unloaded."},{"tag":"param:plugin","text":"Handle of the plugin to remove instances of.\nPass INVALID_HANDLE to specify the calling plugin."},{"tag":"return","text":"Number of functions removed from forward."},{"tag":"error","text":"Invalid or corrupt private forward handle or invalid or corrupt plugin handle."}]},"kind":"native","returnType":"int","arguments":[{"type":"Handle","name":"plugin","decl":"Handle plugin","default":null}]}],"properties":[]}],"enumstructs":[],"constants":[],"enums":[{"name":"ParamType","docStart":1709,"docEnd":1793,"docs":{"brief":"Describes the various ways to pass parameters to functions or forwards.","tags":[{"tag":"","text":"Describes the various ways to pass parameters to functions or forwards."}]},"entries":[{"name":"Param_Any","docStart":1867,"docEnd":1902,"docs":{"brief":"Any data type can be pushed","tags":[{"tag":"","text":"Any data type can be pushed"}]},"value":"0"},{"name":"Param_Cell","docStart":1957,"docEnd":1995,"docs":{"brief":"Only basic cells can be pushed","tags":[{"tag":"","text":"Only basic cells can be pushed"}]},"value":"1 << 1"},{"name":"Param_Float","docStart":2050,"docEnd":2083,"docs":{"brief":"Only floats can be pushed","tags":[{"tag":"","text":"Only floats can be pushed"}]},"value":"2 << 1"},{"name":"Param_String","docStart":2138,"docEnd":2172,"docs":{"brief":"Only strings can be pushed","tags":[{"tag":"","text":"Only strings can be pushed"}]},"value":"3 << 1 | 1 << 0"},{"name":"Param_Array","docStart":2227,"docEnd":2260,"docs":{"brief":"Only arrays can be pushed","tags":[{"tag":"","text":"Only arrays can be pushed"}]},"value":"4 << 1 | 1 << 0"},{"name":"Param_VarArgs","docStart":2315,"docEnd":2400,"docs":{"brief":"Same as \"...\" in plugins, anything can be pushed, but it will always be byref","tags":[{"tag":"","text":"Same as \"...\" in plugins, anything can be pushed, but it will always be byref"}]},"value":"5 << 1"},{"name":"Param_CellByRef","docStart":2455,"docEnd":2501,"docs":{"brief":"Only a cell by reference can be pushed","tags":[{"tag":"","text":"Only a cell by reference can be pushed"}]},"value":"1 << 1 | 1 << 0"},{"name":"Param_FloatByRef","docStart":2556,"docEnd":2603,"docs":{"brief":"Only a float by reference can be pushed","tags":[{"tag":"","text":"Only a float by reference can be pushed"}]},"value":"2 << 1 | 1 << 0"}]},{"name":"ExecType","docStart":2611,"docEnd":2680,"docs":{"brief":"Defines how a forward iterates through plugin functions.","tags":[{"tag":"","text":"Defines how a forward iterates through plugin functions."}]},"entries":[{"name":"ET_Ignore","docStart":2721,"docEnd":2763,"docs":{"brief":"Ignore all return values, return 0","tags":[{"tag":"","text":"Ignore all return values, return 0"}]},"value":"0"},{"name":"ET_Single","docStart":2786,"docEnd":2838,"docs":{"brief":"Only return the last exec, ignore all others","tags":[{"tag":"","text":"Only return the last exec, ignore all others"}]},"value":"1"},{"name":"ET_Event","docStart":2861,"docEnd":2961,"docs":{"brief":"Acts as an event with the Actions defined in core.inc, no mid-Stops allowed, returns highest","tags":[{"tag":"","text":"Acts as an event with the Actions defined in core.inc, no mid-Stops allowed, returns highest"}]},"value":"2"},{"name":"ET_Hook","docStart":2984,"docEnd":3079,"docs":{"brief":"Acts as a hook with the Actions defined in core.inc, mid-Stops allowed, returns highest","tags":[{"tag":"","text":"Acts as a hook with the Actions defined in core.inc, mid-Stops allowed, returns highest"}]},"value":"3"}]}],"typesets":[{"name":"NativeCall","docStart":0,"docEnd":0,"docs":null,"types":[{"docStart":18157,"docEnd":18453,"docs":{"brief":"Defines a native function.\n\nIt is not necessary to validate the parameter count","tags":[{"tag":"","text":"Defines a native function.\n\nIt is not necessary to validate the parameter count"},{"tag":"param:plugin","text":"Handle of the calling plugin."},{"tag":"param:numParams","text":"Number of parameters passed to the native."},{"tag":"return","text":"Value for the native call to return."}]},"type":"function int(Handle plugin, int numParams)","parsedSignature":{"returnType":"int","arguments":[{"type":"Handle","name":"plugin","decl":"Handle plugin","default":null},{"type":"int","name":"numParams","decl":"int numParams","default":null}]}},{"docStart":18505,"docEnd":18804,"docs":{"brief":"Defines a native function.\n\nIt is not necessary to validate the parameter count","tags":[{"tag":"","text":"Defines a native function.\n\nIt is not necessary to validate the parameter count"},{"tag":"param:plugin","text":"Handle of the calling plugin."},{"tag":"param:numParams","text":"Number of parameters passed to the native."},{"tag":"return","text":"Value for the native call to return."}]},"type":"function any(Handle plugin, int numParams)","parsedSignature":{"returnType":"any","arguments":[{"type":"Handle","name":"plugin","decl":"Handle plugin","default":null},{"type":"int","name":"numParams","decl":"int numParams","default":null}]}}]},{"name":"RequestFrameCallback","docStart":25360,"docEnd":25474,"docs":{"brief":"Defines a RequestFrame Callback.","tags":[{"tag":"","text":"Defines a RequestFrame Callback."},{"tag":"param:data","text":"Data passed to the RequestFrame native."}]},"types":[{"docStart":0,"docEnd":0,"docs":null,"type":"function void()","parsedSignature":{"returnType":"void","arguments":[]}},{"docStart":0,"docEnd":0,"docs":null,"type":"function void(any data)","parsedSignature":{"returnType":"void","arguments":[]}}]}],"typedefs":[]}