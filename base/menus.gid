{"functions":[{"name":"CreateMenu","docStart":18722,"docEnd":19174,"docs":{"brief":"Creates a new, empty menu using the default style.","tags":[{"tag":"","text":"Creates a new, empty menu using the default style."},{"tag":"param:handler","text":"Function which will receive menu actions."},{"tag":"param:actions","text":"Optionally set which actions to receive.  Select,\nCancel, and End will always be received regardless\nof whether they are set or not.  They are also\nthe only default actions."},{"tag":"return","text":"A new menu Handle."}]},"kind":"native","returnType":"Menu","arguments":[{"type":"MenuHandler","name":"handler","decl":"MenuHandler handler","default":null},{"type":"MenuAction","name":"actions","decl":"MenuAction actions","default":"MenuAction_Select | MenuAction_Cancel | MenuAction_End"}]},{"name":"DisplayMenu","docStart":19265,"docEnd":19577,"docs":{"brief":"Displays a menu to a client.","tags":[{"tag":"","text":"Displays a menu to a client."},{"tag":"param:menu","text":"Menu Handle."},{"tag":"param:client","text":"Client index."},{"tag":"param:time","text":"Maximum time to leave menu on the screen."},{"tag":"return","text":"True on success, false on failure."},{"tag":"error","text":"Invalid Handle or client not in game."}]},"kind":"native","returnType":"bool","arguments":[{"type":"Handle","name":"menu","decl":"Handle menu","default":null},{"type":"int","name":"client","decl":"int client","default":null},{"type":"int","name":"time","decl":"int time","default":null}]},{"name":"DisplayMenuAtItem","docStart":19642,"docEnd":20043,"docs":{"brief":"Displays a menu to a client, starting from the given item.","tags":[{"tag":"","text":"Displays a menu to a client, starting from the given item."},{"tag":"param:menu","text":"Menu Handle."},{"tag":"param:client","text":"Client index."},{"tag":"param:first_item","text":"First item to begin drawing from."},{"tag":"param:time","text":"Maximum time to leave menu on the screen."},{"tag":"return","text":"True on success, false on failure."},{"tag":"error","text":"Invalid Handle or client not in game."}]},"kind":"native","returnType":"bool","arguments":[{"type":"Handle","name":"menu","decl":"Handle menu","default":null},{"type":"int","name":"client","decl":"int client","default":null},{"type":"int","name":"first_item","decl":"int first_item","default":null},{"type":"int","name":"time","decl":"int time","default":null}]},{"name":"AddMenuItem","docStart":20130,"docEnd":20608,"docs":{"brief":"Appends a new item to the end of a menu.","tags":[{"tag":"","text":"Appends a new item to the end of a menu."},{"tag":"param:menu","text":"Menu Handle."},{"tag":"param:info","text":"Item information string."},{"tag":"param:display","text":"Default item display string."},{"tag":"param:style","text":"Drawing style flags.  Anything other than DEFAULT or\nDISABLED will be completely ignored when paginating."},{"tag":"return","text":"True on success, false on failure."},{"tag":"error","text":"Invalid Handle or item limit reached."}]},"kind":"native","returnType":"bool","arguments":[{"type":"Handle","name":"menu","decl":"Handle menu","default":null},{"type":"const char[]","name":"info","decl":"const char[] info","default":null},{"type":"const char[]","name":"display","decl":"const char[] display","default":null},{"type":"int","name":"style","decl":"int style","default":"0"}]},{"name":"InsertMenuItem","docStart":20741,"docEnd":21364,"docs":{"brief":"Inserts an item into the menu before a certain position; the new item will\nbe at the given position and all next items pushed forward.","tags":[{"tag":"","text":"Inserts an item into the menu before a certain position; the new item will\nbe at the given position and all next items pushed forward."},{"tag":"param:menu","text":"Menu Handle."},{"tag":"param:position","text":"Position, starting from 0."},{"tag":"param:info","text":"Item information string."},{"tag":"param:display","text":"Default item display string."},{"tag":"param:style","text":"Drawing style flags.  Anything other than DEFAULT or\nDISABLED will be completely ignored when paginating."},{"tag":"return","text":"True on success, false on failure."},{"tag":"error","text":"Invalid Handle or menu position."}]},"kind":"native","returnType":"bool","arguments":[{"type":"Handle","name":"menu","decl":"Handle menu","default":null},{"type":"int","name":"position","decl":"int position","default":null},{"type":"const char[]","name":"info","decl":"const char[] info","default":null},{"type":"const char[]","name":"display","decl":"const char[] display","default":null},{"type":"int","name":"style","decl":"int style","default":"0"}]},{"name":"RemoveMenuItem","docStart":21517,"docEnd":21772,"docs":{"brief":"Removes an item from the menu.","tags":[{"tag":"","text":"Removes an item from the menu."},{"tag":"param:menu","text":"Menu Handle."},{"tag":"param:position","text":"Position, starting from 0."},{"tag":"return","text":"True on success, false on failure."},{"tag":"error","text":"Invalid Handle or menu position."}]},"kind":"native","returnType":"bool","arguments":[{"type":"Handle","name":"menu","decl":"Handle menu","default":null},{"type":"int","name":"position","decl":"int position","default":null}]},{"name":"RemoveAllMenuItems","docStart":21832,"docEnd":21975,"docs":{"brief":"Removes all items from a menu.","tags":[{"tag":"","text":"Removes all items from a menu."},{"tag":"param:menu","text":"Menu Handle."},{"tag":"error","text":"Invalid Handle or menu position."}]},"kind":"native","returnType":"void","arguments":[{"type":"Handle","name":"menu","decl":"Handle menu","default":null}]},{"name":"GetMenuItem","docStart":22025,"docEnd":22558,"docs":{"brief":"Retrieves information about a menu item.","tags":[{"tag":"","text":"Retrieves information about a menu item."},{"tag":"param:menu","text":"Menu Handle."},{"tag":"param:position","text":"Position, starting from 0."},{"tag":"param:infoBuf","text":"Info buffer."},{"tag":"param:infoBufLen","text":"Maximum length of the info buffer."},{"tag":"param:style","text":"By-reference variable to store drawing flags."},{"tag":"param:dispBuf","text":"Display buffer."},{"tag":"param:dispBufLen","text":"Maximum length of the display buffer."},{"tag":"return","text":"True on success, false if position is invalid."},{"tag":"error","text":"Invalid Handle."}]},"kind":"native","returnType":"bool","arguments":[{"type":"Handle","name":"menu","decl":"Handle menu","default":null},{"type":"int","name":"position","decl":"int position","default":null},{"type":"char[]","name":"infoBuf","decl":"char[] infoBuf","default":null},{"type":"int","name":"infoBufLen","decl":"int infoBufLen","default":null},{"type":"int&","name":"style","decl":"int& style","default":"0"},{"type":"char[]","name":"dispBuf","decl":"char[] dispBuf","default":"\"\""},{"type":"int","name":"dispBufLen","decl":"int dispBufLen","default":"0"}]},{"name":"GetMenuSelectionPosition","docStart":22740,"docEnd":23228,"docs":{"brief":"Returns the first item on the page of a currently selected menu.\n\nThis is only valid inside a MenuAction_Select callback.","tags":[{"tag":"","text":"Returns the first item on the page of a currently selected menu.\n\nThis is only valid inside a MenuAction_Select callback."},{"tag":"return","text":"First item number on the page the client was viewing\nbefore selecting the item in the callback.  This can\nbe used to re-display the menu from the original\nposition."},{"tag":"error","text":"Not called from inside a MenuAction_Select callback."}]},"kind":"native","returnType":"int","arguments":[]},{"name":"GetMenuItemCount","docStart":23272,"docEnd":23460,"docs":{"brief":"Returns the number of items in a menu.","tags":[{"tag":"","text":"Returns the number of items in a menu."},{"tag":"param:menu","text":"Menu Handle."},{"tag":"return","text":"Number of items in the menu."},{"tag":"error","text":"Invalid Handle."}]},"kind":"native","returnType":"int","arguments":[{"type":"Handle","name":"menu","decl":"Handle menu","default":null}]},{"name":"SetMenuPagination","docStart":23507,"docEnd":23996,"docs":{"brief":"Sets whether the menu should be paginated or not.\n\nIf itemsPerPage is MENU_NO_PAGINATION, and the exit button flag is set,\nthen the exit button flag is removed.  It can be re-applied if desired.","tags":[{"tag":"","text":"Sets whether the menu should be paginated or not.\n\nIf itemsPerPage is MENU_NO_PAGINATION, and the exit button flag is set,\nthen the exit button flag is removed.  It can be re-applied if desired."},{"tag":"param:menu","text":"Handle to the menu."},{"tag":"param:itemsPerPage","text":"Number of items per page, or MENU_NO_PAGINATION."},{"tag":"return","text":"True on success, false if pagination is too high or\nlow."},{"tag":"error","text":"Invalid Handle."}]},"kind":"native","returnType":"bool","arguments":[{"type":"Handle","name":"menu","decl":"Handle menu","default":null},{"type":"int","name":"itemsPerPage","decl":"int itemsPerPage","default":null}]},{"name":"GetMenuPagination","docStart":24063,"docEnd":24247,"docs":{"brief":"Returns a menu's pagination setting.","tags":[{"tag":"","text":"Returns a menu's pagination setting."},{"tag":"param:menu","text":"Handle to the menu."},{"tag":"return","text":"Pagination setting."},{"tag":"error","text":"Invalid Handle."}]},"kind":"native","returnType":"int","arguments":[{"type":"Handle","name":"menu","decl":"Handle menu","default":null}]},{"name":"GetMenuStyle","docStart":24295,"docEnd":24537,"docs":{"brief":"Returns a menu's MenuStyle Handle.  The Handle\nis global and cannot be freed.","tags":[{"tag":"","text":"Returns a menu's MenuStyle Handle.  The Handle\nis global and cannot be freed."},{"tag":"param:menu","text":"Handle to the menu."},{"tag":"return","text":"Handle to the menu's draw style."},{"tag":"error","text":"Invalid Handle."}]},"kind":"native","returnType":"Handle","arguments":[{"type":"Handle","name":"menu","decl":"Handle menu","default":null}]},{"name":"SetMenuTitle","docStart":24583,"docEnd":24827,"docs":{"brief":"Sets the menu's default title/instruction message.","tags":[{"tag":"","text":"Sets the menu's default title/instruction message."},{"tag":"param:menu","text":"Menu Handle."},{"tag":"param:fmt","text":"Message string format"},{"tag":"param:...","text":"Message string arguments."},{"tag":"error","text":"Invalid Handle."}]},"kind":"native","returnType":"void","arguments":[{"type":"Handle","name":"menu","decl":"Handle menu","default":null},{"type":"const char[]","name":"fmt","decl":"const char[] fmt","default":null},{"type":"any...","name":"...","decl":"any...","default":null}]},{"name":"GetMenuTitle","docStart":24898,"docEnd":25182,"docs":{"brief":"Returns the text of a menu's title.","tags":[{"tag":"","text":"Returns the text of a menu's title."},{"tag":"param:menu","text":"Menu Handle."},{"tag":"param:buffer","text":"Buffer to store title."},{"tag":"param:maxlength","text":"Maximum length of the buffer."},{"tag":"return","text":"Number of bytes written."},{"tag":"error","text":"Invalid Handle/"}]},"kind":"native","returnType":"int","arguments":[{"type":"Handle","name":"menu","decl":"Handle menu","default":null},{"type":"char[]","name":"buffer","decl":"char[] buffer","default":null},{"type":"int","name":"maxlength","decl":"int maxlength","default":null}]},{"name":"CreatePanelFromMenu","docStart":25255,"docEnd":25500,"docs":{"brief":"Creates a raw MenuPanel based off the menu's style.\nThe Handle must be freed with CloseHandle().","tags":[{"tag":"","text":"Creates a raw MenuPanel based off the menu's style.\nThe Handle must be freed with CloseHandle()."},{"tag":"param:menu","text":"Menu Handle."},{"tag":"return","text":"A new MenuPanel Handle."},{"tag":"error","text":"Invalid Handle."}]},"kind":"native","returnType":"Panel","arguments":[{"type":"Handle","name":"menu","decl":"Handle menu","default":null}]},{"name":"GetMenuExitButton","docStart":25552,"docEnd":25821,"docs":{"brief":"Returns whether or not the menu has an exit button.\nBy default, menus have an exit button.","tags":[{"tag":"","text":"Returns whether or not the menu has an exit button.\nBy default, menus have an exit button."},{"tag":"param:menu","text":"Menu Handle."},{"tag":"return","text":"True if the menu has an exit button; false otherwise."},{"tag":"error","text":"Invalid Handle."}]},"kind":"native","returnType":"bool","arguments":[{"type":"Handle","name":"menu","decl":"Handle menu","default":null}]},{"name":"SetMenuExitButton","docStart":25870,"docEnd":26517,"docs":{"brief":"Sets whether or not the menu has an exit button.  By default, paginated menus\nhave an exit button.\n\nIf a menu's pagination is changed to MENU_NO_PAGINATION, and the pagination\nwas previously a different value, then the Exit button status is changed to\nfalse.  It must be explicitly re-enabled afterwards.\n\nIf a non-paginated menu has an exit button, then at most 9 items will be\ndisplayed.","tags":[{"tag":"","text":"Sets whether or not the menu has an exit button.  By default, paginated menus\nhave an exit button.\n\nIf a menu's pagination is changed to MENU_NO_PAGINATION, and the pagination\nwas previously a different value, then the Exit button status is changed to\nfalse.  It must be explicitly re-enabled afterwards.\n\nIf a non-paginated menu has an exit button, then at most 9 items will be\ndisplayed."},{"tag":"param:menu","text":"Menu Handle."},{"tag":"param:button","text":"True to enable the button, false to remove it."},{"tag":"return","text":"True if allowed; false on failure."},{"tag":"error","text":"Invalid Handle."}]},"kind":"native","returnType":"bool","arguments":[{"type":"Handle","name":"menu","decl":"Handle menu","default":null},{"type":"bool","name":"button","decl":"bool button","default":null}]},{"name":"GetMenuExitBackButton","docStart":26579,"docEnd":27013,"docs":{"brief":"Returns whether or not the menu has an \"exit back\" button.  By default,\nmenus do not have an exit back button.\n\nExit Back buttons appear as \"Back\" on page 1 of paginated menus and have\nfunctionality defined by the user in MenuEnd_ExitBack.","tags":[{"tag":"","text":"Returns whether or not the menu has an \"exit back\" button.  By default,\nmenus do not have an exit back button.\n\nExit Back buttons appear as \"Back\" on page 1 of paginated menus and have\nfunctionality defined by the user in MenuEnd_ExitBack."},{"tag":"param:menu","text":"Menu Handle."},{"tag":"return","text":"True if the menu has an exit back button; false otherwise."},{"tag":"error","text":"Invalid Handle."}]},"kind":"native","returnType":"bool","arguments":[{"type":"Handle","name":"menu","decl":"Handle menu","default":null}]},{"name":"SetMenuExitBackButton","docStart":27066,"docEnd":27484,"docs":{"brief":"Sets whether or not the menu has an \"exit back\" button. By default, menus\ndo not have an exit back button.\n\nExit Back buttons appear as \"Back\" on page 1 of paginated menus and have\nfunctionality defined by the user in MenuEnd_ExitBack.","tags":[{"tag":"","text":"Sets whether or not the menu has an \"exit back\" button. By default, menus\ndo not have an exit back button.\n\nExit Back buttons appear as \"Back\" on page 1 of paginated menus and have\nfunctionality defined by the user in MenuEnd_ExitBack."},{"tag":"param:menu","text":"Menu Handle."},{"tag":"param:button","text":"True to enable the button, false to remove it."},{"tag":"error","text":"Invalid Handle."}]},"kind":"native","returnType":"void","arguments":[{"type":"Handle","name":"menu","decl":"Handle menu","default":null},{"type":"bool","name":"button","decl":"bool button","default":null}]},{"name":"SetMenuNoVoteButton","docStart":27550,"docEnd":27892,"docs":{"brief":"Sets whether or not the menu has a \"no vote\" button in slot 1.\nBy default, menus do not have a no vote button.","tags":[{"tag":"","text":"Sets whether or not the menu has a \"no vote\" button in slot 1.\nBy default, menus do not have a no vote button."},{"tag":"param:menu","text":"Menu Handle."},{"tag":"param:button","text":"True to enable the button, false to remove it."},{"tag":"return","text":"True if allowed; false on failure."},{"tag":"error","text":"Invalid Handle."}]},"kind":"native","returnType":"bool","arguments":[{"type":"Handle","name":"menu","decl":"Handle menu","default":null},{"type":"bool","name":"button","decl":"bool button","default":null}]},{"name":"CancelMenu","docStart":27956,"docEnd":28406,"docs":{"brief":"Cancels a menu from displaying on all clients.  While the\ncancellation is in progress, this menu cannot be re-displayed\nto any clients.\n\nThe menu may still exist on the client's screen after this command.\nThis simply verifies that the menu is not being used anywhere.\n\nIf any vote is in progress on a menu, it will be cancelled.","tags":[{"tag":"","text":"Cancels a menu from displaying on all clients.  While the\ncancellation is in progress, this menu cannot be re-displayed\nto any clients.\n\nThe menu may still exist on the client's screen after this command.\nThis simply verifies that the menu is not being used anywhere.\n\nIf any vote is in progress on a menu, it will be cancelled."},{"tag":"param:menu","text":"Menu Handle."},{"tag":"error","text":"Invalid Handle."}]},"kind":"native","returnType":"void","arguments":[{"type":"Handle","name":"menu","decl":"Handle menu","default":null}]},{"name":"GetMenuOptionFlags","docStart":28448,"docEnd":28631,"docs":{"brief":"Retrieves a menu's option flags.","tags":[{"tag":"","text":"Retrieves a menu's option flags."},{"tag":"param:menu","text":"Menu Handle."},{"tag":"return","text":"A bitstring of MENUFLAG bits."},{"tag":"error","text":"Invalid Handle."}]},"kind":"native","returnType":"int","arguments":[{"type":"Handle","name":"menu","decl":"Handle menu","default":null}]},{"name":"SetMenuOptionFlags","docStart":28680,"docEnd":29074,"docs":{"brief":"Sets a menu's option flags.\n\nIf a certain bit is not supported, it will be stripped before being set.\nSee SetMenuExitButton() for information on Exit buttons.\nSee SetMenuExitBackButton() for information on Exit Back buttons.","tags":[{"tag":"","text":"Sets a menu's option flags.\n\nIf a certain bit is not supported, it will be stripped before being set.\nSee SetMenuExitButton() for information on Exit buttons.\nSee SetMenuExitBackButton() for information on Exit Back buttons."},{"tag":"param:menu","text":"Menu Handle."},{"tag":"param:flags","text":"A new bitstring of MENUFLAG bits."},{"tag":"error","text":"Invalid Handle."}]},"kind":"native","returnType":"void","arguments":[{"type":"Handle","name":"menu","decl":"Handle menu","default":null},{"type":"int","name":"flags","decl":"int flags","default":null}]},{"name":"IsVoteInProgress","docStart":29135,"docEnd":29316,"docs":{"brief":"Returns whether a vote is in progress.","tags":[{"tag":"","text":"Returns whether a vote is in progress."},{"tag":"param:menu","text":"Deprecated; no longer used."},{"tag":"return","text":"True if a vote is in progress, false otherwise."}]},"kind":"native","returnType":"bool","arguments":[{"type":"Handle","name":"menu","decl":"Handle menu","default":"INVALID_HANDLE"}]},{"name":"CancelVote","docStart":29379,"docEnd":29477,"docs":{"brief":"Cancels the vote in progress.","tags":[{"tag":"","text":"Cancels the vote in progress."},{"tag":"error","text":"If no vote is in progress."}]},"kind":"native","returnType":"void","arguments":[]},{"name":"VoteMenu","docStart":29508,"docEnd":30304,"docs":{"brief":"Broadcasts a menu to a list of clients.  The most selected item will be\nreturned through MenuAction_End.  On a tie, a random item will be returned\nfrom a list of the tied items.\n\nNote that MenuAction_VoteEnd and MenuAction_VoteStart are both\ndefault callbacks and do not need to be enabled.","tags":[{"tag":"","text":"Broadcasts a menu to a list of clients.  The most selected item will be\nreturned through MenuAction_End.  On a tie, a random item will be returned\nfrom a list of the tied items.\n\nNote that MenuAction_VoteEnd and MenuAction_VoteStart are both\ndefault callbacks and do not need to be enabled."},{"tag":"param:menu","text":"Menu Handle."},{"tag":"param:clients","text":"Array of clients to broadcast to."},{"tag":"param:numClients","text":"Number of clients in the array."},{"tag":"param:time","text":"Maximum time to leave menu on the screen."},{"tag":"param:flags","text":"Optional voting flags."},{"tag":"return","text":"True on success, false if this menu already has a vote session\nin progress."},{"tag":"error","text":"Invalid Handle, or a vote is already in progress."}]},"kind":"native","returnType":"bool","arguments":[{"type":"Handle","name":"menu","decl":"Handle menu","default":null},{"type":"int[]","name":"clients","decl":"int[] clients","default":null},{"type":"int","name":"numClients","decl":"int numClients","default":null},{"type":"int","name":"time","decl":"int time","default":null},{"type":"int","name":"flags","decl":"int flags","default":"0"}]},{"name":"VoteMenuToAll","docStart":30398,"docEnd":30806,"docs":{"brief":"Sends a vote menu to all clients.  See VoteMenu() for more information.","tags":[{"tag":"","text":"Sends a vote menu to all clients.  See VoteMenu() for more information."},{"tag":"param:menu","text":"Menu Handle."},{"tag":"param:time","text":"Maximum time to leave menu on the screen."},{"tag":"param:flags","text":"Optional voting flags."},{"tag":"return","text":"True on success, false if this menu already has a vote session\nin progress."},{"tag":"error","text":"Invalid Handle."}]},"kind":"stock","returnType":"bool","arguments":[{"type":"Handle","name":"menu","decl":"Handle menu","default":null},{"type":"int","name":"time","decl":"int time","default":null},{"type":"int","name":"flags","decl":"int flags","default":"0"}]},{"name":"SetVoteResultCallback","docStart":31990,"docEnd":32251,"docs":{"brief":"Sets an advanced vote handling callback.  If this callback is set,\nMenuAction_VoteEnd will not be called.","tags":[{"tag":"","text":"Sets an advanced vote handling callback.  If this callback is set,\nMenuAction_VoteEnd will not be called."},{"tag":"param:menu","text":"Menu Handle."},{"tag":"param:callback","text":"Callback function."},{"tag":"error","text":"Invalid Handle or callback."}]},"kind":"native","returnType":"void","arguments":[{"type":"Handle","name":"menu","decl":"Handle menu","default":null},{"type":"VoteHandler","name":"callback","decl":"VoteHandler callback","default":null}]},{"name":"CheckVoteDelay","docStart":32326,"docEnd":32580,"docs":{"brief":"Returns the number of seconds you should \"wait\" before displaying\na publicly invocable menu.  This number is the time remaining until\n(last_vote + sm_vote_delay).","tags":[{"tag":"","text":"Returns the number of seconds you should \"wait\" before displaying\na publicly invocable menu.  This number is the time remaining until\n(last_vote + sm_vote_delay)."},{"tag":"return","text":"Number of seconds to wait, or 0 for none."}]},"kind":"native","returnType":"int","arguments":[]},{"name":"IsClientInVotePool","docStart":32614,"docEnd":32989,"docs":{"brief":"Returns whether a client is in the pool of clients allowed\nto participate in the current vote.  This is determined by\nthe client list passed to VoteMenu().","tags":[{"tag":"","text":"Returns whether a client is in the pool of clients allowed\nto participate in the current vote.  This is determined by\nthe client list passed to VoteMenu()."},{"tag":"param:client","text":"Client index."},{"tag":"return","text":"True if client is allowed to vote, false otherwise."},{"tag":"error","text":"If no vote is in progress or client index is invalid."}]},"kind":"native","returnType":"bool","arguments":[{"type":"int","name":"client","decl":"int client","default":null}]},{"name":"RedrawClientVoteMenu","docStart":33038,"docEnd":33487,"docs":{"brief":"Redraws the current vote menu to a client in the voting pool.","tags":[{"tag":"","text":"Redraws the current vote menu to a client in the voting pool."},{"tag":"param:client","text":"Client index."},{"tag":"param:revotes","text":"True to allow revotes, false otherwise."},{"tag":"return","text":"True on success, false if the client is in the vote pool\nbut cannot vote again."},{"tag":"error","text":"No vote in progress, int client is not in the voting pool,\nor client index is invalid."}]},"kind":"native","returnType":"bool","arguments":[{"type":"int","name":"client","decl":"int client","default":null},{"type":"bool","name":"revotes","decl":"bool revotes","default":"true"}]},{"name":"GetMenuStyleHandle","docStart":33557,"docEnd":33722,"docs":{"brief":"Returns a style's global Handle.","tags":[{"tag":"","text":"Returns a style's global Handle."},{"tag":"param:style","text":"Menu Style."},{"tag":"return","text":"A Handle, or INVALID_HANDLE if not found or unusable."}]},"kind":"native","returnType":"Handle","arguments":[{"type":"MenuStyle","name":"style","decl":"MenuStyle style","default":null}]},{"name":"CreatePanel","docStart":33778,"docEnd":34165,"docs":{"brief":"Creates a MenuPanel from a MenuStyle.  Panels are used for drawing raw\nmenus without any extra helper functions.  The Handle must be closed\nwith CloseHandle().","tags":[{"tag":"","text":"Creates a MenuPanel from a MenuStyle.  Panels are used for drawing raw\nmenus without any extra helper functions.  The Handle must be closed\nwith CloseHandle()."},{"tag":"param:hStyle","text":"MenuStyle Handle, or INVALID_HANDLE to use the default style."},{"tag":"return","text":"A new MenuPanel Handle."},{"tag":"error","text":"Invalid Handle other than INVALID_HANDLE."}]},"kind":"native","returnType":"Panel","arguments":[{"type":"Handle","name":"hStyle","decl":"Handle hStyle","default":"INVALID_HANDLE"}]},{"name":"CreateMenuEx","docStart":34226,"docEnd":34865,"docs":{"brief":"Creates a Menu from a MenuStyle.  The Handle must be closed with\nCloseHandle().","tags":[{"tag":"","text":"Creates a Menu from a MenuStyle.  The Handle must be closed with\nCloseHandle()."},{"tag":"param:hStyle","text":"MenuStyle Handle, or INVALID_HANDLE to use the default style."},{"tag":"param:handler","text":"Function which will receive menu actions."},{"tag":"param:actions","text":"Optionally set which actions to receive.  Select,\nCancel, and End will always be received regardless\nof whether they are set or not.  They are also\nthe only default actions."},{"tag":"return","text":"A new menu Handle."},{"tag":"error","text":"Invalid Handle other than INVALID_HANDLE."}]},"kind":"native","returnType":"Menu","arguments":[{"type":"Handle","name":"hStyle","decl":"Handle hStyle","default":"INVALID_HANDLE"},{"type":"MenuHandler","name":"handler","decl":"MenuHandler handler","default":null},{"type":"MenuAction","name":"actions","decl":"MenuAction actions","default":"MenuAction_Select | MenuAction_Cancel | MenuAction_End"}]},{"name":"GetClientMenu","docStart":34988,"docEnd":35276,"docs":{"brief":"Returns whether a client is viewing a menu.","tags":[{"tag":"","text":"Returns whether a client is viewing a menu."},{"tag":"param:client","text":"Client index."},{"tag":"param:hStyle","text":"MenuStyle Handle, or INVALID_HANDLE to use the default style."},{"tag":"return","text":"A MenuSource value."},{"tag":"error","text":"Invalid Handle other than null."}]},"kind":"native","returnType":"MenuSource","arguments":[{"type":"int","name":"client","decl":"int client","default":null},{"type":"Handle","name":"hStyle","decl":"Handle hStyle","default":"null"}]},{"name":"CancelClientMenu","docStart":35346,"docEnd":35762,"docs":{"brief":"Cancels a menu on a client.  This will only affect non-external menus.","tags":[{"tag":"","text":"Cancels a menu on a client.  This will only affect non-external menus."},{"tag":"param:client","text":"Client index."},{"tag":"param:autoIgnore","text":"If true, no menus can be re-drawn on the client during\nthe cancellation process."},{"tag":"param:hStyle","text":"MenuStyle Handle, or INVALID_HANDLE to use the default style."},{"tag":"return","text":"True if a menu was cancelled, false otherwise."}]},"kind":"native","returnType":"bool","arguments":[{"type":"int","name":"client","decl":"int client","default":null},{"type":"bool","name":"autoIgnore","decl":"bool autoIgnore","default":"false"},{"type":"Handle","name":"hStyle","decl":"Handle hStyle","default":"INVALID_HANDLE"}]},{"name":"GetMaxPageItems","docStart":35862,"docEnd":36123,"docs":{"brief":"Returns a style's maximum items per page.","tags":[{"tag":"","text":"Returns a style's maximum items per page."},{"tag":"param:hStyle","text":"MenuStyle Handle, or INVALID_HANDLE to use the default style."},{"tag":"return","text":"Maximum items per page."},{"tag":"error","text":"Invalid Handle other than INVALID_HANDLE."}]},"kind":"native","returnType":"int","arguments":[{"type":"Handle","name":"hStyle","decl":"Handle hStyle","default":"INVALID_HANDLE"}]},{"name":"GetPanelStyle","docStart":36186,"docEnd":36394,"docs":{"brief":"Returns a MenuPanel's parent style.","tags":[{"tag":"","text":"Returns a MenuPanel's parent style."},{"tag":"param:panel","text":"A MenuPanel Handle."},{"tag":"return","text":"The MenuStyle Handle that created the panel."},{"tag":"error","text":"Invalid Handle."}]},"kind":"native","returnType":"Handle","arguments":[{"type":"Handle","name":"panel","decl":"Handle panel","default":null}]},{"name":"SetPanelTitle","docStart":36442,"docEnd":36700,"docs":{"brief":"Sets the panel's title.","tags":[{"tag":"","text":"Sets the panel's title."},{"tag":"param:panel","text":"A MenuPanel Handle."},{"tag":"param:text","text":"Text to set as the title."},{"tag":"param:onlyIfEmpty","text":"If true, the title will only be set if no title is set."},{"tag":"error","text":"Invalid Handle."}]},"kind":"native","returnType":"void","arguments":[{"type":"Handle","name":"panel","decl":"Handle panel","default":null},{"type":"const char[]","name":"text","decl":"const char[] text","default":null},{"type":"bool","name":"onlyIfEmpty","decl":"bool onlyIfEmpty","default":"false"}]},{"name":"DrawPanelItem","docStart":36789,"docEnd":37315,"docs":{"brief":"Draws an item on a panel.  If the item takes up a slot, the position\nis returned.","tags":[{"tag":"","text":"Draws an item on a panel.  If the item takes up a slot, the position\nis returned."},{"tag":"param:panel","text":"A MenuPanel Handle."},{"tag":"param:text","text":"Display text to use.  If not a raw line,\nthe style may automatically add color markup.\nNo numbering or newlines are needed."},{"tag":"param:style","text":"ITEMDRAW style flags."},{"tag":"return","text":"A slot position, or 0 if item was a rawline or could not be drawn."},{"tag":"error","text":"Invalid Handle."}]},"kind":"native","returnType":"int","arguments":[{"type":"Handle","name":"panel","decl":"Handle panel","default":null},{"type":"const char[]","name":"text","decl":"const char[] text","default":null},{"type":"int","name":"style","decl":"int style","default":"0"}]},{"name":"DrawPanelText","docStart":37407,"docEnd":37801,"docs":{"brief":"Draws a raw line of text on a panel, without any markup other than a newline.","tags":[{"tag":"","text":"Draws a raw line of text on a panel, without any markup other than a newline."},{"tag":"param:panel","text":"A MenuPanel Handle, or INVALID_HANDLE if inside a\nMenuAction_DisplayItem callback."},{"tag":"param:text","text":"Display text to use."},{"tag":"return","text":"True on success, false if raw lines are not supported."},{"tag":"error","text":"Invalid Handle."}]},"kind":"native","returnType":"bool","arguments":[{"type":"Handle","name":"panel","decl":"Handle panel","default":null},{"type":"const char[]","name":"text","decl":"const char[] text","default":null}]},{"name":"CanPanelDrawFlags","docStart":37866,"docEnd":38167,"docs":{"brief":"Returns whether or not the given drawing flags are supported by\nthe menu style.","tags":[{"tag":"","text":"Returns whether or not the given drawing flags are supported by\nthe menu style."},{"tag":"param:panel","text":"A MenuPanel Handle."},{"tag":"param:style","text":"ITEMDRAW style flags."},{"tag":"return","text":"True if item is drawable, false otherwise."},{"tag":"error","text":"Invalid Handle."}]},"kind":"native","returnType":"bool","arguments":[{"type":"Handle","name":"panel","decl":"Handle panel","default":null},{"type":"int","name":"style","decl":"int style","default":null}]},{"name":"SetPanelKeys","docStart":38228,"docEnd":38671,"docs":{"brief":"Sets the selectable key map of a panel.  This is not supported by\nall styles (only by Radio, as of this writing).","tags":[{"tag":"","text":"Sets the selectable key map of a panel.  This is not supported by\nall styles (only by Radio, as of this writing)."},{"tag":"param:panel","text":"A MenuPanel Handle."},{"tag":"param:keys","text":"An integer where each bit N allows key\nN+1 to be selected.  If no keys are selectable,\nthen key 0 (bit 9) is automatically set."},{"tag":"return","text":"True if supported, false otherwise."}]},"kind":"native","returnType":"bool","arguments":[{"type":"Handle","name":"panel","decl":"Handle panel","default":null},{"type":"int","name":"keys","decl":"int keys","default":null}]},{"name":"SendPanelToClient","docStart":38726,"docEnd":39439,"docs":{"brief":"Sends a panel to a client.  Unlike full menus, the handler\nfunction will only receive the following actions, both of\nwhich will have INVALID_HANDLE for a menu, and the client\nas param1.\n\nMenuAction_Select (param2 will be the key pressed)\nMenuAction_Cancel (param2 will be the reason)\n\nAlso, if the menu fails to display, no callbacks will be called.","tags":[{"tag":"","text":"Sends a panel to a client.  Unlike full menus, the handler\nfunction will only receive the following actions, both of\nwhich will have INVALID_HANDLE for a menu, and the client\nas param1.\n\nMenuAction_Select (param2 will be the key pressed)\nMenuAction_Cancel (param2 will be the reason)\n\nAlso, if the menu fails to display, no callbacks will be called."},{"tag":"param:panel","text":"A MenuPanel Handle."},{"tag":"param:client","text":"A client to draw to."},{"tag":"param:handler","text":"The MenuHandler function to catch actions with."},{"tag":"param:time","text":"Time to hold the menu for."},{"tag":"return","text":"True on success, false on failure."},{"tag":"error","text":"Invalid Handle."}]},"kind":"native","returnType":"bool","arguments":[{"type":"Handle","name":"panel","decl":"Handle panel","default":null},{"type":"int","name":"client","decl":"int client","default":null},{"type":"MenuHandler","name":"handler","decl":"MenuHandler handler","default":null},{"type":"int","name":"time","decl":"int time","default":null}]},{"name":"GetPanelTextRemaining","docStart":39532,"docEnd":40011,"docs":{"brief":"Returns the amount of text the menu can still hold.  If this is\nlimit is reached or overflowed, the text is silently truncated.\n\nRadio menus: Currently 511 characters (512 bytes).\nValve menus: Currently -1 (no meaning).","tags":[{"tag":"","text":""},{"tag":"brief","text":"Returns the amount of text the menu can still hold.  If this is\nlimit is reached or overflowed, the text is silently truncated.\n\nRadio menus: Currently 511 characters (512 bytes).\nValve menus: Currently -1 (no meaning)."},{"tag":"param:panel","text":"A MenuPanel Handle."},{"tag":"return","text":"Number of characters that the menu can still hold,\nor -1 if there is no known limit."},{"tag":"error","text":"Invalid Handle."}]},"kind":"native","returnType":"int","arguments":[{"type":"Handle","name":"panel","decl":"Handle panel","default":null}]},{"name":"GetPanelCurrentKey","docStart":40064,"docEnd":40268,"docs":{"brief":"Returns the current key position.","tags":[{"tag":"","text":""},{"tag":"brief","text":"Returns the current key position."},{"tag":"param:panel","text":"A MenuPanel Handle."},{"tag":"return","text":"Current key position starting at 1."},{"tag":"error","text":"Invalid Handle."}]},"kind":"native","returnType":"int","arguments":[{"type":"Handle","name":"panel","decl":"Handle panel","default":null}]},{"name":"SetPanelCurrentKey","docStart":40318,"docEnd":40666,"docs":{"brief":"Sets the next key position.  This cannot be used\nto traverse backwards.","tags":[{"tag":"","text":""},{"tag":"brief","text":"Sets the next key position.  This cannot be used\nto traverse backwards."},{"tag":"param:panel","text":"A MenuPanel Handle."},{"tag":"param:key","text":"Key that is greater or equal to\nGetPanelCurrentKey()."},{"tag":"return","text":"True on success, false otherwise."},{"tag":"error","text":"Invalid Handle."}]},"kind":"native","returnType":"bool","arguments":[{"type":"Handle","name":"panel","decl":"Handle panel","default":null},{"type":"int","name":"key","decl":"int key","default":null}]},{"name":"RedrawMenuItem","docStart":40726,"docEnd":40933,"docs":{"brief":"Redraws menu text from inside a MenuAction_DisplayItem callback.","tags":[{"tag":"","text":""},{"tag":"brief","text":"Redraws menu text from inside a MenuAction_DisplayItem callback."},{"tag":"param:text","text":"Menu text to draw."},{"tag":"return","text":"Item position; must be returned via the callback."}]},"kind":"native","returnType":"int","arguments":[{"type":"const char[]","name":"text","decl":"const char[] text","default":null}]},{"name":"InternalShowMenu","docStart":40984,"docEnd":41876,"docs":{"brief":"This function is provided for legacy code only.  Some older plugins may use\nnetwork messages instead of the panel API.  This function wraps the panel\nAPI for eased portability into the SourceMod menu system.\n\nThis function is only usable with the Radio Menu style.  You do not need to\nsplit up your menu into multiple packets; SourceMod will break the string\nup internally.","tags":[{"tag":"","text":"This function is provided for legacy code only.  Some older plugins may use\nnetwork messages instead of the panel API.  This function wraps the panel\nAPI for eased portability into the SourceMod menu system.\n\nThis function is only usable with the Radio Menu style.  You do not need to\nsplit up your menu into multiple packets; SourceMod will break the string\nup internally."},{"tag":"param:client","text":"Client index."},{"tag":"param:str","text":"Full menu string as would be passed over the network."},{"tag":"param:time","text":"Time to hold the menu for."},{"tag":"param:keys","text":"Selectable key bitstring."},{"tag":"param:handler","text":"Optional handler function, with the same rules as\nSendPanelToClient()."},{"tag":"return","text":"True on success, false on failure."},{"tag":"error","text":"Invalid client index, or radio menus not supported."}]},"kind":"native","returnType":"bool","arguments":[{"type":"int","name":"client","decl":"int client","default":null},{"type":"const char[]","name":"str","decl":"const char[] str","default":null},{"type":"int","name":"time","decl":"int time","default":null},{"type":"int","name":"keys","decl":"int keys","default":"-1"},{"type":"MenuHandler","name":"handler","decl":"MenuHandler handler","default":"INVALID_FUNCTION"}]},{"name":"GetMenuVoteInfo","docStart":42002,"docEnd":42267,"docs":{"brief":"Retrieves voting information from MenuAction_VoteEnd.","tags":[{"tag":"","text":"Retrieves voting information from MenuAction_VoteEnd."},{"tag":"param:param2","text":"Second parameter of MenuAction_VoteEnd."},{"tag":"param:winningVotes","text":"Number of votes received by the winning option."},{"tag":"param:totalVotes","text":"Number of total votes received."}]},"kind":"stock","returnType":"void","arguments":[{"type":"int","name":"param2","decl":"int param2","default":null},{"type":"int&","name":"winningVotes","decl":"int& winningVotes","default":null},{"type":"int&","name":"totalVotes","decl":"int& totalVotes","default":null}]},{"name":"IsNewVoteAllowed","docStart":42416,"docEnd":42762,"docs":{"brief":"Quick stock to determine whether voting is allowed.  This doesn't let you\nfine-tune a reason for not voting, so it's not recommended for lazily\ntelling clients that voting isn't allowed.","tags":[{"tag":"","text":"Quick stock to determine whether voting is allowed.  This doesn't let you\nfine-tune a reason for not voting, so it's not recommended for lazily\ntelling clients that voting isn't allowed."},{"tag":"return","text":"True if voting is allowed, false if voting is in progress\nor the cooldown is active."}]},"kind":"stock","returnType":"bool","arguments":[]}],"methodmaps":[{"name":"Panel","docStart":7391,"docEnd":7523,"docs":{"brief":"Panels are used for drawing raw menus without any extra helper functions.\nHandles must be closed via delete or CloseHandle().","tags":[{"tag":"","text":"Panels are used for drawing raw menus without any extra helper functions.\nHandles must be closed via delete or CloseHandle()."}]},"parent":"Handle","methods":[{"name":"Panel","docStart":7555,"docEnd":7669,"docs":{"brief":"Constructor for a new Panel.","tags":[{"tag":"","text":"Constructor for a new Panel."},{"tag":"param:hStyle","text":"MenuStyle Handle, or null to use the default style."}]},"kind":"native","returnType":"Panel","arguments":[{"type":"Handle","name":"hStyle","decl":"Handle hStyle","default":"null"}]},{"name":"SetTitle","docStart":7719,"docEnd":7884,"docs":{"brief":"Sets the panel's title.","tags":[{"tag":"","text":"Sets the panel's title."},{"tag":"param:text","text":"Text to set as the title."},{"tag":"param:onlyIfEmpty","text":"If true, the title will only be set if no title is set."}]},"kind":"native","returnType":"void","arguments":[{"type":"const char[]","name":"text","decl":"const char[] text","default":null},{"type":"bool","name":"onlyIfEmpty","decl":"bool onlyIfEmpty","default":"false"}]},{"name":"DrawItem","docStart":7963,"docEnd":8400,"docs":{"brief":"Draws an item on a panel.  If the item takes up a slot, the position\nis returned.","tags":[{"tag":"","text":"Draws an item on a panel.  If the item takes up a slot, the position\nis returned."},{"tag":"param:text","text":"Display text to use.  If not a raw line,\nthe style may automatically add color markup.\nNo numbering or newlines are needed."},{"tag":"param:style","text":"ITEMDRAW style flags."},{"tag":"return","text":"A slot position, or 0 if item was a rawline or could not be drawn."}]},"kind":"native","returnType":"int","arguments":[{"type":"const char[]","name":"text","decl":"const char[] text","default":null},{"type":"int","name":"style","decl":"int style","default":"0"}]},{"name":"DrawText","docStart":8482,"docEnd":8700,"docs":{"brief":"Draws a raw line of text on a panel, without any markup other than a\nnewline.","tags":[{"tag":"","text":"Draws a raw line of text on a panel, without any markup other than a\nnewline."},{"tag":"param:text","text":"Display text to use."},{"tag":"return","text":"True on success, false if raw lines are not supported."}]},"kind":"native","returnType":"bool","arguments":[{"type":"const char[]","name":"text","decl":"const char[] text","default":null}]},{"name":"CanDrawFlags","docStart":8755,"docEnd":8964,"docs":{"brief":"Returns whether or not the given drawing flags are supported by\nthe menu style.","tags":[{"tag":"","text":"Returns whether or not the given drawing flags are supported by\nthe menu style."},{"tag":"param:style","text":"ITEMDRAW style flags."},{"tag":"return","text":"True if item is drawable, false otherwise."}]},"kind":"native","returnType":"bool","arguments":[{"type":"int","name":"style","decl":"int style","default":null}]},{"name":"SetKeys","docStart":9015,"docEnd":9409,"docs":{"brief":"Sets the selectable key map of a panel.  This is not supported by\nall styles (only by Radio, as of this writing).","tags":[{"tag":"","text":"Sets the selectable key map of a panel.  This is not supported by\nall styles (only by Radio, as of this writing)."},{"tag":"param:keys","text":"An integer where each bit N allows key\nN+1 to be selected.  If no keys are selectable,\nthen key 0 (bit 9) is automatically set."},{"tag":"return","text":"True if supported, false otherwise."}]},"kind":"native","returnType":"bool","arguments":[{"type":"int","name":"keys","decl":"int keys","default":null}]},{"name":"Send","docStart":9454,"docEnd":10069,"docs":{"brief":"Sends a panel to a client.  Unlike full menus, the handler\nfunction will only receive the following actions, both of\nwhich will have null for a menu, and the client as param1.\n\nMenuAction_Select (param2 will be the key pressed)\nMenuAction_Cancel (param2 will be the reason)\n\nAlso, if the menu fails to display, no callbacks will be called.","tags":[{"tag":"","text":"Sends a panel to a client.  Unlike full menus, the handler\nfunction will only receive the following actions, both of\nwhich will have null for a menu, and the client as param1.\n\nMenuAction_Select (param2 will be the key pressed)\nMenuAction_Cancel (param2 will be the reason)\n\nAlso, if the menu fails to display, no callbacks will be called."},{"tag":"param:client","text":"A client to draw to."},{"tag":"param:handler","text":"The MenuHandler function to catch actions with."},{"tag":"param:time","text":"Time to hold the menu for."},{"tag":"return","text":"True on success, false on failure."}]},"kind":"native","returnType":"bool","arguments":[{"type":"int","name":"client","decl":"int client","default":null},{"type":"MenuHandler","name":"handler","decl":"MenuHandler handler","default":null},{"type":"int","name":"time","decl":"int time","default":null}]}],"properties":[{"name":"TextRemaining","docStart":10144,"docEnd":10385,"docs":{"brief":"Returns the amount of text the menu can still hold.  If this is\nlimit is reached or overflowed, the text is silently truncated.\n\nRadio menus: Currently 511 characters (512 bytes).\nValve menus: Currently -1 (no meaning).","tags":[{"tag":"","text":"Returns the amount of text the menu can still hold.  If this is\nlimit is reached or overflowed, the text is silently truncated.\n\nRadio menus: Currently 511 characters (512 bytes).\nValve menus: Currently -1 (no meaning)."}]},"type":"int","getter":true,"setter":false},{"name":"CurrentKey","docStart":10449,"docEnd":10556,"docs":{"brief":"Returns or sets the current key position, starting at 1. This cannot be\nused to traverse backwards.","tags":[{"tag":"","text":"Returns or sets the current key position, starting at 1. This cannot be\nused to traverse backwards."}]},"type":"int","getter":true,"setter":true},{"name":"Style","docStart":10648,"docEnd":10724,"docs":{"brief":"Returns the panel's style. Style handles are global and cannot be closed.","tags":[{"tag":"","text":"Returns the panel's style. Style handles are global and cannot be closed."}]},"type":"Handle","getter":true,"setter":false}]},{"name":"Menu","docStart":10786,"docEnd":10842,"docs":{"brief":"A menu is a helper object for managing in-game menus.","tags":[{"tag":"","text":"A menu is a helper object for managing in-game menus."}]},"parent":"Handle","methods":[{"name":"Menu","docStart":10873,"docEnd":11277,"docs":{"brief":"Creates a new, empty menu using the default style.","tags":[{"tag":"","text":"Creates a new, empty menu using the default style."},{"tag":"param:handler","text":"Function which will receive menu actions."},{"tag":"param:actions","text":"Optionally set which actions to receive.  Select,\nCancel, and End will always be received regardless\nof whether they are set or not.  They are also\nthe only default actions."}]},"kind":"native","returnType":"Menu","arguments":[{"type":"MenuHandler","name":"handler","decl":"MenuHandler handler","default":null},{"type":"MenuAction","name":"actions","decl":"MenuAction actions","default":"MenuAction_Select | MenuAction_Cancel | MenuAction_End"}]},{"name":"Display","docStart":11366,"docEnd":11617,"docs":{"brief":"Displays a menu to a client.","tags":[{"tag":"","text":"Displays a menu to a client."},{"tag":"param:client","text":"Client index."},{"tag":"param:time","text":"Maximum time to leave menu on the screen."},{"tag":"return","text":"True on success, false on failure."},{"tag":"error","text":"Client not in game."}]},"kind":"native","returnType":"bool","arguments":[{"type":"int","name":"client","decl":"int client","default":null},{"type":"int","name":"time","decl":"int time","default":null}]},{"name":"DisplayAt","docStart":11674,"docEnd":12021,"docs":{"brief":"Displays a menu to a client, starting from the given item.","tags":[{"tag":"","text":"Displays a menu to a client, starting from the given item."},{"tag":"param:client","text":"Client index."},{"tag":"param:first_item","text":"First item to begin drawing from."},{"tag":"param:time","text":"Maximum time to leave menu on the screen."},{"tag":"return","text":"True on success, false on failure."},{"tag":"error","text":"Client not in game."}]},"kind":"native","returnType":"bool","arguments":[{"type":"int","name":"client","decl":"int client","default":null},{"type":"int","name":"first_item","decl":"int first_item","default":null},{"type":"int","name":"time","decl":"int time","default":null}]},{"name":"AddItem","docStart":12096,"docEnd":12515,"docs":{"brief":"Appends a new item to the end of a menu.","tags":[{"tag":"","text":"Appends a new item to the end of a menu."},{"tag":"param:info","text":"Item information string."},{"tag":"param:display","text":"Default item display string."},{"tag":"param:style","text":"Drawing style flags.  Anything other than DEFAULT or\nDISABLED will be completely ignored when paginating."},{"tag":"return","text":"True on success, false on failure."},{"tag":"error","text":"Item limit reached."}]},"kind":"native","returnType":"bool","arguments":[{"type":"const char[]","name":"info","decl":"const char[] info","default":null},{"type":"const char[]","name":"display","decl":"const char[] display","default":null},{"type":"int","name":"style","decl":"int style","default":"0"}]},{"name":"InsertItem","docStart":12619,"docEnd":13193,"docs":{"brief":"Inserts an item into the menu before a certain position; the new item will\nbe at the given position and all next items pushed forward.","tags":[{"tag":"","text":"Inserts an item into the menu before a certain position; the new item will\nbe at the given position and all next items pushed forward."},{"tag":"param:position","text":"Position, starting from 0."},{"tag":"param:info","text":"Item information string."},{"tag":"param:display","text":"Default item display string."},{"tag":"param:style","text":"Drawing style flags.  Anything other than DEFAULT or\nDISABLED will be completely ignored when paginating."},{"tag":"return","text":"True on success, false on failure."},{"tag":"error","text":"Invalid menu position."}]},"kind":"native","returnType":"bool","arguments":[{"type":"int","name":"position","decl":"int position","default":null},{"type":"const char[]","name":"info","decl":"const char[] info","default":null},{"type":"const char[]","name":"display","decl":"const char[] display","default":null},{"type":"int","name":"style","decl":"int style","default":"0"}]},{"name":"RemoveItem","docStart":13346,"docEnd":13547,"docs":{"brief":"Removes an item from the menu.","tags":[{"tag":"","text":"Removes an item from the menu."},{"tag":"param:position","text":"Position, starting from 0."},{"tag":"return","text":"True on success, false on failure."},{"tag":"error","text":"Invalid menu position."}]},"kind":"native","returnType":"bool","arguments":[{"type":"int","name":"position","decl":"int position","default":null}]},{"name":"RemoveAllItems","docStart":13599,"docEnd":13632,"docs":{"brief":"Removes all items from a menu.","tags":[{"tag":"","text":"Removes all items from a menu."}]},"kind":"native","returnType":"void","arguments":[]},{"name":"GetItem","docStart":13676,"docEnd":14128,"docs":{"brief":"Retrieves information about a menu item.","tags":[{"tag":"","text":"Retrieves information about a menu item."},{"tag":"param:position","text":"Position, starting from 0."},{"tag":"param:infoBuf","text":"Info buffer."},{"tag":"param:infoBufLen","text":"Maximum length of the info buffer."},{"tag":"param:style","text":"By-reference variable to store drawing flags."},{"tag":"param:dispBuf","text":"Display buffer."},{"tag":"param:dispBufLen","text":"Maximum length of the display buffer."},{"tag":"return","text":"True on success, false if position is invalid."}]},"kind":"native","returnType":"bool","arguments":[{"type":"int","name":"position","decl":"int position","default":null},{"type":"char[]","name":"infoBuf","decl":"char[] infoBuf","default":null},{"type":"int","name":"infoBufLen","decl":"int infoBufLen","default":null},{"type":"int&","name":"style","decl":"int& style","default":"0"},{"type":"char[]","name":"dispBuf","decl":"char[] dispBuf","default":"\"\""},{"type":"int","name":"dispBufLen","decl":"int dispBufLen","default":"0"}]},{"name":"SetTitle","docStart":14271,"docEnd":14429,"docs":{"brief":"Sets the menu's default title/instruction message.","tags":[{"tag":"","text":"Sets the menu's default title/instruction message."},{"tag":"param:fmt","text":"Message string format"},{"tag":"param:...","text":"Message string arguments."}]},"kind":"native","returnType":"void","arguments":[{"type":"const char[]","name":"fmt","decl":"const char[] fmt","default":null},{"type":"any...","name":"...","decl":"any...","default":null}]},{"name":"GetTitle","docStart":14492,"docEnd":14691,"docs":{"brief":"Returns the text of a menu's title.","tags":[{"tag":"","text":"Returns the text of a menu's title."},{"tag":"param:buffer","text":"Buffer to store title."},{"tag":"param:maxlength","text":"Maximum length of the buffer."},{"tag":"return","text":"Number of bytes written."}]},"kind":"native","returnType":"void","arguments":[{"type":"char[]","name":"buffer","decl":"char[] buffer","default":null},{"type":"int","name":"maxlength","decl":"int maxlength","default":null}]},{"name":"ToPanel","docStart":14757,"docEnd":14916,"docs":{"brief":"Creates a raw MenuPanel based off the menu's style.\nThe Handle must be freed with CloseHandle().","tags":[{"tag":"","text":"Creates a raw MenuPanel based off the menu's style.\nThe Handle must be freed with CloseHandle()."},{"tag":"return","text":"A new MenuPanel Handle."}]},"kind":"native","returnType":"Panel","arguments":[]},{"name":"Cancel","docStart":14954,"docEnd":15318,"docs":{"brief":"Cancels a menu from displaying on all clients.  While the\ncancellation is in progress, this menu cannot be re-displayed\nto any clients.\n\nThe menu may still exist on the client's screen after this command.\nThis simply verifies that the menu is not being used anywhere.\n\nIf any vote is in progress on a menu, it will be cancelled.","tags":[{"tag":"","text":"Cancels a menu from displaying on all clients.  While the\ncancellation is in progress, this menu cannot be re-displayed\nto any clients.\n\nThe menu may still exist on the client's screen after this command.\nThis simply verifies that the menu is not being used anywhere.\n\nIf any vote is in progress on a menu, it will be cancelled."}]},"kind":"native","returnType":"void","arguments":[]},{"name":"DisplayVote","docStart":15354,"docEnd":16096,"docs":{"brief":"Broadcasts a menu to a list of clients.  The most selected item will be\nreturned through MenuAction_End.  On a tie, a random item will be returned\nfrom a list of the tied items.\n\nNote that MenuAction_VoteEnd and MenuAction_VoteStart are both\ndefault callbacks and do not need to be enabled.","tags":[{"tag":"","text":"Broadcasts a menu to a list of clients.  The most selected item will be\nreturned through MenuAction_End.  On a tie, a random item will be returned\nfrom a list of the tied items.\n\nNote that MenuAction_VoteEnd and MenuAction_VoteStart are both\ndefault callbacks and do not need to be enabled."},{"tag":"param:clients","text":"Array of clients to broadcast to."},{"tag":"param:numClients","text":"Number of clients in the array."},{"tag":"param:time","text":"Maximum time to leave menu on the screen."},{"tag":"param:flags","text":"Optional voting flags."},{"tag":"return","text":"True on success, false if this menu already has a\nvote session in progress."},{"tag":"error","text":"A vote is already in progress."}]},"kind":"native","returnType":"bool","arguments":[{"type":"int[]","name":"clients","decl":"int[] clients","default":null},{"type":"int","name":"numClients","decl":"int numClients","default":null},{"type":"int","name":"time","decl":"int time","default":null},{"type":"int","name":"flags","decl":"int flags","default":"0"}]},{"name":"DisplayVoteToAll","docStart":16189,"docEnd":16513,"docs":{"brief":"Sends a vote menu to all clients.  See VoteMenu() for more information.","tags":[{"tag":"","text":"Sends a vote menu to all clients.  See VoteMenu() for more information."},{"tag":"param:time","text":"Maximum time to leave menu on the screen."},{"tag":"param:flags","text":"Optional voting flags."},{"tag":"return","text":"True on success, false if this menu already has a\nvote session in progress."}]},"kind":"stock","returnType":"bool","arguments":[{"type":"int","name":"time","decl":"int time","default":null},{"type":"int","name":"flags","decl":"int flags","default":"0"}]}],"properties":[{"name":"Pagination","docStart":16841,"docEnd":17033,"docs":{"brief":"Get or set the menu's pagination.\n\nIf pagination is MENU_NO_PAGINATION, and the exit button flag is set,\nthen the exit button flag is removed. It can be re-applied if desired.","tags":[{"tag":"","text":"Get or set the menu's pagination.\n\nIf pagination is MENU_NO_PAGINATION, and the exit button flag is set,\nthen the exit button flag is removed. It can be re-applied if desired."}]},"type":"int","getter":true,"setter":true},{"name":"OptionFlags","docStart":17127,"docEnd":17248,"docs":{"brief":"Get or set the menu's option flags.\n\nIf a certain bit is not supported, it will be stripped before being set.","tags":[{"tag":"","text":"Get or set the menu's option flags.\n\nIf a certain bit is not supported, it will be stripped before being set."}]},"type":"int","getter":true,"setter":true},{"name":"ExitButton","docStart":17343,"docEnd":17441,"docs":{"brief":"Returns whether or not the menu has an exit button. By default, menus\nhave an exit button.","tags":[{"tag":"","text":"Returns whether or not the menu has an exit button. By default, menus\nhave an exit button."}]},"type":"bool","getter":true,"setter":true},{"name":"ExitBackButton","docStart":17537,"docEnd":17798,"docs":{"brief":"Controls whether or not the menu has an \"exit back\" button. By default,\nmenus do not have an exit back button.\n\nExit Back buttons appear as \"Back\" on page 1 of paginated menus and have\nfunctionality defined by the user in MenuEnd_ExitBack.","tags":[{"tag":"","text":"Controls whether or not the menu has an \"exit back\" button. By default,\nmenus do not have an exit back button.\n\nExit Back buttons appear as \"Back\" on page 1 of paginated menus and have\nfunctionality defined by the user in MenuEnd_ExitBack."}]},"type":"bool","getter":true,"setter":true},{"name":"NoVoteButton","docStart":17898,"docEnd":18016,"docs":{"brief":"Sets whether or not the menu has a \"no vote\" button in slot 1.\nBy default, menus do not have a no vote button.","tags":[{"tag":"","text":"Sets whether or not the menu has a \"no vote\" button in slot 1.\nBy default, menus do not have a no vote button."}]},"type":"bool","getter":false,"setter":true},{"name":"VoteResultCallback","docStart":18090,"docEnd":18202,"docs":{"brief":"Sets an advanced vote handling callback. If this callback is set,\nMenuAction_VoteEnd will not be called.","tags":[{"tag":"","text":"Sets an advanced vote handling callback. If this callback is set,\nMenuAction_VoteEnd will not be called."}]},"type":"VoteHandler","getter":false,"setter":true},{"name":"ItemCount","docStart":18298,"docEnd":18339,"docs":{"brief":"Returns the number of items in a menu.","tags":[{"tag":"","text":"Returns the number of items in a menu."}]},"type":"int","getter":true,"setter":false},{"name":"Style","docStart":18399,"docEnd":18468,"docs":{"brief":"Returns the menu style. The Handle is global and cannot be closed.","tags":[{"tag":"","text":"Returns the menu style. The Handle is global and cannot be closed."}]},"type":"Handle","getter":true,"setter":false},{"name":"Selection","docStart":18527,"docEnd":18660,"docs":{"brief":"Returns the first item on the page of a currently selected menu.\n\nThis is only valid inside a MenuAction_Select callback.","tags":[{"tag":"","text":"Returns the first item on the page of a currently selected menu.\n\nThis is only valid inside a MenuAction_Select callback."}]},"type":"int","getter":true,"setter":false}]}],"enumstructs":[],"constants":[{"name":"MenuCancel_Disconnected","docStart":5477,"docEnd":5515,"docs":{"brief":"Client dropped from the server","tags":[{"tag":"","text":"Client dropped from the server"}]}},{"name":"MenuCancel_Interrupted","docStart":5550,"docEnd":5598,"docs":{"brief":"Client was interrupted with another menu","tags":[{"tag":"","text":"Client was interrupted with another menu"}]}},{"name":"MenuCancel_Exit","docStart":5633,"docEnd":5665,"docs":{"brief":"Client exited via \"exit\"","tags":[{"tag":"","text":"Client exited via \"exit\""}]}},{"name":"MenuCancel_NoDisplay","docStart":5700,"docEnd":5749,"docs":{"brief":"Menu could not be displayed to the client","tags":[{"tag":"","text":"Menu could not be displayed to the client"}]}},{"name":"MenuCancel_Timeout","docStart":5784,"docEnd":5806,"docs":{"brief":"Menu timed out","tags":[{"tag":"","text":"Menu timed out"}]}},{"name":"MenuCancel_ExitBack","docStart":5841,"docEnd":5896,"docs":{"brief":"Client selected \"exit back\" on a paginated menu","tags":[{"tag":"","text":"Client selected \"exit back\" on a paginated menu"}]}},{"name":"VoteCancel_Generic","docStart":6017,"docEnd":6056,"docs":{"brief":"Vote was generically cancelled.","tags":[{"tag":"","text":"Vote was generically cancelled."}]}},{"name":"VoteCancel_NoVotes","docStart":6091,"docEnd":6130,"docs":{"brief":"Vote did not receive any votes.","tags":[{"tag":"","text":"Vote did not receive any votes."}]}},{"name":"MenuEnd_Selected","docStart":6233,"docEnd":6263,"docs":{"brief":"Menu item was selected","tags":[{"tag":"","text":"Menu item was selected"}]}},{"name":"MenuEnd_VotingDone","docStart":6298,"docEnd":6321,"docs":{"brief":"Voting finished","tags":[{"tag":"","text":"Voting finished"}]}},{"name":"MenuEnd_VotingCancelled","docStart":6356,"docEnd":6384,"docs":{"brief":"Voting was cancelled","tags":[{"tag":"","text":"Voting was cancelled"}]}},{"name":"MenuEnd_Cancelled","docStart":6419,"docEnd":6464,"docs":{"brief":"Menu was cancelled (reason in param2)","tags":[{"tag":"","text":"Menu was cancelled (reason in param2)"}]}},{"name":"MenuEnd_Exit","docStart":6499,"docEnd":6541,"docs":{"brief":"Menu was cleanly exited via \"exit\"","tags":[{"tag":"","text":"Menu was cleanly exited via \"exit\""}]}},{"name":"MenuEnd_ExitBack","docStart":6576,"docEnd":6618,"docs":{"brief":"Menu was cleanly exited via \"back\"","tags":[{"tag":"","text":"Menu was cleanly exited via \"back\""}]}}],"enums":[{"name":"MenuStyle","docStart":1651,"docEnd":1700,"docs":{"brief":"Low-level drawing style of the menu.","tags":[{"tag":"","text":"Low-level drawing style of the menu."}]},"entries":[{"name":"MenuStyle_Default","docStart":1750,"docEnd":1794,"docs":{"brief":"The \"default\" menu style for the mod","tags":[{"tag":"","text":"The \"default\" menu style for the mod"}]},"value":"0"},{"name":"MenuStyle_Valve","docStart":1825,"docEnd":1878,"docs":{"brief":"The Valve provided menu style (Used on HL2DM)","tags":[{"tag":"","text":"The Valve provided menu style (Used on HL2DM)"}]},"value":"1"},{"name":"MenuStyle_Radio","docStart":1909,"docEnd":1961,"docs":{"brief":"The simpler menu style commonly used on CS:S","tags":[{"tag":"","text":"The simpler menu style commonly used on CS:S"}]},"value":"2"}]},{"name":"MenuAction","docStart":1969,"docEnd":2028,"docs":{"brief":"Different actions for the menu \"pump\" callback","tags":[{"tag":"","text":"Different actions for the menu \"pump\" callback"}]},"entries":[{"name":"MenuAction_Start","docStart":2083,"docEnd":2131,"docs":{"brief":"A menu has been started (nothing passed)","tags":[{"tag":"","text":"A menu has been started (nothing passed)"}]},"value":"1 << 0"},{"name":"MenuAction_Display","docStart":2166,"docEnd":2246,"docs":{"brief":"A menu is about to be displayed (param1=client, param2=MenuPanel Handle)","tags":[{"tag":"","text":"A menu is about to be displayed (param1=client, param2=MenuPanel Handle)"}]},"value":"1 << 1"},{"name":"MenuAction_Select","docStart":2281,"docEnd":2338,"docs":{"brief":"An item was selected (param1=client, param2=item)","tags":[{"tag":"","text":"An item was selected (param1=client, param2=item)"}]},"value":"1 << 2"},{"name":"MenuAction_Cancel","docStart":2373,"docEnd":2434,"docs":{"brief":"The menu was cancelled (param1=client, param2=reason)","tags":[{"tag":"","text":"The menu was cancelled (param1=client, param2=reason)"}]},"value":"1 << 3"},{"name":"MenuAction_End","docStart":0,"docEnd":0,"docs":null,"value":"1 << 4"},{"name":"MenuAction_VoteEnd","docStart":2469,"docEnd":2714,"docs":{"brief":"A menu display has fully ended.\nparam1 is the MenuEnd reason, and if it's MenuEnd_Cancelled, then\nparam2 is the MenuCancel reason from MenuAction_Cancel.","tags":[{"tag":"","text":"A menu display has fully ended.\nparam1 is the MenuEnd reason, and if it's MenuEnd_Cancelled, then\nparam2 is the MenuCancel reason from MenuAction_Cancel."}]},"value":"1 << 5"},{"name":"MenuAction_VoteStart","docStart":2749,"docEnd":2933,"docs":{"brief":"(VOTE ONLY): A vote sequence has succeeded (param1=chosen item)\nThis is not called if SetVoteResultCallback has been used on the menu.","tags":[{"tag":"","text":"(VOTE ONLY): A vote sequence has succeeded (param1=chosen item)\nThis is not called if SetVoteResultCallback has been used on the menu."}]},"value":"1 << 6"},{"name":"MenuAction_VoteCancel","docStart":3068,"docEnd":3139,"docs":{"brief":"(VOTE ONLY): A vote sequence has been cancelled (param1=reason)","tags":[{"tag":"","text":"(VOTE ONLY): A vote sequence has been cancelled (param1=reason)"}]},"value":"1 << 7"},{"name":"MenuAction_DrawItem","docStart":3174,"docEnd":3255,"docs":{"brief":"An item is being drawn; return the new style (param1=client, param2=item)","tags":[{"tag":"","text":"An item is being drawn; return the new style (param1=client, param2=item)"}]},"value":"1 << 8"},{"name":"MenuAction_DisplayItem","docStart":0,"docEnd":0,"docs":null,"value":"1 << 9"}]},{"name":"MenuSource","docStart":6626,"docEnd":6664,"docs":{"brief":"Describes a menu's source","tags":[{"tag":"","text":"Describes a menu's source"}]},"entries":[{"name":"MenuSource_None","docStart":6719,"docEnd":6753,"docs":{"brief":"No menu is being displayed","tags":[{"tag":"","text":"No menu is being displayed"}]},"value":"0"},{"name":"MenuSource_External","docStart":6788,"docEnd":6809,"docs":{"brief":"External menu","tags":[{"tag":"","text":"External menu"}]},"value":"1"},{"name":"MenuSource_Normal","docStart":6844,"docEnd":6883,"docs":{"brief":"A basic menu is being displayed","tags":[{"tag":"","text":"A basic menu is being displayed"}]},"value":"2"},{"name":"MenuSource_RawPanel","docStart":6918,"docEnd":6975,"docs":{"brief":"A display is active, but it is not tied to a menu","tags":[{"tag":"","text":"A display is active, but it is not tied to a menu"}]},"value":"3"}]}],"typesets":[{"name":"VoteHandler","docStart":31127,"docEnd":31626,"docs":{"brief":"Callback for when a vote has ended and results are available.","tags":[{"tag":"","text":"Callback for when a vote has ended and results are available."},{"tag":"param:menu","text":"The menu being voted on."},{"tag":"param:num_votes","text":"Number of votes tallied in total."},{"tag":"param:num_clients","text":"Number of clients who could vote."},{"tag":"param:client_info","text":"Array of clients.  Use VOTEINFO_CLIENT_ defines."},{"tag":"param:num_items","text":"Number of unique items that were selected."},{"tag":"param:item_info","text":"Array of items, sorted by count.  Use VOTEINFO_ITEM\ndefines."}]},"types":[{"docStart":31653,"docEnd":31665,"docs":{"brief":"old style","tags":[{"tag":"","text":"old style"}]},"type":"function void(Menu menu, int num_votes, int num_clients, const int client_info[][2], int num_items, const int item_info[][2])","parsedSignature":{"returnType":"void","arguments":[{"type":"Menu","name":"menu","decl":"Menu menu","default":null},{"type":"int","name":"num_votes","decl":"int num_votes","default":null},{"type":"int","name":"num_clients","decl":"int num_clients","default":null},{"type":"const int","name":"client_info[][2]","decl":"const int client_info[][2]","default":null},{"type":"int","name":"num_items","decl":"int num_items","default":null},{"type":"const int","name":"item_info[][2]","decl":"const int item_info[][2]","default":null}]}},{"docStart":31821,"docEnd":31833,"docs":{"brief":"new style","tags":[{"tag":"","text":"new style"}]},"type":"function void(Menu menu, int num_votes, int num_clients, const int[][] client_info, int num_items, const int[][] item_info)","parsedSignature":{"returnType":"void","arguments":[{"type":"Menu","name":"menu","decl":"Menu menu","default":null},{"type":"int","name":"num_votes","decl":"int num_votes","default":null},{"type":"int","name":"num_clients","decl":"int num_clients","default":null},{"type":"const int[][]","name":"client_info","decl":"const int[][] client_info","default":null},{"type":"int","name":"num_items","decl":"int num_items","default":null},{"type":"const int[][]","name":"item_info","decl":"const int[][] item_info","default":null}]}}]}],"typedefs":[{"name":"MenuHandler","docStart":6983,"docEnd":7295,"docs":{"brief":"Called when a menu action is completed.","tags":[{"tag":"","text":"Called when a menu action is completed."},{"tag":"param:menu","text":"The menu being acted upon."},{"tag":"param:action","text":"The action of the menu."},{"tag":"param:param1","text":"First action parameter (usually the client)."},{"tag":"param:param2","text":"Second action parameter (usually the item)."}]},"type":"function int(Menu menu, MenuAction action, int param1, int param2)","parsedSignature":{"returnType":"int","arguments":[{"type":"Menu","name":"menu","decl":"Menu menu","default":null},{"type":"MenuAction","name":"action","decl":"MenuAction action","default":null},{"type":"int","name":"param1","decl":"int param1","default":null},{"type":"int","name":"param2","decl":"int param2","default":null}]}}]}