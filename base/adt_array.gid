{"functions":[{"name":"ByteCountToCells","docStart":1659,"docEnd":1920,"docs":{"brief":"Given a maximum string size (including the null terminator),\nreturns the number of cells required to fit that string.","tags":[{"tag":"","text":"Given a maximum string size (including the null terminator),\nreturns the number of cells required to fit that string."},{"tag":"param:size","text":"Number of bytes."},{"tag":"return","text":"Minimum number of cells required to fit the byte count."}]},"kind":"stock","returnType":"int","arguments":[{"type":"int","name":"size","decl":"int size","default":null}]},{"name":"CreateArray","docStart":9788,"docEnd":10583,"docs":{"brief":"Creates a dynamic global cell array.  While slower than a normal array,\nit can be used globally AND dynamically, which is otherwise impossible.\n\nThe contents of the array are uniform; i.e. storing a string at index X\nand then retrieving it as an integer is NOT the same as StringToInt()!\nThe \"blocksize\" determines how many cells each array slot has; it cannot\nbe changed after creation.","tags":[{"tag":"","text":"Creates a dynamic global cell array.  While slower than a normal array,\nit can be used globally AND dynamically, which is otherwise impossible.\n\nThe contents of the array are uniform; i.e. storing a string at index X\nand then retrieving it as an integer is NOT the same as StringToInt()!\nThe \"blocksize\" determines how many cells each array slot has; it cannot\nbe changed after creation."},{"tag":"param:blocksize","text":"The number of cells each member of the array can\nhold.  For example, 32 cells is equivalent to:\nnew Array[X][32]"},{"tag":"param:startsize","text":"Initial size of the array.  Note that data will\nNOT be auto-initialized."},{"tag":"return","text":"New Handle to the array object."}]},"kind":"native","returnType":"ArrayList","arguments":[{"type":"int","name":"blocksize","decl":"int blocksize","default":"1"},{"type":"int","name":"startsize","decl":"int startsize","default":"0"}]},{"name":"ClearArray","docStart":10652,"docEnd":10817,"docs":{"brief":"Clears an array of all entries.  This is the same as ResizeArray(0).","tags":[{"tag":"","text":"Clears an array of all entries.  This is the same as ResizeArray(0)."},{"tag":"param:array","text":"Array Handle."},{"tag":"error","text":"Invalid Handle."}]},"kind":"native","returnType":"void","arguments":[{"type":"Handle","name":"array","decl":"Handle array","default":null}]},{"name":"CloneArray","docStart":10860,"docEnd":11256,"docs":{"brief":"Clones an array, returning a new handle with the same size and data. This should NOT\nbe confused with CloneHandle. This is a completely new handle with the same data but\nno relation to the original. You MUST close it.","tags":[{"tag":"","text":"Clones an array, returning a new handle with the same size and data. This should NOT\nbe confused with CloneHandle. This is a completely new handle with the same data but\nno relation to the original. You MUST close it."},{"tag":"param:array","text":"Array handle to be cloned"},{"tag":"return","text":"New handle to the cloned array object"},{"tag":"error","text":"Invalid Handle"}]},"kind":"native","returnType":"Handle","arguments":[{"type":"Handle","name":"array","decl":"Handle array","default":null}]},{"name":"ResizeArray","docStart":11301,"docEnd":11652,"docs":{"brief":"Resizes an array.  If the size is smaller than the current size,\nthe array is truncated.  If the size is larger than the current size,\nthe data at the additional indexes will not be initialized.","tags":[{"tag":"","text":"Resizes an array.  If the size is smaller than the current size,\nthe array is truncated.  If the size is larger than the current size,\nthe data at the additional indexes will not be initialized."},{"tag":"param:array","text":"Array Handle."},{"tag":"param:newsize","text":"New size."},{"tag":"error","text":"Invalid Handle or out of memory."}]},"kind":"native","returnType":"void","arguments":[{"type":"Handle","name":"array","decl":"Handle array","default":null},{"type":"int","name":"newsize","decl":"int newsize","default":null}]},{"name":"GetArraySize","docStart":11709,"docEnd":11887,"docs":{"brief":"Returns the array size.","tags":[{"tag":"","text":"Returns the array size."},{"tag":"param:array","text":"Array Handle."},{"tag":"return","text":"Number of elements in the array."},{"tag":"error","text":"Invalid Handle."}]},"kind":"native","returnType":"int","arguments":[{"type":"Handle","name":"array","decl":"Handle array","default":null}]},{"name":"PushArrayCell","docStart":11931,"docEnd":12280,"docs":{"brief":"Pushes a value onto the end of an array, adding a new index.\n\nThis may safely be used even if the array has a blocksize\ngreater than 1.","tags":[{"tag":"","text":"Pushes a value onto the end of an array, adding a new index.\n\nThis may safely be used even if the array has a blocksize\ngreater than 1."},{"tag":"param:array","text":"Array Handle."},{"tag":"param:value","text":"Value to push."},{"tag":"return","text":"Index of the new entry."},{"tag":"error","text":"Invalid Handle or out of memory."}]},"kind":"native","returnType":"int","arguments":[{"type":"Handle","name":"array","decl":"Handle array","default":null},{"type":"any","name":"value","decl":"any value","default":null}]},{"name":"PushArrayString","docStart":12336,"docEnd":12617,"docs":{"brief":"Pushes a string onto the end of an array, truncating it\nif it is too big.","tags":[{"tag":"","text":"Pushes a string onto the end of an array, truncating it\nif it is too big."},{"tag":"param:array","text":"Array Handle."},{"tag":"param:value","text":"String to push."},{"tag":"return","text":"Index of the new entry."},{"tag":"error","text":"Invalid Handle or out of memory."}]},"kind":"native","returnType":"int","arguments":[{"type":"Handle","name":"array","decl":"Handle array","default":null},{"type":"const char[]","name":"value","decl":"const char[] value","default":null}]},{"name":"PushArrayArray","docStart":12684,"docEnd":13307,"docs":{"brief":"Pushes an array of cells onto the end of an array.  The cells\nare pushed as a block (i.e. the entire array sits at the index),\nrather than pushing each cell individually.","tags":[{"tag":"","text":"Pushes an array of cells onto the end of an array.  The cells\nare pushed as a block (i.e. the entire array sits at the index),\nrather than pushing each cell individually."},{"tag":"param:array","text":"Array Handle."},{"tag":"param:values","text":"Block of values to copy."},{"tag":"param:size","text":"If not set, the number of elements copied from the array\nwill be equal to the blocksize.  If set higher than the\nblocksize, the operation will be truncated."},{"tag":"return","text":"Index of the new entry."},{"tag":"error","text":"Invalid Handle or out of memory."}]},"kind":"native","returnType":"int","arguments":[{"type":"Handle","name":"array","decl":"Handle array","default":null},{"type":"const any[]","name":"values","decl":"const any[] values","default":null},{"type":"int","name":"size","decl":"int size","default":"-1"}]},{"name":"GetArrayCell","docStart":13386,"docEnd":13830,"docs":{"brief":"Retrieves a cell value from an array.","tags":[{"tag":"","text":"Retrieves a cell value from an array."},{"tag":"param:array","text":"Array Handle."},{"tag":"param:index","text":"Index in the array."},{"tag":"param:block","text":"Optionally specify which block to read from\n(useful if the blocksize > 0)."},{"tag":"param:asChar","text":"Optionally read as a byte instead of a cell."},{"tag":"return","text":"Value read."},{"tag":"error","text":"Invalid Handle, invalid index, or invalid block."}]},"kind":"native","returnType":"any","arguments":[{"type":"Handle","name":"array","decl":"Handle array","default":null},{"type":"int","name":"index","decl":"int index","default":null},{"type":"int","name":"block","decl":"int block","default":"0"},{"type":"bool","name":"asChar","decl":"bool asChar","default":"false"}]},{"name":"GetArrayString","docStart":13917,"docEnd":14266,"docs":{"brief":"Retrieves a string value from an array.","tags":[{"tag":"","text":"Retrieves a string value from an array."},{"tag":"param:array","text":"Array Handle."},{"tag":"param:index","text":"Index in the array."},{"tag":"param:buffer","text":"Buffer to copy to."},{"tag":"param:maxlength","text":"Maximum size of the buffer."},{"tag":"return","text":"Number of characters copied."},{"tag":"error","text":"Invalid Handle or invalid index."}]},"kind":"native","returnType":"int","arguments":[{"type":"Handle","name":"array","decl":"Handle array","default":null},{"type":"int","name":"index","decl":"int index","default":null},{"type":"char[]","name":"buffer","decl":"char[] buffer","default":null},{"type":"int","name":"maxlength","decl":"int maxlength","default":null}]},{"name":"GetArrayArray","docStart":14353,"docEnd":14808,"docs":{"brief":"Retrieves an array of cells from an array.","tags":[{"tag":"","text":"Retrieves an array of cells from an array."},{"tag":"param:array","text":"Array Handle."},{"tag":"param:index","text":"Index in the array."},{"tag":"param:buffer","text":"Buffer to store the array in."},{"tag":"param:size","text":"If not set, assumes the buffer size is equal to the\nblocksize.  Otherwise, the size passed is used."},{"tag":"return","text":"Number of cells copied."},{"tag":"error","text":"Invalid Handle or invalid index."}]},"kind":"native","returnType":"int","arguments":[{"type":"Handle","name":"array","decl":"Handle array","default":null},{"type":"int","name":"index","decl":"int index","default":null},{"type":"any[]","name":"buffer","decl":"any[] buffer","default":null},{"type":"int","name":"size","decl":"int size","default":"-1"}]},{"name":"SetArrayCell","docStart":14891,"docEnd":15333,"docs":{"brief":"Sets a cell value in an array.","tags":[{"tag":"","text":"Sets a cell value in an array."},{"tag":"param:array","text":"Array Handle."},{"tag":"param:index","text":"Index in the array."},{"tag":"param:value","text":"Cell value to set."},{"tag":"param:block","text":"Optionally specify which block to write to\n(useful if the blocksize > 0)."},{"tag":"param:asChar","text":"Optionally set as a byte instead of a cell."},{"tag":"error","text":"Invalid Handle, invalid index, or invalid block."}]},"kind":"native","returnType":"void","arguments":[{"type":"Handle","name":"array","decl":"Handle array","default":null},{"type":"int","name":"index","decl":"int index","default":null},{"type":"any","name":"value","decl":"any value","default":null},{"type":"int","name":"block","decl":"int block","default":"0"},{"type":"bool","name":"asChar","decl":"bool asChar","default":"false"}]},{"name":"SetArrayString","docStart":15432,"docEnd":15723,"docs":{"brief":"Sets a string value in an array.","tags":[{"tag":"","text":"Sets a string value in an array."},{"tag":"param:array","text":"Array Handle."},{"tag":"param:index","text":"Index in the array."},{"tag":"param:value","text":"String value to set."},{"tag":"return","text":"Number of characters copied."},{"tag":"error","text":"Invalid Handle or invalid index."}]},"kind":"native","returnType":"int","arguments":[{"type":"Handle","name":"array","decl":"Handle array","default":null},{"type":"int","name":"index","decl":"int index","default":null},{"type":"const char[]","name":"value","decl":"const char[] value","default":null}]},{"name":"SetArrayArray","docStart":15800,"docEnd":16233,"docs":{"brief":"Sets an array of cells in an array.","tags":[{"tag":"","text":"Sets an array of cells in an array."},{"tag":"param:array","text":"Array Handle."},{"tag":"param:index","text":"Index in the array."},{"tag":"param:values","text":"Array to copy."},{"tag":"param:size","text":"If not set, assumes the buffer size is equal to the\nblocksize.  Otherwise, the size passed is used."},{"tag":"return","text":"Number of cells copied."},{"tag":"error","text":"Invalid Handle or invalid index."}]},"kind":"native","returnType":"int","arguments":[{"type":"Handle","name":"array","decl":"Handle array","default":null},{"type":"int","name":"index","decl":"int index","default":null},{"type":"const any[]","name":"values","decl":"const any[] values","default":null},{"type":"int","name":"size","decl":"int size","default":"-1"}]},{"name":"ShiftArrayUp","docStart":16322,"docEnd":16702,"docs":{"brief":"Shifts an array up.  All array contents after and including the given\nindex are shifted up by one, and the given index is then \"free.\"\nAfter shifting, the contents of the given index is undefined.","tags":[{"tag":"","text":"Shifts an array up.  All array contents after and including the given\nindex are shifted up by one, and the given index is then \"free.\"\nAfter shifting, the contents of the given index is undefined."},{"tag":"param:array","text":"Array Handle."},{"tag":"param:index","text":"Index in the array to shift up from."},{"tag":"error","text":"Invalid Handle or invalid index."}]},"kind":"native","returnType":"void","arguments":[{"type":"Handle","name":"array","decl":"Handle array","default":null},{"type":"int","name":"index","decl":"int index","default":null}]},{"name":"RemoveFromArray","docStart":16758,"docEnd":17163,"docs":{"brief":"Removes an array index, shifting the entire array down from that position\non.  For example, if item 8 of 10 is removed, the last 3 items will then be\n(6,7,8) instead of (7,8,9), and all indexes before 8 will remain unchanged.","tags":[{"tag":"","text":"Removes an array index, shifting the entire array down from that position\non.  For example, if item 8 of 10 is removed, the last 3 items will then be\n(6,7,8) instead of (7,8,9), and all indexes before 8 will remain unchanged."},{"tag":"param:array","text":"Array Handle."},{"tag":"param:index","text":"Index in the array to remove at."},{"tag":"error","text":"Invalid Handle or invalid index."}]},"kind":"native","returnType":"void","arguments":[{"type":"Handle","name":"array","decl":"Handle array","default":null},{"type":"int","name":"index","decl":"int index","default":null}]},{"name":"SwapArrayItems","docStart":17222,"docEnd":17442,"docs":{"brief":"Swaps two items in the array.","tags":[{"tag":"","text":"Swaps two items in the array."},{"tag":"param:array","text":"Array Handle."},{"tag":"param:index1","text":"First index."},{"tag":"param:index2","text":"Second index."},{"tag":"error","text":"Invalid Handle or invalid index."}]},"kind":"native","returnType":"void","arguments":[{"type":"Handle","name":"array","decl":"Handle array","default":null},{"type":"int","name":"index1","decl":"int index1","default":null},{"type":"int","name":"index2","decl":"int index2","default":null}]},{"name":"FindStringInArray","docStart":17513,"docEnd":17834,"docs":{"brief":"Returns the index for the first occurrence of the provided string. If the string\ncannot be located, -1 will be returned.","tags":[{"tag":"","text":"Returns the index for the first occurrence of the provided string. If the string\ncannot be located, -1 will be returned."},{"tag":"param:array","text":"Array Handle."},{"tag":"param:item","text":"String to search for"},{"tag":"return","text":"Array index, or -1 on failure"},{"tag":"error","text":"Invalid Handle"}]},"kind":"native","returnType":"int","arguments":[{"type":"Handle","name":"array","decl":"Handle array","default":null},{"type":"const char[]","name":"item","decl":"const char[] item","default":null}]},{"name":"FindValueInArray","docStart":17902,"docEnd":18298,"docs":{"brief":"Returns the index for the first occurrence of the provided value. If the value\ncannot be located, -1 will be returned.","tags":[{"tag":"","text":"Returns the index for the first occurrence of the provided value. If the value\ncannot be located, -1 will be returned."},{"tag":"param:array","text":"Array Handle."},{"tag":"param:item","text":"Value to search for"},{"tag":"param:block","text":"Optionally which block to search in"},{"tag":"return","text":"Array index, or -1 on failure"},{"tag":"error","text":"Invalid Handle or invalid block"}]},"kind":"native","returnType":"int","arguments":[{"type":"Handle","name":"array","decl":"Handle array","default":null},{"type":"any","name":"item","decl":"any item","default":null},{"type":"int","name":"block","decl":"int block","default":"0"}]},{"name":"GetArrayBlockSize","docStart":18369,"docEnd":18567,"docs":{"brief":"Returns the blocksize the array was created with.","tags":[{"tag":"","text":"Returns the blocksize the array was created with."},{"tag":"param:array","text":"Array Handle."},{"tag":"return","text":"The blocksize of the array."},{"tag":"error","text":"Invalid Handle"}]},"kind":"native","returnType":"int","arguments":[{"type":"Handle","name":"array","decl":"Handle array","default":null}]}],"methodmaps":[{"name":"ArrayList","docStart":0,"docEnd":0,"docs":null,"parent":"Handle","methods":[{"name":"ArrayList","docStart":2063,"docEnd":2861,"docs":{"brief":"Creates a dynamic global cell array.  While slower than a normal array,\nit can be used globally AND dynamically, which is otherwise impossible.\n\nThe contents of the array are uniform; i.e. storing a string at index X\nand then retrieving it as an integer is NOT the same as StringToInt()!\nThe \"blocksize\" determines how many cells each array slot has; it cannot\nbe changed after creation.","tags":[{"tag":"","text":"Creates a dynamic global cell array.  While slower than a normal array,\nit can be used globally AND dynamically, which is otherwise impossible.\n\nThe contents of the array are uniform; i.e. storing a string at index X\nand then retrieving it as an integer is NOT the same as StringToInt()!\nThe \"blocksize\" determines how many cells each array slot has; it cannot\nbe changed after creation."},{"tag":"param:blocksize","text":"The number of cells each member of the array can\nhold.  For example, 32 cells is equivalent to:\nnew Array[X][32]"},{"tag":"param:startsize","text":"Initial size of the array.  Note that data will\nNOT be auto-initialized."},{"tag":"return","text":"New Handle to the array object."}]},"kind":"native","returnType":"ArrayList","arguments":[{"type":"int","name":"blocksize","decl":"int blocksize","default":"1"},{"type":"int","name":"startsize","decl":"int startsize","default":"0"}]},{"name":"Clear","docStart":2927,"docEnd":2993,"docs":{"brief":"Clears an array of all entries.  This is the same as Resize(0).","tags":[{"tag":"","text":"Clears an array of all entries.  This is the same as Resize(0)."}]},"kind":"native","returnType":"void","arguments":[]},{"name":"Clone","docStart":3028,"docEnd":3353,"docs":{"brief":"Clones an array, returning a new handle with the same size and data.\nThis should NOT be confused with CloneHandle. This is a completely new\nhandle with the same data but no relation to the original. It should\nclosed when no longer needed.","tags":[{"tag":"","text":"Clones an array, returning a new handle with the same size and data.\nThis should NOT be confused with CloneHandle. This is a completely new\nhandle with the same data but no relation to the original. It should\nclosed when no longer needed."},{"tag":"return","text":"New handle to the cloned array object"}]},"kind":"native","returnType":"ArrayList","arguments":[]},{"name":"Resize","docStart":3393,"docEnd":3641,"docs":{"brief":"Resizes an array.  If the size is smaller than the current size, the\narray is truncated.  If the size is larger than the current size,\nthe data at the additional indexes will not be initialized.","tags":[{"tag":"","text":"Resizes an array.  If the size is smaller than the current size, the\narray is truncated.  If the size is larger than the current size,\nthe data at the additional indexes will not be initialized."},{"tag":"param:newsize","text":"New size."}]},"kind":"native","returnType":"void","arguments":[{"type":"int","name":"newsize","decl":"int newsize","default":null}]},{"name":"Push","docStart":3688,"docEnd":3995,"docs":{"brief":"Pushes a value onto the end of an array, adding a new index.\n\nThis may safely be used even if the array has a blocksize greater\nthan 1.","tags":[{"tag":"","text":"Pushes a value onto the end of an array, adding a new index.\n\nThis may safely be used even if the array has a blocksize greater\nthan 1."},{"tag":"param:value","text":"Value to push."},{"tag":"return","text":"Index of the new entry."},{"tag":"error","text":"Invalid Handle or out of memory."}]},"kind":"native","returnType":"int","arguments":[{"type":"any","name":"value","decl":"any value","default":null}]},{"name":"PushString","docStart":4037,"docEnd":4210,"docs":{"brief":"Pushes a string onto the end of an array, truncating it if it is too big.","tags":[{"tag":"","text":"Pushes a string onto the end of an array, truncating it if it is too big."},{"tag":"param:value","text":"String to push."},{"tag":"return","text":"Index of the new entry."}]},"kind":"native","returnType":"int","arguments":[{"type":"const char[]","name":"value","decl":"const char[] value","default":null}]},{"name":"PushArray","docStart":4267,"docEnd":4791,"docs":{"brief":"Pushes an array of cells onto the end of an array.  The cells\nare pushed as a block (i.e. the entire array sits at the index),\nrather than pushing each cell individually.","tags":[{"tag":"","text":"Pushes an array of cells onto the end of an array.  The cells\nare pushed as a block (i.e. the entire array sits at the index),\nrather than pushing each cell individually."},{"tag":"param:values","text":"Block of values to copy."},{"tag":"param:size","text":"If not set, the number of elements copied from the array\nwill be equal to the blocksize.  If set higher than the\nblocksize, the operation will be truncated."},{"tag":"return","text":"Index of the new entry."}]},"kind":"native","returnType":"int","arguments":[{"type":"const any[]","name":"values","decl":"const any[] values","default":null},{"type":"int","name":"size","decl":"int size","default":"-1"}]},{"name":"Get","docStart":4860,"docEnd":5228,"docs":{"brief":"Retrieves a cell value from an array.","tags":[{"tag":"","text":"Retrieves a cell value from an array."},{"tag":"param:index","text":"Index in the array."},{"tag":"param:block","text":"Optionally specify which block to read from\n(useful if the blocksize > 0)."},{"tag":"param:asChar","text":"Optionally read as a byte instead of a cell."},{"tag":"return","text":"Value read."},{"tag":"error","text":"Invalid index."}]},"kind":"native","returnType":"any","arguments":[{"type":"int","name":"index","decl":"int index","default":null},{"type":"int","name":"block","decl":"int block","default":"0"},{"type":"bool","name":"asChar","decl":"bool asChar","default":"false"}]},{"name":"GetString","docStart":5301,"docEnd":5589,"docs":{"brief":"Retrieves a string value from an array.","tags":[{"tag":"","text":"Retrieves a string value from an array."},{"tag":"param:index","text":"Index in the array."},{"tag":"param:buffer","text":"Buffer to copy to."},{"tag":"param:maxlength","text":"Maximum size of the buffer."},{"tag":"return","text":"Number of characters copied."},{"tag":"error","text":"Invalid index."}]},"kind":"native","returnType":"int","arguments":[{"type":"int","name":"index","decl":"int index","default":null},{"type":"char[]","name":"buffer","decl":"char[] buffer","default":null},{"type":"int","name":"maxlength","decl":"int maxlength","default":null}]},{"name":"GetArray","docStart":5666,"docEnd":6061,"docs":{"brief":"Retrieves an array of cells from an array.","tags":[{"tag":"","text":"Retrieves an array of cells from an array."},{"tag":"param:index","text":"Index in the array."},{"tag":"param:buffer","text":"Buffer to store the array in."},{"tag":"param:size","text":"If not set, assumes the buffer size is equal to the\nblocksize.  Otherwise, the size passed is used."},{"tag":"return","text":"Number of cells copied."},{"tag":"error","text":"Invalid index."}]},"kind":"native","returnType":"int","arguments":[{"type":"int","name":"index","decl":"int index","default":null},{"type":"any[]","name":"buffer","decl":"any[] buffer","default":null},{"type":"int","name":"size","decl":"int size","default":"-1"}]},{"name":"Set","docStart":6134,"docEnd":6518,"docs":{"brief":"Sets a cell value in an array.","tags":[{"tag":"","text":"Sets a cell value in an array."},{"tag":"param:index","text":"Index in the array."},{"tag":"param:value","text":"Cell value to set."},{"tag":"param:block","text":"Optionally specify which block to write to\n(useful if the blocksize > 0)."},{"tag":"param:asChar","text":"Optionally set as a byte instead of a cell."},{"tag":"error","text":"Invalid index, or invalid block."}]},"kind":"native","returnType":"void","arguments":[{"type":"int","name":"index","decl":"int index","default":null},{"type":"any","name":"value","decl":"any value","default":null},{"type":"int","name":"block","decl":"int block","default":"0"},{"type":"bool","name":"asChar","decl":"bool asChar","default":"false"}]},{"name":"SetString","docStart":6603,"docEnd":6832,"docs":{"brief":"Sets a string value in an array.","tags":[{"tag":"","text":"Sets a string value in an array."},{"tag":"param:index","text":"Index in the array."},{"tag":"param:value","text":"String value to set."},{"tag":"return","text":"Number of characters copied."},{"tag":"error","text":"Invalid index."}]},"kind":"native","returnType":"void","arguments":[{"type":"int","name":"index","decl":"int index","default":null},{"type":"const char[]","name":"value","decl":"const char[] value","default":null}]},{"name":"SetArray","docStart":6900,"docEnd":7273,"docs":{"brief":"Sets an array of cells in an array.","tags":[{"tag":"","text":"Sets an array of cells in an array."},{"tag":"param:index","text":"Index in the array."},{"tag":"param:values","text":"Array to copy."},{"tag":"param:size","text":"If not set, assumes the buffer size is equal to the\nblocksize.  Otherwise, the size passed is used."},{"tag":"return","text":"Number of cells copied."},{"tag":"error","text":"Invalid index."}]},"kind":"native","returnType":"void","arguments":[{"type":"int","name":"index","decl":"int index","default":null},{"type":"const any[]","name":"values","decl":"const any[] values","default":null},{"type":"int","name":"size","decl":"int size","default":"-1"}]},{"name":"ShiftUp","docStart":7353,"docEnd":7671,"docs":{"brief":"Shifts an array up.  All array contents after and including the given\nindex are shifted up by one, and the given index is then \"free.\"\nAfter shifting, the contents of the given index is undefined.","tags":[{"tag":"","text":"Shifts an array up.  All array contents after and including the given\nindex are shifted up by one, and the given index is then \"free.\"\nAfter shifting, the contents of the given index is undefined."},{"tag":"param:index","text":"Index in the array to shift up from."},{"tag":"error","text":"Invalid index."}]},"kind":"native","returnType":"void","arguments":[{"type":"int","name":"index","decl":"int index","default":null}]},{"name":"Erase","docStart":7717,"docEnd":8060,"docs":{"brief":"Removes an array index, shifting the entire array down from that position\non.  For example, if item 8 of 10 is removed, the last 3 items will then be\n(6,7,8) instead of (7,8,9), and all indexes before 8 will remain unchanged.","tags":[{"tag":"","text":"Removes an array index, shifting the entire array down from that position\non.  For example, if item 8 of 10 is removed, the last 3 items will then be\n(6,7,8) instead of (7,8,9), and all indexes before 8 will remain unchanged."},{"tag":"param:index","text":"Index in the array to remove at."},{"tag":"error","text":"Invalid index."}]},"kind":"native","returnType":"void","arguments":[{"type":"int","name":"index","decl":"int index","default":null}]},{"name":"SwapAt","docStart":8104,"docEnd":8261,"docs":{"brief":"Swaps two items in the array.","tags":[{"tag":"","text":"Swaps two items in the array."},{"tag":"param:index1","text":"First index."},{"tag":"param:index2","text":"Second index."},{"tag":"error","text":"Invalid index."}]},"kind":"native","returnType":"void","arguments":[{"type":"int","name":"index1","decl":"int index1","default":null},{"type":"int","name":"index2","decl":"int index2","default":null}]},{"name":"FindString","docStart":8319,"docEnd":8555,"docs":{"brief":"Returns the index for the first occurrence of the provided string. If\nthe string cannot be located, -1 will be returned.","tags":[{"tag":"","text":"Returns the index for the first occurrence of the provided string. If\nthe string cannot be located, -1 will be returned."},{"tag":"param:item","text":"String to search for"},{"tag":"return","text":"Array index, or -1 on failure"}]},"kind":"native","returnType":"int","arguments":[{"type":"const char[]","name":"item","decl":"const char[] item","default":null}]},{"name":"FindValue","docStart":8611,"docEnd":8952,"docs":{"brief":"Returns the index for the first occurrence of the provided value. If the\nvalue cannot be located, -1 will be returned.","tags":[{"tag":"","text":"Returns the index for the first occurrence of the provided value. If the\nvalue cannot be located, -1 will be returned."},{"tag":"param:item","text":"Value to search for"},{"tag":"param:block","text":"Optionally which block to search in"},{"tag":"return","text":"Array index, or -1 on failure"},{"tag":"error","text":"Invalid block index"}]},"kind":"native","returnType":"int","arguments":[{"type":"any","name":"item","decl":"any item","default":null},{"type":"int","name":"block","decl":"int block","default":"0"}]},{"name":"Sort","docStart":9011,"docEnd":9210,"docs":{"brief":"Sort an ADT Array. Specify the type as Integer, Float, or String.","tags":[{"tag":"","text":"Sort an ADT Array. Specify the type as Integer, Float, or String."},{"tag":"param:order","text":"Sort order to use, same as other sorts."},{"tag":"param:type","text":"Data type stored in the ADT Array"}]},"kind":"native","returnType":"void","arguments":[{"type":"SortOrder","name":"order","decl":"SortOrder order","default":null},{"type":"SortType","name":"type","decl":"SortType type","default":null}]},{"name":"SortCustom","docStart":9274,"docEnd":9486,"docs":{"brief":"Custom sorts an ADT Array. You must pass in a comparison function.","tags":[{"tag":"","text":"Custom sorts an ADT Array. You must pass in a comparison function."},{"tag":"param:sortfunc","text":"Sort comparison function to use"},{"tag":"param:hndl","text":"Optional Handle to pass through the comparison calls."}]},"kind":"native","returnType":"void","arguments":[{"type":"SortFuncADTArray","name":"sortfunc","decl":"SortFuncADTArray sortfunc","default":null},{"type":"Handle","name":"hndl","decl":"Handle hndl","default":"INVALID_HANDLE"}]}],"properties":[{"name":"Length","docStart":9580,"docEnd":9614,"docs":{"brief":"Retrieve the size of the array.","tags":[{"tag":"","text":"Retrieve the size of the array."}]},"type":"int","getter":true,"setter":false},{"name":"BlockSize","docStart":9672,"docEnd":9725,"docs":{"brief":"Retrieve the blocksize the array was created with.","tags":[{"tag":"","text":"Retrieve the blocksize the array was created with."}]},"type":"int","getter":true,"setter":false}]}],"enumstructs":[],"constants":[],"enums":[],"typesets":[],"typedefs":[]}