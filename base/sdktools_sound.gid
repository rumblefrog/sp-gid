{"functions":[{"name":"PrefetchSound","docStart":5060,"docEnd":5169,"docs":{"brief":"Prefetches a sound.","tags":[{"tag":"","text":"Prefetches a sound."},{"tag":"param:name","text":"Sound file name relative to the \"sound\" folder."}]},"kind":"native","returnType":"void","arguments":[{"type":"const char[]","name":"name","decl":"const char[] name","default":null}]},{"name":"GetSoundDuration","docStart":0,"docEnd":0,"docs":null,"kind":"native","returnType":"float","arguments":[{"type":"const char[]","name":"name","decl":"const char[] name","default":null}]},{"name":"EmitAmbientSound","docStart":5636,"docEnd":6082,"docs":{"brief":"Emits an ambient sound.","tags":[{"tag":"","text":"Emits an ambient sound."},{"tag":"param:name","text":"Sound file name relative to the \"sound\" folder."},{"tag":"param:pos","text":"Origin of sound."},{"tag":"param:entity","text":"Entity index to associate sound with."},{"tag":"param:level","text":"Sound level (from 0 to 255)."},{"tag":"param:flags","text":"Sound flags."},{"tag":"param:vol","text":"Volume (from 0.0 to 1.0)."},{"tag":"param:pitch","text":"Pitch (from 0 to 255)."},{"tag":"param:delay","text":"Play delay."}]},"kind":"native","returnType":"void","arguments":[{"type":"const char[]","name":"name","decl":"const char[] name","default":null},{"type":"const float[3]","name":"pos","decl":"const float pos[3]","default":null},{"type":"int","name":"entity","decl":"int entity","default":"0"},{"type":"int","name":"level","decl":"int level","default":"SNDLEVEL_NORMAL"},{"type":"int","name":"flags","decl":"int flags","default":"SND_NOFLAGS"},{"type":"float","name":"vol","decl":"float vol","default":"1.000000"},{"type":"int","name":"pitch","decl":"int pitch","default":"100"},{"type":"float","name":"delay","decl":"float delay","default":"0.000000"}]},{"name":"FadeClientVolume","docStart":6365,"docEnd":6750,"docs":{"brief":"Fades a client's volume level toward silence or a given percentage.","tags":[{"tag":"","text":"Fades a client's volume level toward silence or a given percentage."},{"tag":"param:client","text":"Client index."},{"tag":"param:percent","text":"Fade percentage."},{"tag":"param:outtime","text":"Fade out time, in seconds."},{"tag":"param:holdtime","text":"Hold time, in seconds."},{"tag":"param:intime","text":"Fade in time, in seconds."},{"tag":"error","text":"Invalid client index or client not in game."}]},"kind":"native","returnType":"void","arguments":[{"type":"int","name":"client","decl":"int client","default":null},{"type":"float","name":"percent","decl":"float percent","default":null},{"type":"float","name":"outtime","decl":"float outtime","default":null},{"type":"float","name":"holdtime","decl":"float holdtime","default":null},{"type":"float","name":"intime","decl":"float intime","default":null}]},{"name":"StopSound","docStart":6857,"docEnd":7041,"docs":{"brief":"Stops a sound.","tags":[{"tag":"","text":"Stops a sound."},{"tag":"param:entity","text":"Entity index."},{"tag":"param:channel","text":"Channel number."},{"tag":"param:name","text":"Sound file name relative to the \"sound\" folder."}]},"kind":"native","returnType":"void","arguments":[{"type":"int","name":"entity","decl":"int entity","default":null},{"type":"int","name":"channel","decl":"int channel","default":null},{"type":"const char[]","name":"name","decl":"const char[] name","default":null}]},{"name":"EmitSound","docStart":7113,"docEnd":7955,"docs":{"brief":"Emits a sound to a list of clients.","tags":[{"tag":"","text":"Emits a sound to a list of clients."},{"tag":"param:clients","text":"Array of client indexes."},{"tag":"param:numClients","text":"Number of clients in the array."},{"tag":"param:sample","text":"Sound file name relative to the \"sound\" folder."},{"tag":"param:entity","text":"Entity to emit from."},{"tag":"param:channel","text":"Channel to emit with."},{"tag":"param:level","text":"Sound level."},{"tag":"param:flags","text":"Sound flags."},{"tag":"param:volume","text":"Sound volume."},{"tag":"param:pitch","text":"Sound pitch."},{"tag":"param:speakerentity","text":"Unknown."},{"tag":"param:origin","text":"Sound origin."},{"tag":"param:dir","text":"Sound direction."},{"tag":"param:updatePos","text":"Unknown (updates positions?)"},{"tag":"param:soundtime","text":"Alternate time to play sound for."},{"tag":"param:...","text":"Optional list of Float[3] arrays to specify additional origins."},{"tag":"error","text":"Invalid client index."}]},"kind":"native","returnType":"void","arguments":[{"type":"const int[]","name":"clients","decl":"const int[] clients","default":null},{"type":"int","name":"numClients","decl":"int numClients","default":null},{"type":"const char[]","name":"sample","decl":"const char[] sample","default":null},{"type":"int","name":"entity","decl":"int entity","default":"-2"},{"type":"int","name":"channel","decl":"int channel","default":"SNDCHAN_AUTO"},{"type":"int","name":"level","decl":"int level","default":"SNDLEVEL_NORMAL"},{"type":"int","name":"flags","decl":"int flags","default":"SND_NOFLAGS"},{"type":"float","name":"volume","decl":"float volume","default":"1.000000"},{"type":"int","name":"pitch","decl":"int pitch","default":"100"},{"type":"int","name":"speakerentity","decl":"int speakerentity","default":"-1"},{"type":"const float[3]","name":"origin","decl":"const float origin[3]","default":"NULL_VECTOR"},{"type":"const float[3]","name":"dir","decl":"const float dir[3]","default":"NULL_VECTOR"},{"type":"bool","name":"updatePos","decl":"bool updatePos","default":"true"},{"type":"float","name":"soundtime","decl":"float soundtime","default":"0.000000"},{"type":"any...","name":"...","decl":"any...","default":null}]},{"name":"EmitSoundEntry","docStart":8448,"docEnd":9528,"docs":{"brief":"Emits a sound or game sound to a list of clients using the latest version of the engine sound interface.\nThis native is only available in engines that are greater than or equal to Portal 2.","tags":[{"tag":"","text":"Emits a sound or game sound to a list of clients using the latest version of the engine sound interface.\nThis native is only available in engines that are greater than or equal to Portal 2."},{"tag":"param:clients","text":"Array of client indexes."},{"tag":"param:numClients","text":"Number of clients in the array."},{"tag":"param:soundEntry","text":"Sound entry name."},{"tag":"param:sample","text":"Sound file name relative to the \"sound\" folder."},{"tag":"param:entity","text":"Entity to emit from."},{"tag":"param:channel","text":"Channel to emit with."},{"tag":"param:level","text":"Sound level."},{"tag":"param:seed","text":"Sound seed."},{"tag":"param:flags","text":"Sound flags."},{"tag":"param:volume","text":"Sound volume."},{"tag":"param:pitch","text":"Sound pitch."},{"tag":"param:speakerentity","text":"Unknown."},{"tag":"param:origin","text":"Sound origin."},{"tag":"param:dir","text":"Sound direction."},{"tag":"param:updatePos","text":"Unknown (updates positions?)"},{"tag":"param:soundtime","text":"Alternate time to play sound for."},{"tag":"param:...","text":"Optional list of Float[3] arrays to specify additional origins."},{"tag":"error","text":"Invalid client index."}]},"kind":"native","returnType":"void","arguments":[{"type":"const int[]","name":"clients","decl":"const int[] clients","default":null},{"type":"int","name":"numClients","decl":"int numClients","default":null},{"type":"const char[]","name":"soundEntry","decl":"const char[] soundEntry","default":null},{"type":"const char[]","name":"sample","decl":"const char[] sample","default":null},{"type":"int","name":"entity","decl":"int entity","default":"-2"},{"type":"int","name":"channel","decl":"int channel","default":"SNDCHAN_AUTO"},{"type":"int","name":"level","decl":"int level","default":"SNDLEVEL_NORMAL"},{"type":"int","name":"seed","decl":"int seed","default":"0"},{"type":"int","name":"flags","decl":"int flags","default":"SND_NOFLAGS"},{"type":"float","name":"volume","decl":"float volume","default":"1.000000"},{"type":"int","name":"pitch","decl":"int pitch","default":"100"},{"type":"int","name":"speakerentity","decl":"int speakerentity","default":"-1"},{"type":"const float[3]","name":"origin","decl":"const float origin[3]","default":"NULL_VECTOR"},{"type":"const float[3]","name":"dir","decl":"const float dir[3]","default":"NULL_VECTOR"},{"type":"bool","name":"updatePos","decl":"bool updatePos","default":"true"},{"type":"float","name":"soundtime","decl":"float soundtime","default":"0.000000"},{"type":"any...","name":"...","decl":"any...","default":null}]},{"name":"EmitSentence","docStart":10077,"docEnd":10918,"docs":{"brief":"Emits a sentence to a list of clients.","tags":[{"tag":"","text":"Emits a sentence to a list of clients."},{"tag":"param:clients","text":"Array of client indexes."},{"tag":"param:numClients","text":"Number of clients in the array."},{"tag":"param:sentence","text":"Sentence index (from PrecacheSentenceFile)."},{"tag":"param:entity","text":"Entity to emit from."},{"tag":"param:channel","text":"Channel to emit with."},{"tag":"param:level","text":"Sound level."},{"tag":"param:flags","text":"Sound flags."},{"tag":"param:volume","text":"Sound volume."},{"tag":"param:pitch","text":"Sound pitch."},{"tag":"param:speakerentity","text":"Unknown."},{"tag":"param:origin","text":"Sound origin."},{"tag":"param:dir","text":"Sound direction."},{"tag":"param:updatePos","text":"Unknown (updates positions?)"},{"tag":"param:soundtime","text":"Alternate time to play sound for."},{"tag":"param:...","text":"Optional list of Float[3] arrays to specify additional origins."},{"tag":"error","text":"Invalid client index."}]},"kind":"native","returnType":"void","arguments":[{"type":"const int[]","name":"clients","decl":"const int[] clients","default":null},{"type":"int","name":"numClients","decl":"int numClients","default":null},{"type":"int","name":"sentence","decl":"int sentence","default":null},{"type":"int","name":"entity","decl":"int entity","default":null},{"type":"int","name":"channel","decl":"int channel","default":"SNDCHAN_AUTO"},{"type":"int","name":"level","decl":"int level","default":"SNDLEVEL_NORMAL"},{"type":"int","name":"flags","decl":"int flags","default":"SND_NOFLAGS"},{"type":"float","name":"volume","decl":"float volume","default":"1.000000"},{"type":"int","name":"pitch","decl":"int pitch","default":"100"},{"type":"int","name":"speakerentity","decl":"int speakerentity","default":"-1"},{"type":"const float[3]","name":"origin","decl":"const float origin[3]","default":"NULL_VECTOR"},{"type":"const float[3]","name":"dir","decl":"const float dir[3]","default":"NULL_VECTOR"},{"type":"bool","name":"updatePos","decl":"bool updatePos","default":"true"},{"type":"float","name":"soundtime","decl":"float soundtime","default":"0.000000"},{"type":"any...","name":"...","decl":"any...","default":null}]},{"name":"GetDistGainFromSoundLevel","docStart":11387,"docEnd":11809,"docs":{"brief":"Calculates gain of sound on given distance with given sound level in decibel","tags":[{"tag":"","text":"Calculates gain of sound on given distance with given sound level in decibel"},{"tag":"param:soundlevel","text":"decibel of sound, like SNDLEVEL_NORMAL or integer value"},{"tag":"param:distance","text":"distance of sound to calculate, not meter or feet, but Source Engine`s normal Coordinate unit"},{"tag":"return","text":"gain of sound. you can multiply this with original sound`s volume to calculate volume on given distance"}]},"kind":"native","returnType":"float","arguments":[{"type":"int","name":"soundlevel","decl":"int soundlevel","default":null},{"type":"float","name":"distance","decl":"float distance","default":null}]},{"name":"AddAmbientSoundHook","docStart":14574,"docEnd":14723,"docs":{"brief":"Hooks all played ambient sounds.","tags":[{"tag":"","text":"Hooks all played ambient sounds."},{"tag":"param:hook","text":"Function to use as a hook."},{"tag":"error","text":"Invalid function hook."}]},"kind":"native","returnType":"void","arguments":[{"type":"AmbientSHook","name":"hook","decl":"AmbientSHook hook","default":null}]},{"name":"AddNormalSoundHook","docStart":14780,"docEnd":14928,"docs":{"brief":"Hooks all played normal sounds.","tags":[{"tag":"","text":"Hooks all played normal sounds."},{"tag":"param:hook","text":"Function to use as a hook."},{"tag":"error","text":"Invalid function hook."}]},"kind":"native","returnType":"void","arguments":[{"type":"NormalSHook","name":"hook","decl":"NormalSHook hook","default":null}]},{"name":"RemoveAmbientSoundHook","docStart":14983,"docEnd":15135,"docs":{"brief":"Unhooks all played ambient sounds.","tags":[{"tag":"","text":"Unhooks all played ambient sounds."},{"tag":"param:hook","text":"Function used for the hook."},{"tag":"error","text":"Invalid function hook."}]},"kind":"native","returnType":"void","arguments":[{"type":"AmbientSHook","name":"hook","decl":"AmbientSHook hook","default":null}]},{"name":"RemoveNormalSoundHook","docStart":15195,"docEnd":15346,"docs":{"brief":"Unhooks all played normal sounds.","tags":[{"tag":"","text":"Unhooks all played normal sounds."},{"tag":"param:hook","text":"Function used for the hook."},{"tag":"error","text":"Invalid function hook."}]},"kind":"native","returnType":"void","arguments":[{"type":"NormalSHook","name":"hook","decl":"NormalSHook hook","default":null}]},{"name":"EmitSoundToClient","docStart":15404,"docEnd":16090,"docs":{"brief":"Wrapper to emit sound to one client.","tags":[{"tag":"","text":"Wrapper to emit sound to one client."},{"tag":"param:client","text":"Client index."},{"tag":"param:sample","text":"Sound file name relative to the \"sound\" folder."},{"tag":"param:entity","text":"Entity to emit from."},{"tag":"param:channel","text":"Channel to emit with."},{"tag":"param:level","text":"Sound level."},{"tag":"param:flags","text":"Sound flags."},{"tag":"param:volume","text":"Sound volume."},{"tag":"param:pitch","text":"Sound pitch."},{"tag":"param:speakerentity","text":"Unknown."},{"tag":"param:origin","text":"Sound origin."},{"tag":"param:dir","text":"Sound direction."},{"tag":"param:updatePos","text":"Unknown (updates positions?)"},{"tag":"param:soundtime","text":"Alternate time to play sound for."},{"tag":"error","text":"Invalid client index."}]},"kind":"stock","returnType":"void","arguments":[{"type":"int","name":"client","decl":"int client","default":null},{"type":"const char[]","name":"sample","decl":"const char[] sample","default":null},{"type":"int","name":"entity","decl":"int entity","default":"-2"},{"type":"int","name":"channel","decl":"int channel","default":"SNDCHAN_AUTO"},{"type":"int","name":"level","decl":"int level","default":"SNDLEVEL_NORMAL"},{"type":"int","name":"flags","decl":"int flags","default":"SND_NOFLAGS"},{"type":"float","name":"volume","decl":"float volume","default":"1.000000"},{"type":"int","name":"pitch","decl":"int pitch","default":"100"},{"type":"int","name":"speakerentity","decl":"int speakerentity","default":"-1"},{"type":"const float[3]","name":"origin","decl":"const float origin[3]","default":"NULL_VECTOR"},{"type":"const float[3]","name":"dir","decl":"const float dir[3]","default":"NULL_VECTOR"},{"type":"bool","name":"updatePos","decl":"bool updatePos","default":"true"},{"type":"float","name":"soundtime","decl":"float soundtime","default":"0.000000"}]},{"name":"EmitSoundToAll","docStart":16861,"docEnd":17509,"docs":{"brief":"Wrapper to emit sound to all clients.","tags":[{"tag":"","text":"Wrapper to emit sound to all clients."},{"tag":"param:sample","text":"Sound file name relative to the \"sound\" folder."},{"tag":"param:entity","text":"Entity to emit from."},{"tag":"param:channel","text":"Channel to emit with."},{"tag":"param:level","text":"Sound level."},{"tag":"param:flags","text":"Sound flags."},{"tag":"param:volume","text":"Sound volume."},{"tag":"param:pitch","text":"Sound pitch."},{"tag":"param:speakerentity","text":"Unknown."},{"tag":"param:origin","text":"Sound origin."},{"tag":"param:dir","text":"Sound direction."},{"tag":"param:updatePos","text":"Unknown (updates positions?)"},{"tag":"param:soundtime","text":"Alternate time to play sound for."},{"tag":"error","text":"Invalid client index."}]},"kind":"stock","returnType":"void","arguments":[{"type":"const char[]","name":"sample","decl":"const char[] sample","default":null},{"type":"int","name":"entity","decl":"int entity","default":"-2"},{"type":"int","name":"channel","decl":"int channel","default":"SNDCHAN_AUTO"},{"type":"int","name":"level","decl":"int level","default":"SNDLEVEL_NORMAL"},{"type":"int","name":"flags","decl":"int flags","default":"SND_NOFLAGS"},{"type":"float","name":"volume","decl":"float volume","default":"1.000000"},{"type":"int","name":"pitch","decl":"int pitch","default":"100"},{"type":"int","name":"speakerentity","decl":"int speakerentity","default":"-1"},{"type":"const float[3]","name":"origin","decl":"const float origin[3]","default":"NULL_VECTOR"},{"type":"const float[3]","name":"dir","decl":"const float dir[3]","default":"NULL_VECTOR"},{"type":"bool","name":"updatePos","decl":"bool updatePos","default":"true"},{"type":"float","name":"soundtime","decl":"float soundtime","default":"0.000000"}]},{"name":"ATTN_TO_SNDLEVEL","docStart":18276,"docEnd":18468,"docs":{"brief":"Converts an attenuation value to a sound level.\nThis function is from the HL2SDK.","tags":[{"tag":"","text":"Converts an attenuation value to a sound level.\nThis function is from the HL2SDK."},{"tag":"param:attn","text":"Attenuation value."},{"tag":"return","text":"Integer sound level."}]},"kind":"stock","returnType":"int","arguments":[{"type":"float","name":"attn","decl":"float attn","default":null}]},{"name":"GetGameSoundParams","docStart":18600,"docEnd":19395,"docs":{"brief":"Retrieves the parameters for a game sound.\n\nGame sounds are found in a game's scripts/game_sound.txt or other files\nreferenced from it\n\nNote that if a game sound has a rndwave section, one of them will be returned\nat random.","tags":[{"tag":"","text":"Retrieves the parameters for a game sound.\n\nGame sounds are found in a game's scripts/game_sound.txt or other files\nreferenced from it\n\nNote that if a game sound has a rndwave section, one of them will be returned\nat random."},{"tag":"param:gameSound","text":"Name of game sound."},{"tag":"param:channel","text":"Channel to emit with."},{"tag":"param:level","text":"Sound level."},{"tag":"param:volume","text":"Sound volume."},{"tag":"param:pitch","text":"Sound pitch."},{"tag":"param:sample","text":"Sound file name relative to the \"sound\" folder."},{"tag":"param:maxlength","text":"Maximum length of sample string buffer."},{"tag":"param:entity","text":"Entity the sound is being emitted from."},{"tag":"return","text":"True if the sound was successfully retrieved, false if it\nwas not found"}]},"kind":"native","returnType":"bool","arguments":[{"type":"const char[]","name":"gameSound","decl":"const char[] gameSound","default":null},{"type":"int&","name":"channel","decl":"int& channel","default":null},{"type":"int&","name":"soundLevel","decl":"int& soundLevel","default":null},{"type":"float&","name":"volume","decl":"float& volume","default":null},{"type":"int&","name":"pitch","decl":"int& pitch","default":null},{"type":"char[]","name":"sample","decl":"char[] sample","default":null},{"type":"int","name":"maxlength","decl":"int maxlength","default":null},{"type":"int","name":"entity","decl":"int entity","default":"-2"}]},{"name":"EmitGameSound","docStart":19609,"docEnd":20468,"docs":{"brief":"Emits a game sound to a list of clients.\n\nGame sounds are found in a game's scripts/game_sound.txt or other files\nreferenced from it\n\nNote that if a game sound has a rndwave section, one of them will be returned\nat random.","tags":[{"tag":"","text":"Emits a game sound to a list of clients.\n\nGame sounds are found in a game's scripts/game_sound.txt or other files\nreferenced from it\n\nNote that if a game sound has a rndwave section, one of them will be returned\nat random."},{"tag":"param:clients","text":"Array of client indexes."},{"tag":"param:numClients","text":"Number of clients in the array."},{"tag":"param:gameSound","text":"Name of game sound."},{"tag":"param:entity","text":"Entity to emit from."},{"tag":"param:flags","text":"Sound flags."},{"tag":"param:speakerentity","text":"Unknown."},{"tag":"param:origin","text":"Sound origin."},{"tag":"param:dir","text":"Sound direction."},{"tag":"param:updatePos","text":"Unknown (updates positions?)"},{"tag":"param:soundtime","text":"Alternate time to play sound for."},{"tag":"return","text":"True if the sound was played successfully, false if it failed"},{"tag":"error","text":"Invalid client index."}]},"kind":"stock","returnType":"bool","arguments":[{"type":"const int[]","name":"clients","decl":"const int[] clients","default":null},{"type":"int","name":"numClients","decl":"int numClients","default":null},{"type":"const char[]","name":"gameSound","decl":"const char[] gameSound","default":null},{"type":"int","name":"entity","decl":"int entity","default":"-2"},{"type":"int","name":"flags","decl":"int flags","default":"SND_NOFLAGS"},{"type":"int","name":"speakerentity","decl":"int speakerentity","default":"-1"},{"type":"const float[3]","name":"origin","decl":"const float origin[3]","default":"NULL_VECTOR"},{"type":"const float[3]","name":"dir","decl":"const float dir[3]","default":"NULL_VECTOR"},{"type":"bool","name":"updatePos","decl":"bool updatePos","default":"true"},{"type":"float","name":"soundtime","decl":"float soundtime","default":"0.000000"}]},{"name":"EmitAmbientGameSound","docStart":21182,"docEnd":21656,"docs":{"brief":"Emits an ambient game sound.\n\nGame sounds are found in a game's scripts/game_sound.txt or other files\nreferenced from it\n\nNote that if a game sound has a rndwave section, one of them will be returned\nat random.","tags":[{"tag":"","text":"Emits an ambient game sound.\n\nGame sounds are found in a game's scripts/game_sound.txt or other files\nreferenced from it\n\nNote that if a game sound has a rndwave section, one of them will be returned\nat random."},{"tag":"param:gameSound","text":"Name of game sound."},{"tag":"param:pos","text":"Origin of sound."},{"tag":"param:entity","text":"Entity index to associate sound with."},{"tag":"param:flags","text":"Sound flags."},{"tag":"param:delay","text":"Play delay."}]},"kind":"stock","returnType":"bool","arguments":[{"type":"const char[]","name":"gameSound","decl":"const char[] gameSound","default":null},{"type":"const float[3]","name":"pos","decl":"const float pos[3]","default":null},{"type":"int","name":"entity","decl":"int entity","default":"0"},{"type":"int","name":"flags","decl":"int flags","default":"SND_NOFLAGS"},{"type":"float","name":"delay","decl":"float delay","default":"0.000000"}]},{"name":"EmitGameSoundToClient","docStart":22245,"docEnd":22952,"docs":{"brief":"Wrapper to emit a game sound to one client.\n\nGame sounds are found in a game's scripts/game_sound.txt or other files\nreferenced from it\n\nNote that if a game sound has a rndwave section, one of them will be returned\nat random.","tags":[{"tag":"","text":"Wrapper to emit a game sound to one client.\n\nGame sounds are found in a game's scripts/game_sound.txt or other files\nreferenced from it\n\nNote that if a game sound has a rndwave section, one of them will be returned\nat random."},{"tag":"param:client","text":"Client index."},{"tag":"param:gameSound","text":"Name of game sound."},{"tag":"param:entity","text":"Entity to emit from."},{"tag":"param:flags","text":"Sound flags."},{"tag":"param:speakerentity","text":"Unknown."},{"tag":"param:origin","text":"Sound origin."},{"tag":"param:dir","text":"Sound direction."},{"tag":"param:updatePos","text":"Unknown (updates positions?)"},{"tag":"param:soundtime","text":"Alternate time to play sound for."},{"tag":"error","text":"Invalid client index."}]},"kind":"stock","returnType":"bool","arguments":[{"type":"int","name":"client","decl":"int client","default":null},{"type":"const char[]","name":"gameSound","decl":"const char[] gameSound","default":null},{"type":"int","name":"entity","decl":"int entity","default":"-2"},{"type":"int","name":"flags","decl":"int flags","default":"SND_NOFLAGS"},{"type":"int","name":"speakerentity","decl":"int speakerentity","default":"-1"},{"type":"const float[3]","name":"origin","decl":"const float origin[3]","default":"NULL_VECTOR"},{"type":"const float[3]","name":"dir","decl":"const float dir[3]","default":"NULL_VECTOR"},{"type":"bool","name":"updatePos","decl":"bool updatePos","default":"true"},{"type":"float","name":"soundtime","decl":"float soundtime","default":"0.000000"}]},{"name":"EmitGameSoundToAll","docStart":23562,"docEnd":24229,"docs":{"brief":"Wrapper to emit game sound to all clients.\n\nGame sounds are found in a game's scripts/game_sound.txt or other files\nreferenced from it\n\nNote that if a game sound has a rndwave section, one of them will be returned\nat random.","tags":[{"tag":"","text":"Wrapper to emit game sound to all clients.\n\nGame sounds are found in a game's scripts/game_sound.txt or other files\nreferenced from it\n\nNote that if a game sound has a rndwave section, one of them will be returned\nat random."},{"tag":"param:gameSound","text":"Name of game sound."},{"tag":"param:entity","text":"Entity to emit from."},{"tag":"param:flags","text":"Sound flags."},{"tag":"param:speakerentity","text":"Unknown."},{"tag":"param:origin","text":"Sound origin."},{"tag":"param:dir","text":"Sound direction."},{"tag":"param:updatePos","text":"Unknown (updates positions?)"},{"tag":"param:soundtime","text":"Alternate time to play sound for."},{"tag":"error","text":"Invalid client index."}]},"kind":"stock","returnType":"bool","arguments":[{"type":"const char[]","name":"gameSound","decl":"const char[] gameSound","default":null},{"type":"int","name":"entity","decl":"int entity","default":"-2"},{"type":"int","name":"flags","decl":"int flags","default":"SND_NOFLAGS"},{"type":"int","name":"speakerentity","decl":"int speakerentity","default":"-1"},{"type":"const float[3]","name":"origin","decl":"const float origin[3]","default":"NULL_VECTOR"},{"type":"const float[3]","name":"dir","decl":"const float dir[3]","default":"NULL_VECTOR"},{"type":"bool","name":"updatePos","decl":"bool updatePos","default":"true"},{"type":"float","name":"soundtime","decl":"float soundtime","default":"0.000000"}]},{"name":"PrecacheScriptSound","docStart":24853,"docEnd":25523,"docs":{"brief":"Precache a game sound.\n\nMost games will precache all game sounds on map start, but this is not guaranteed...\nTeam Fortress 2 is known to not pre-cache MvM game mode sounds on non-MvM maps.\n\nDue to the above, this native should be called before any calls to GetGameSoundParams,\nEmitGameSound*, or EmitAmbientGameSound.\n\nIt should be safe to pass already precached game sounds to this function.\n\nNote: It precaches all files for a game sound.","tags":[{"tag":"","text":"Precache a game sound.\n\nMost games will precache all game sounds on map start, but this is not guaranteed...\nTeam Fortress 2 is known to not pre-cache MvM game mode sounds on non-MvM maps.\n\nDue to the above, this native should be called before any calls to GetGameSoundParams,\nEmitGameSound*, or EmitAmbientGameSound.\n\nIt should be safe to pass already precached game sounds to this function.\n\nNote: It precaches all files for a game sound."},{"tag":"param:soundname","text":"Game sound to precache"},{"tag":"return","text":"True if the game sound was found, false if sound did not exist\nor had no files"}]},"kind":"native","returnType":"bool","arguments":[{"type":"const char[]","name":"soundname","decl":"const char[] soundname","default":null}]}],"methodmaps":[],"enumstructs":[],"constants":[{"name":"SNDCHAN_REPLACE","docStart":1988,"docEnd":2003,"docs":{"brief":"Unknown","tags":[{"tag":"","text":"Unknown"}]}},{"name":"SNDCHAN_AUTO","docStart":2034,"docEnd":2046,"docs":{"brief":"Auto","tags":[{"tag":"","text":"Auto"}]}},{"name":"SNDCHAN_WEAPON","docStart":2077,"docEnd":2092,"docs":{"brief":"Weapons","tags":[{"tag":"","text":"Weapons"}]}},{"name":"SNDCHAN_VOICE","docStart":2123,"docEnd":2137,"docs":{"brief":"Voices","tags":[{"tag":"","text":"Voices"}]}},{"name":"SNDCHAN_ITEM","docStart":2168,"docEnd":2181,"docs":{"brief":"Items","tags":[{"tag":"","text":"Items"}]}},{"name":"SNDCHAN_BODY","docStart":2212,"docEnd":2227,"docs":{"brief":"Player?","tags":[{"tag":"","text":"Player?"}]}},{"name":"SNDCHAN_STREAM","docStart":2258,"docEnd":2314,"docs":{"brief":"\"Stream channel from the static or dynamic area\"","tags":[{"tag":"","text":"\"Stream channel from the static or dynamic area\""}]}},{"name":"SNDCHAN_STATIC","docStart":2345,"docEnd":2390,"docs":{"brief":"\"Stream channel from the static area\"","tags":[{"tag":"","text":"\"Stream channel from the static area\""}]}},{"name":"SNDCHAN_VOICE_BASE","docStart":2421,"docEnd":2461,"docs":{"brief":"\"Channel for network voice data\"","tags":[{"tag":"","text":"\"Channel for network voice data\""}]}},{"name":"SNDCHAN_USER_BASE","docStart":2492,"docEnd":2542,"docs":{"brief":"Anything >= this is allocated to game code","tags":[{"tag":"","text":"Anything >= this is allocated to game code"}]}},{"name":"SND_NOFLAGS","docStart":2644,"docEnd":2659,"docs":{"brief":"Nothing","tags":[{"tag":"","text":"Nothing"}]}},{"name":"SND_CHANGEVOL","docStart":2690,"docEnd":2717,"docs":{"brief":"Change sound volume","tags":[{"tag":"","text":"Change sound volume"}]}},{"name":"SND_CHANGEPITCH","docStart":2748,"docEnd":2774,"docs":{"brief":"Change sound pitch","tags":[{"tag":"","text":"Change sound pitch"}]}},{"name":"SND_STOP","docStart":2805,"docEnd":2827,"docs":{"brief":"Stop the sound","tags":[{"tag":"","text":"Stop the sound"}]}},{"name":"SND_SPAWNING","docStart":2858,"docEnd":2897,"docs":{"brief":"Used in some cases for ambients","tags":[{"tag":"","text":"Used in some cases for ambients"}]}},{"name":"SND_DELAY","docStart":2928,"docEnd":2962,"docs":{"brief":"Sound has an initial delay","tags":[{"tag":"","text":"Sound has an initial delay"}]}},{"name":"SND_STOPLOOPING","docStart":2993,"docEnd":3038,"docs":{"brief":"Stop looping all sounds on the entity","tags":[{"tag":"","text":"Stop looping all sounds on the entity"}]}},{"name":"SND_SPEAKER","docStart":3069,"docEnd":3116,"docs":{"brief":"Being played by a mic through a speaker","tags":[{"tag":"","text":"Being played by a mic through a speaker"}]}},{"name":"SND_SHOULDPAUSE","docStart":3147,"docEnd":3178,"docs":{"brief":"Pause if game is paused","tags":[{"tag":"","text":"Pause if game is paused"}]}},{"name":"SNDLEVEL_NONE","docStart":3277,"docEnd":3289,"docs":{"brief":"None","tags":[{"tag":"","text":"None"}]}},{"name":"SNDLEVEL_RUSTLE","docStart":3320,"docEnd":3343,"docs":{"brief":"Rustling leaves","tags":[{"tag":"","text":"Rustling leaves"}]}},{"name":"SNDLEVEL_WHISPER","docStart":3374,"docEnd":3392,"docs":{"brief":"Whispering","tags":[{"tag":"","text":"Whispering"}]}},{"name":"SNDLEVEL_LIBRARY","docStart":3423,"docEnd":3443,"docs":{"brief":"In a library","tags":[{"tag":"","text":"In a library"}]}},{"name":"SNDLEVEL_FRIDGE","docStart":3474,"docEnd":3494,"docs":{"brief":"Refrigerator","tags":[{"tag":"","text":"Refrigerator"}]}},{"name":"SNDLEVEL_HOME","docStart":3525,"docEnd":3556,"docs":{"brief":"Average home (3.9 attn)","tags":[{"tag":"","text":"Average home (3.9 attn)"}]}},{"name":"SNDLEVEL_CONVO","docStart":3587,"docEnd":3625,"docs":{"brief":"Normal conversation (2.0 attn)","tags":[{"tag":"","text":"Normal conversation (2.0 attn)"}]}},{"name":"SNDLEVEL_DRYER","docStart":3656,"docEnd":3677,"docs":{"brief":"Clothes dryer","tags":[{"tag":"","text":"Clothes dryer"}]}},{"name":"SNDLEVEL_DISHWASHER","docStart":3708,"docEnd":3753,"docs":{"brief":"Dishwasher/washing machine (1.5 attn)","tags":[{"tag":"","text":"Dishwasher/washing machine (1.5 attn)"}]}},{"name":"SNDLEVEL_CAR","docStart":3784,"docEnd":3824,"docs":{"brief":"Car or vacuum cleaner (1.0 attn)","tags":[{"tag":"","text":"Car or vacuum cleaner (1.0 attn)"}]}},{"name":"SNDLEVEL_NORMAL","docStart":3855,"docEnd":3881,"docs":{"brief":"Normal sound level","tags":[{"tag":"","text":"Normal sound level"}]}},{"name":"SNDLEVEL_TRAFFIC","docStart":3912,"docEnd":3943,"docs":{"brief":"Busy traffic (0.8 attn)","tags":[{"tag":"","text":"Busy traffic (0.8 attn)"}]}},{"name":"SNDLEVEL_MINIBIKE","docStart":3974,"docEnd":4015,"docs":{"brief":"Mini-bike, alarm clock (0.7 attn)","tags":[{"tag":"","text":"Mini-bike, alarm clock (0.7 attn)"}]}},{"name":"SNDLEVEL_SCREAMING","docStart":4046,"docEnd":4080,"docs":{"brief":"Screaming child (0.5 attn)","tags":[{"tag":"","text":"Screaming child (0.5 attn)"}]}},{"name":"SNDLEVEL_TRAIN","docStart":4111,"docEnd":4159,"docs":{"brief":"Subway train, pneumatic drill (0.4 attn)","tags":[{"tag":"","text":"Subway train, pneumatic drill (0.4 attn)"}]}},{"name":"SNDLEVEL_HELICOPTER","docStart":4190,"docEnd":4208,"docs":{"brief":"Helicopter","tags":[{"tag":"","text":"Helicopter"}]}},{"name":"SNDLEVEL_SNOWMOBILE","docStart":4239,"docEnd":4258,"docs":{"brief":"Snow mobile","tags":[{"tag":"","text":"Snow mobile"}]}},{"name":"SNDLEVEL_AIRCRAFT","docStart":4289,"docEnd":4316,"docs":{"brief":"Auto horn, aircraft","tags":[{"tag":"","text":"Auto horn, aircraft"}]}},{"name":"SNDLEVEL_RAIDSIREN","docStart":4347,"docEnd":4369,"docs":{"brief":"Air raid siren","tags":[{"tag":"","text":"Air raid siren"}]}},{"name":"SNDLEVEL_GUNFIRE","docStart":4400,"docEnd":4439,"docs":{"brief":"Gunshot, jet engine (0.27 attn)","tags":[{"tag":"","text":"Gunshot, jet engine (0.27 attn)"}]}},{"name":"SNDLEVEL_ROCKET","docStart":4470,"docEnd":4505,"docs":{"brief":"Rocket launching (0.2 attn)","tags":[{"tag":"","text":"Rocket launching (0.2 attn)"}]}}],"enums":[],"typesets":[{"name":"NormalSHook","docStart":0,"docEnd":0,"docs":null,"types":[{"docStart":12865,"docEnd":13872,"docs":{"brief":"Called when a sound is going to be emitted to one or more clients.\nNOTICE: all params can be overwritten to modify the default behavior.","tags":[{"tag":"","text":"Called when a sound is going to be emitted to one or more clients.\nNOTICE: all params can be overwritten to modify the default behavior."},{"tag":"param:clients","text":"Array of client indexes."},{"tag":"param:numClients","text":"Number of clients in the array (modify this value if you add/remove elements from the client array)."},{"tag":"param:sample","text":"Sound file name relative to the \"sound\" folder."},{"tag":"param:entity","text":"Entity emitting the sound."},{"tag":"param:channel","text":"Channel emitting the sound."},{"tag":"param:volume","text":"Sound volume."},{"tag":"param:level","text":"Sound level."},{"tag":"param:pitch","text":"Sound pitch."},{"tag":"param:flags","text":"Sound flags."},{"tag":"param:soundEntry","text":"Game sound entry name. (Used in engines newer than Portal 2)"},{"tag":"param:seed","text":"Sound seed. (Used in engines newer than Portal 2)"},{"tag":"return","text":"Plugin_Continue to allow the sound to be played, Plugin_Stop to block it,\nPlugin_Changed when any parameter has been modified."}]},"type":"function Action(int clients[MAXPLAYERS], int& numClients, char sample[PLATFORM_MAX_PATH], int& entity, int& channel, float& volume, int& level, int& pitch, int& flags, char soundEntry[PLATFORM_MAX_PATH], int& seed)","parsedSignature":{"returnType":"Action","arguments":[{"type":"int","name":"clients[MAXPLAYERS]","decl":"int clients[MAXPLAYERS]","default":null},{"type":"int&","name":"numClients","decl":"int& numClients","default":null},{"type":"char","name":"sample[PLATFORM_MAX_PATH]","decl":"char sample[PLATFORM_MAX_PATH]","default":null},{"type":"int&","name":"entity","decl":"int& entity","default":null},{"type":"int&","name":"channel","decl":"int& channel","default":null},{"type":"float&","name":"volume","decl":"float& volume","default":null},{"type":"int&","name":"level","decl":"int& level","default":null},{"type":"int&","name":"pitch","decl":"int& pitch","default":null},{"type":"int&","name":"flags","decl":"int& flags","default":null},{"type":"char","name":"soundEntry[PLATFORM_MAX_PATH]","decl":"char soundEntry[PLATFORM_MAX_PATH]","default":null},{"type":"int&","name":"seed","decl":"int& seed","default":null}]}},{"docStart":14104,"docEnd":14139,"docs":{"brief":"Deprecated. Use other prototype.","tags":[{"tag":"","text":"Deprecated. Use other prototype."}]},"type":"function Action(int clients[64], int& numClients, char sample[PLATFORM_MAX_PATH], int& entity, int& channel, float& volume, int& level, int& pitch, int& flags, char soundEntry[PLATFORM_MAX_PATH], int& seed)","parsedSignature":{"returnType":"Action","arguments":[{"type":"int","name":"clients[64]","decl":"int clients[64]","default":null},{"type":"int&","name":"numClients","decl":"int& numClients","default":null},{"type":"char","name":"sample[PLATFORM_MAX_PATH]","decl":"char sample[PLATFORM_MAX_PATH]","default":null},{"type":"int&","name":"entity","decl":"int& entity","default":null},{"type":"int&","name":"channel","decl":"int& channel","default":null},{"type":"float&","name":"volume","decl":"float& volume","default":null},{"type":"int&","name":"level","decl":"int& level","default":null},{"type":"int&","name":"pitch","decl":"int& pitch","default":null},{"type":"int&","name":"flags","decl":"int& flags","default":null},{"type":"char","name":"soundEntry[PLATFORM_MAX_PATH]","decl":"char soundEntry[PLATFORM_MAX_PATH]","default":null},{"type":"int&","name":"seed","decl":"int& seed","default":null}]}},{"docStart":14363,"docEnd":14398,"docs":{"brief":"Deprecated. Use other prototype.","tags":[{"tag":"","text":"Deprecated. Use other prototype."}]},"type":"function Action(int clients[64], int& numClients, char sample[PLATFORM_MAX_PATH], int& entity, int& channel, float& volume, int& level, int& pitch, int& flags)","parsedSignature":{"returnType":"Action","arguments":[{"type":"int","name":"clients[64]","decl":"int clients[64]","default":null},{"type":"int&","name":"numClients","decl":"int& numClients","default":null},{"type":"char","name":"sample[PLATFORM_MAX_PATH]","decl":"char sample[PLATFORM_MAX_PATH]","default":null},{"type":"int&","name":"entity","decl":"int& entity","default":null},{"type":"int&","name":"channel","decl":"int& channel","default":null},{"type":"float&","name":"volume","decl":"float& volume","default":null},{"type":"int&","name":"level","decl":"int& level","default":null},{"type":"int&","name":"pitch","decl":"int& pitch","default":null},{"type":"int&","name":"flags","decl":"int& flags","default":null}]}}]}],"typedefs":[{"name":"AmbientSHook","docStart":11886,"docEnd":12643,"docs":{"brief":"Called when an ambient sound is about to be emitted to one or more clients.\n\nNOTICE: all parameters can be overwritten to modify the default behavior.","tags":[{"tag":"","text":"Called when an ambient sound is about to be emitted to one or more clients.\n\nNOTICE: all parameters can be overwritten to modify the default behavior."},{"tag":"param:sample","text":"Sound file name relative to the \"sound\" folder."},{"tag":"param:entity","text":"Entity index associated to the sound."},{"tag":"param:volume","text":"Volume (from 0.0 to 1.0)."},{"tag":"param:level","text":"Sound level (from 0 to 255)."},{"tag":"param:pitch","text":"Pitch (from 0 to 255)."},{"tag":"param:pos","text":"Origin of sound."},{"tag":"param:flags","text":"Sound flags."},{"tag":"param:delay","text":"Play delay."},{"tag":"return","text":"Plugin_Continue to allow the sound to be played, Plugin_Stop to block it,\nPlugin_Changed when any parameter has been modified."}]},"type":"function Action(char sample[PLATFORM_MAX_PATH], int& entity, float& volume, int& level, int& pitch, float pos[3], int& flags, float& delay)","parsedSignature":{"returnType":"Action","arguments":[{"type":"char","name":"sample[PLATFORM_MAX_PATH]","decl":"char sample[PLATFORM_MAX_PATH]","default":null},{"type":"int&","name":"entity","decl":"int& entity","default":null},{"type":"float&","name":"volume","decl":"float& volume","default":null},{"type":"int&","name":"level","decl":"int& level","default":null},{"type":"int&","name":"pitch","decl":"int& pitch","default":null},{"type":"float","name":"pos[3]","decl":"float pos[3]","default":null},{"type":"int&","name":"flags","decl":"int& flags","default":null},{"type":"float&","name":"delay","decl":"float& delay","default":null}]}}]}