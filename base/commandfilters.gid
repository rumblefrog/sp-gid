{"functions":[{"name":"ProcessTargetString","docStart":2901,"docEnd":4138,"docs":{"brief":"Processes a generic command target string, and resolves it to a list\nof clients or one client, based on filtering rules and a pattern.\n\nNote that you should use LoadTranslations(\"common.phrases\") in OnPluginStart(),\nas that file is guaranteed to contain all of the translatable phrases that\nProcessTargetString() will return.","tags":[{"tag":"","text":"Processes a generic command target string, and resolves it to a list\nof clients or one client, based on filtering rules and a pattern.\n\nNote that you should use LoadTranslations(\"common.phrases\") in OnPluginStart(),\nas that file is guaranteed to contain all of the translatable phrases that\nProcessTargetString() will return."},{"tag":"param:pattern","text":"Pattern to find clients against."},{"tag":"param:admin","text":"Admin performing the action, or 0 if the server."},{"tag":"param:targets","text":"Array to hold targets."},{"tag":"param:max_targets","text":"Maximum size of the targets array."},{"tag":"param:filter_flags","text":"Filter flags."},{"tag":"param:target_name","text":"Buffer to store the target name."},{"tag":"param:tn_maxlength","text":"Maximum length of the target name buffer."},{"tag":"param:tn_is_ml","text":"OUTPUT: Will be true if the target name buffer is an ML phrase,\nfalse if it is a normal string."},{"tag":"return","text":"If a multi-target pattern was used, the number of clients found\nis returned.  If a single-target pattern was used, 1 is returned\nif one valid client is found.  Otherwise, a COMMAND_TARGET reason\nfor failure is returned."}]},"kind":"native","returnType":"int","arguments":[{"type":"const char[]","name":"pattern","decl":"const char[] pattern","default":null},{"type":"int","name":"admin","decl":"int admin","default":null},{"type":"int[]","name":"targets","decl":"int[] targets","default":null},{"type":"int","name":"max_targets","decl":"int max_targets","default":null},{"type":"int","name":"filter_flags","decl":"int filter_flags","default":null},{"type":"char[]","name":"target_name","decl":"char[] target_name","default":null},{"type":"int","name":"tn_maxlength","decl":"int tn_maxlength","default":null},{"type":"bool&","name":"tn_is_ml","decl":"bool& tn_is_ml","default":null}]},{"name":"ReplyToTargetError","docStart":4390,"docEnd":4667,"docs":{"brief":"Replies to a client with a given message describing a targetting\nfailure reason.\n\nNote: The translation phrases are found in common.phrases.txt.","tags":[{"tag":"","text":"Replies to a client with a given message describing a targetting\nfailure reason.\n\nNote: The translation phrases are found in common.phrases.txt."},{"tag":"param:client","text":"Client index, or 0 for server."},{"tag":"param:reason","text":"COMMAND_TARGET reason."}]},"kind":"stock","returnType":"void","arguments":[{"type":"int","name":"client","decl":"int client","default":null},{"type":"int","name":"reason","decl":"int reason","default":null}]},{"name":"AddMultiTargetFilter","docStart":6001,"docEnd":6333,"docs":{"brief":"Adds a multi-target filter function for ProcessTargetString().","tags":[{"tag":"","text":"Adds a multi-target filter function for ProcessTargetString()."},{"tag":"param:pattern","text":"Pattern to match (case sensitive)."},{"tag":"param:filter","text":"Filter function."},{"tag":"param:phrase","text":"Descriptive phrase to display on successful match."},{"tag":"param:phraseIsML","text":"True if phrase is multi-lingual, false otherwise."}]},"kind":"native","returnType":"void","arguments":[{"type":"const char[]","name":"pattern","decl":"const char[] pattern","default":null},{"type":"MultiTargetFilter","name":"filter","decl":"MultiTargetFilter filter","default":null},{"type":"const char[]","name":"phrase","decl":"const char[] phrase","default":null},{"type":"bool","name":"phraseIsML","decl":"bool phraseIsML","default":null}]},{"name":"RemoveMultiTargetFilter","docStart":6492,"docEnd":6677,"docs":{"brief":"Removes a multi-target filter function from ProcessTargetString().","tags":[{"tag":"","text":"Removes a multi-target filter function from ProcessTargetString()."},{"tag":"param:pattern","text":"Pattern to match (case sensitive)."},{"tag":"param:filter","text":"Filter function."}]},"kind":"native","returnType":"void","arguments":[{"type":"const char[]","name":"pattern","decl":"const char[] pattern","default":null},{"type":"MultiTargetFilter","name":"filter","decl":"MultiTargetFilter filter","default":null}]}],"methodmaps":[],"enumstructs":[],"constants":[],"enums":[],"typesets":[{"name":"MultiTargetFilter","docStart":5608,"docEnd":5850,"docs":{"brief":"Adds clients to a multi-target filter.","tags":[{"tag":"","text":"Adds clients to a multi-target filter."},{"tag":"param:pattern","text":"Pattern name."},{"tag":"param:clients","text":"Array to fill with unique, valid client indexes."},{"tag":"return","text":"True if pattern was recognized, false otherwise."}]},"types":[{"docStart":0,"docEnd":0,"docs":null,"type":"function bool(const char[] pattern, Handle clients)","parsedSignature":{"returnType":"bool","arguments":[{"type":"const char[]","name":"pattern","decl":"const char[] pattern","default":null},{"type":"Handle","name":"clients","decl":"Handle clients","default":null}]}},{"docStart":0,"docEnd":0,"docs":null,"type":"function bool(const char[] pattern, ArrayList clients)","parsedSignature":{"returnType":"bool","arguments":[{"type":"const char[]","name":"pattern","decl":"const char[] pattern","default":null},{"type":"ArrayList","name":"clients","decl":"ArrayList clients","default":null}]}}]}],"typedefs":[]}