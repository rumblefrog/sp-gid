{"functions":[{"name":"MC_PrintToChat","docStart":899,"docEnd":1153,"docs":{"brief":"Prints a message to a specific client in the chat area.\nSupports color tags.","tags":[{"tag":"","text":"Prints a message to a specific client in the chat area.\nSupports color tags."},{"tag":"param:client","text":"Client index."},{"tag":"param:message","text":"Message (formatting rules).\n\nOn error/Errors:  If the client is not connected an error will be thrown."}]},"kind":"stock","returnType":"void","arguments":[{"type":"int","name":"client","decl":"int client","default":null},{"type":"const char[]","name":"message","decl":"const char[] message","default":null},{"type":"any...","name":"","decl":"any... ","default":null}]},{"name":"MC_PrintToChatAll","docStart":1693,"docEnd":1860,"docs":{"brief":"Prints a message to all clients in the chat area.\nSupports color tags.","tags":[{"tag":"","text":"Prints a message to all clients in the chat area.\nSupports color tags."},{"tag":"param:client","text":"Client index."},{"tag":"param:message","text":"Message (formatting rules)."}]},"kind":"stock","returnType":"void","arguments":[{"type":"const char[]","name":"message","decl":"const char[] message","default":null},{"type":"any...","name":"","decl":"any... ","default":null}]},{"name":"MC_PrintToChatEx","docStart":2333,"docEnd":2690,"docs":{"brief":"Prints a message to a specific client in the chat area.\nSupports color tags and teamcolor tag.","tags":[{"tag":"","text":"Prints a message to a specific client in the chat area.\nSupports color tags and teamcolor tag."},{"tag":"param:client","text":"Client index."},{"tag":"param:author","text":"Author index whose color will be used for teamcolor tag."},{"tag":"param:message","text":"Message (formatting rules).\n\nOn error/Errors:  If the client or author are not connected an error will be thrown"}]},"kind":"stock","returnType":"void","arguments":[{"type":"int","name":"client","decl":"int client","default":null},{"type":"int","name":"author","decl":"int author","default":null},{"type":"const char[]","name":"message","decl":"const char[] message","default":null},{"type":"any...","name":"","decl":"any... ","default":null}]},{"name":"MC_PrintToChatAllEx","docStart":3434,"docEnd":3745,"docs":{"brief":"Prints a message to all clients in the chat area.\nSupports color tags and teamcolor tag.","tags":[{"tag":"","text":"Prints a message to all clients in the chat area.\nSupports color tags and teamcolor tag."},{"tag":"param:author","text":"Author index whose color will be used for teamcolor tag."},{"tag":"param:message","text":"Message (formatting rules).\n\nOn error/Errors:   If the author is not connected an error will be thrown."}]},"kind":"stock","returnType":"void","arguments":[{"type":"int","name":"author","decl":"int author","default":null},{"type":"const char[]","name":"message","decl":"const char[] message","default":null},{"type":"any...","name":"","decl":"any... ","default":null}]},{"name":"MC_SendMessage","docStart":4436,"docEnd":4560,"docs":{"brief":"Sends a SayText2 usermessage","tags":[{"tag":"","text":"Sends a SayText2 usermessage"},{"tag":"param:client","text":"Client to send usermessage to"},{"tag":"param:message","text":"Message to send"}]},"kind":"stock","returnType":"void","arguments":[{"type":"int","name":"client","decl":"int client","default":null},{"type":"const char[]","name":"message","decl":"const char[] message","default":null},{"type":"int","name":"author","decl":"int author","default":"0"}]},{"name":"MC_SkipNextClient","docStart":5957,"docEnd":6254,"docs":{"brief":"This function should only be used right in front of\nMC_PrintToChatAll or MC_PrintToChatAllEx. It causes those functions\nto skip the specified client when printing the message.\nAfter printing the message, the client will no longer be skipped.","tags":[{"tag":"","text":"This function should only be used right in front of\nMC_PrintToChatAll or MC_PrintToChatAllEx. It causes those functions\nto skip the specified client when printing the message.\nAfter printing the message, the client will no longer be skipped."},{"tag":"param:client","text":"Client index"}]},"kind":"stock","returnType":"void","arguments":[{"type":"int","name":"client","decl":"int client","default":null}]},{"name":"MC_CheckTrie","docStart":6427,"docEnd":6554,"docs":{"brief":"Checks if the colors trie is initialized and initializes it if it's not (used internally)","tags":[{"tag":"","text":"Checks if the colors trie is initialized and initializes it if it's not (used internally)"},{"tag":"return","text":"No return"}]},"kind":"stock","returnType":"void","arguments":[]},{"name":"MC_ReplaceColorCodes","docStart":6645,"docEnd":7225,"docs":{"brief":"Replaces color tags in a string with color codes (used internally by MC_PrintToChat, MC_PrintToChatAll, MC_PrintToChatEx, and MC_PrintToChatAllEx","tags":[{"tag":"","text":"Replaces color tags in a string with color codes (used internally by MC_PrintToChat, MC_PrintToChatAll, MC_PrintToChatEx, and MC_PrintToChatAllEx"},{"tag":"param:buffer","text":"String."},{"tag":"param:author","text":"Optional client index to use for {teamcolor} tags, or 0 for none"},{"tag":"param:removeTags","text":"Optional boolean value to determine whether we're replacing tags with colors, or just removing tags, used by MC_RemoveTags"},{"tag":"param:maxlen","text":"Optional value for max buffer length, used by MC_RemoveTags\n\nOn error/Errors:  If the client index passed for author is invalid or not in game."}]},"kind":"stock","returnType":"void","arguments":[{"type":"char[]","name":"buffer","decl":"char[] buffer","default":null},{"type":"int","name":"author","decl":"int author","default":"0"},{"type":"bool","name":"removeTags","decl":"bool removeTags","default":"false"},{"type":"int","name":"maxlen","decl":"int maxlen","default":"256 * 4"}]},{"name":"CSubString","docStart":9407,"docEnd":9696,"docs":{"brief":"Gets a part of a string","tags":[{"tag":"","text":"Gets a part of a string"},{"tag":"param:input","text":"String to get the part from"},{"tag":"param:output","text":"Buffer to write to"},{"tag":"param:maxlen","text":"Max length of output buffer"},{"tag":"param:start","text":"Position to start at"},{"tag":"param:numChars","text":"Number of characters to return, or 0 for the end of the string"}]},"kind":"stock","returnType":"void","arguments":[{"type":"const char[]","name":"input","decl":"const char[] input","default":null},{"type":"char[]","name":"output","decl":"char[] output","default":null},{"type":"int","name":"maxlen","decl":"int maxlen","default":null},{"type":"int","name":"start","decl":"int start","default":null},{"type":"int","name":"numChars","decl":"int numChars","default":"0"}]},{"name":"MC_StrToLower","docStart":9973,"docEnd":10054,"docs":{"brief":"Converts a string to lowercase","tags":[{"tag":"","text":"Converts a string to lowercase"},{"tag":"param:buffer","text":"String to convert"}]},"kind":"stock","returnType":"void","arguments":[{"type":"char[]","name":"buffer","decl":"char[] buffer","default":null}]},{"name":"MC_AddColor","docStart":10201,"docEnd":10458,"docs":{"brief":"Adds a color to the colors trie","tags":[{"tag":"","text":"Adds a color to the colors trie"},{"tag":"param:name","text":"Color name, without braces"},{"tag":"param:color","text":"Hexadecimal representation of the color (0xRRGGBB)"},{"tag":"return","text":"True if color was added successfully, false if a color already exists with that name"}]},"kind":"stock","returnType":"bool","arguments":[{"type":"const char[]","name":"name","decl":"const char[] name","default":null},{"type":"int","name":"color","decl":"int color","default":null}]},{"name":"MC_RemoveTags","docStart":10742,"docEnd":10877,"docs":{"brief":"Removes color tags from a message","tags":[{"tag":"","text":"Removes color tags from a message"},{"tag":"param:message","text":"Message to remove tags from"},{"tag":"param:maxlen","text":"Maximum buffer length"}]},"kind":"stock","returnType":"void","arguments":[{"type":"char[]","name":"message","decl":"char[] message","default":null},{"type":"int","name":"maxlen","decl":"int maxlen","default":null}]},{"name":"MC_ReplyToCommand","docStart":10985,"docEnd":11115,"docs":{"brief":"Replies to a command with colors","tags":[{"tag":"","text":"Replies to a command with colors"},{"tag":"param:client","text":"Client to reply to"},{"tag":"param:message","text":"Message (formatting rules)"}]},"kind":"stock","returnType":"void","arguments":[{"type":"int","name":"client","decl":"int client","default":null},{"type":"const char[]","name":"message","decl":"const char[] message","default":null},{"type":"any...","name":"","decl":"any... ","default":null}]},{"name":"MC_ReplyToCommandEx","docStart":11586,"docEnd":11764,"docs":{"brief":"Replies to a command with colors","tags":[{"tag":"","text":"Replies to a command with colors"},{"tag":"param:client","text":"Client to reply to"},{"tag":"param:author","text":"Client to use for {teamcolor}"},{"tag":"param:message","text":"Message (formatting rules)"}]},"kind":"stock","returnType":"void","arguments":[{"type":"int","name":"client","decl":"int client","default":null},{"type":"int","name":"author","decl":"int author","default":null},{"type":"const char[]","name":"message","decl":"const char[] message","default":null},{"type":"any...","name":"","decl":"any... ","default":null}]},{"name":"MC_ShowActivity","docStart":12259,"docEnd":12822,"docs":{"brief":"Displays usage of an admin command to users depending on the\nsetting of the sm_show_activity cvar.\n\nThis version does not display a message to the originating client\nif used from chat triggers or menus.  If manual replies are used\nfor these cases, then this function will suffice.  Otherwise,\nMC_ShowActivity2() is slightly more useful.\nSupports color tags.","tags":[{"tag":"","text":"Displays usage of an admin command to users depending on the\nsetting of the sm_show_activity cvar.\n\nThis version does not display a message to the originating client\nif used from chat triggers or menus.  If manual replies are used\nfor these cases, then this function will suffice.  Otherwise,\nMC_ShowActivity2() is slightly more useful.\nSupports color tags."},{"tag":"param:client","text":"Client index doing the action, or 0 for server."},{"tag":"param:format","text":"Formatting rules."},{"tag":"param:...","text":"Variable number of format parameters."}]},"kind":"stock","returnType":"int","arguments":[{"type":"int","name":"client","decl":"int client","default":null},{"type":"const char[]","name":"format","decl":"const char[] format","default":null},{"type":"any...","name":"","decl":"any... ","default":null}]}],"methodmaps":[],"enumstructs":[],"constants":[],"enums":[],"typesets":[],"typedefs":[]}